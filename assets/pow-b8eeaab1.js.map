{"version":3,"file":"pow-b8eeaab1.js","sources":["../../node_modules/d3-scale/src/constant.js","../../node_modules/d3-scale/src/number.js","../../node_modules/d3-scale/src/continuous.js","../../node_modules/d3-format/src/formatDecimal.js","../../node_modules/d3-format/src/exponent.js","../../node_modules/d3-format/src/formatGroup.js","../../node_modules/d3-format/src/formatNumerals.js","../../node_modules/d3-format/src/formatSpecifier.js","../../node_modules/d3-format/src/formatTrim.js","../../node_modules/d3-format/src/formatPrefixAuto.js","../../node_modules/d3-format/src/formatRounded.js","../../node_modules/d3-format/src/formatTypes.js","../../node_modules/d3-format/src/identity.js","../../node_modules/d3-format/src/locale.js","../../node_modules/d3-format/src/defaultLocale.js","../../node_modules/d3-format/src/precisionFixed.js","../../node_modules/d3-format/src/precisionPrefix.js","../../node_modules/d3-format/src/precisionRound.js","../../node_modules/d3-scale/src/tickFormat.js","../../node_modules/d3-scale/src/linear.js","../../node_modules/d3-scale/src/nice.js","../../node_modules/d3-scale/src/log.js","../../node_modules/d3-scale/src/symlog.js","../../node_modules/d3-scale/src/pow.js"],"sourcesContent":["export default function constants(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function number(x) {\n  return +x;\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n","export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, Â±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": formatDecimal,\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"Âµ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer âvalueâ part that can be\n        // grouped, and fractional or exponential âsuffixâ part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"],\n  minus: \"-\"\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n","import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport tickFormat from \"./tickFormat.js\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start\n        d[i1] = stop\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","export default function nice(domain, interval) {\n  domain = domain.slice();\n\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n}\n","import {ticks} from \"d3-array\";\nimport {format, formatSpecifier} from \"d3-format\";\nimport nice from \"./nice.js\";\nimport {copy, transformer} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\n\nfunction transformLog(x) {\n  return Math.log(x);\n}\n\nfunction transformExp(x) {\n  return Math.exp(x);\n}\n\nfunction transformLogn(x) {\n  return -Math.log(-x);\n}\n\nfunction transformExpn(x) {\n  return -Math.exp(-x);\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10\n      : base === Math.E ? Math.exp\n      : x => Math.pow(base, x);\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log\n      : base === 10 && Math.log10\n      || base === 2 && Math.log2\n      || (base = Math.log(base), x => Math.log(x) / base);\n}\n\nfunction reflect(f) {\n  return (x, k) => -f(-x, k);\n}\n\nexport function loggish(transform) {\n  const scale = transform(transformLog, transformExp);\n  const domain = scale.domain;\n  let base = 10;\n  let logs;\n  let pows;\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) {\n      logs = reflect(logs), pows = reflect(pows);\n      transform(transformLogn, transformExpn);\n    } else {\n      transform(transformLog, transformExp);\n    }\n    return scale;\n  }\n\n  scale.base = function(_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = count => {\n    const d = domain();\n    let u = d[0];\n    let v = d[d.length - 1];\n    const r = v < u;\n\n    if (r) ([u, v] = [v, u]);\n\n    let i = logs(u);\n    let j = logs(v);\n    let k;\n    let t;\n    const n = count == null ? 10 : +count;\n    let z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.floor(i), j = Math.ceil(j);\n      if (u > 0) for (; i <= j; ++i) {\n        for (k = 1; k < base; ++k) {\n          t = i < 0 ? k / pows(-i) : k * pows(i);\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i <= j; ++i) {\n        for (k = base - 1; k >= 1; --k) {\n          t = i > 0 ? k / pows(-i) : k * pows(i);\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n      if (z.length * 2 < n) z = ticks(u, v, n);\n    } else {\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = (count, specifier) => {\n    if (count == null) count = 10;\n    if (specifier == null) specifier = base === 10 ? \"s\" : \",\";\n    if (typeof specifier !== \"function\") {\n      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;\n      specifier = format(specifier);\n    }\n    if (count === Infinity) return specifier;\n    const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return d => {\n      let i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = () => {\n    return domain(nice(domain(), {\n      floor: x => pows(Math.floor(logs(x))),\n      ceil: x => pows(Math.ceil(logs(x)))\n    }));\n  };\n\n  return scale;\n}\n\nexport default function log() {\n  const scale = loggish(transformer()).domain([1, 10]);\n  scale.copy = () => copy(scale, log()).base(scale.base());\n  initRange.apply(scale, arguments);\n  return scale;\n}\n","import {linearish} from \"./linear.js\";\nimport {copy, transformer} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\n\nfunction transformSymlog(c) {\n  return function(x) {\n    return Math.sign(x) * Math.log1p(Math.abs(x / c));\n  };\n}\n\nfunction transformSymexp(c) {\n  return function(x) {\n    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n  };\n}\n\nexport function symlogish(transform) {\n  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));\n\n  scale.constant = function(_) {\n    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\n  };\n\n  return linearish(scale);\n}\n\nexport default function symlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, symlog()).constant(scale.constant());\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","import {linearish} from \"./linear.js\";\nimport {copy, identity, transformer} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\n\nfunction transformPow(exponent) {\n  return function(x) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  };\n}\n\nfunction transformSqrt(x) {\n  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\n}\n\nfunction transformSquare(x) {\n  return x < 0 ? -x * x : x * x;\n}\n\nexport function powish(transform) {\n  var scale = transform(identity, identity),\n      exponent = 1;\n\n  function rescale() {\n    return exponent === 1 ? transform(identity, identity)\n        : exponent === 0.5 ? transform(transformSqrt, transformSquare)\n        : transform(transformPow(exponent), transformPow(1 / exponent));\n  }\n\n  scale.exponent = function(_) {\n    return arguments.length ? (exponent = +_, rescale()) : exponent;\n  };\n\n  return linearish(scale);\n}\n\nexport default function pow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, pow()).exponent(scale.exponent());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\nexport function sqrt() {\n  return pow.apply(null, arguments).exponent(0.5);\n}\n"],"names":["constants","x","number","unit","identity","normalize","a","b","constant","clamper","t","bimap","domain","range","interpolate","d0","d1","r0","r1","polymap","j","d","r","i","bisect","copy","source","target","transformer","interpolateValue","transform","untransform","unknown","clamp","piecewise","output","input","rescale","n","scale","y","interpolateNumber","_","interpolateRound","u","continuous","formatDecimal","formatDecimalParts","p","coefficient","exponent","formatGroup","grouping","thousands","value","width","g","length","formatNumerals","numerals","re","formatSpecifier","specifier","match","FormatSpecifier","formatTrim","s","out","i0","i1","prefixExponent","formatPrefixAuto","formatRounded","formatTypes","map","prefixes","formatLocale","locale","group","currencyPrefix","currencySuffix","decimal","percent","minus","nan","newFormat","fill","align","sign","symbol","zero","comma","precision","trim","type","prefix","suffix","formatType","maybeSuffix","format","valuePrefix","valueSuffix","c","valueNegative","padding","formatPrefix","f","e","k","defaultLocale","definition","precisionFixed","step","precisionPrefix","precisionRound","max","tickFormat","start","stop","count","tickStep","linearish","ticks","prestep","maxIter","tickIncrement","linear","initRange","nice","interval","x0","x1","transformLog","transformExp","transformLogn","transformExpn","pow10","powp","base","logp","reflect","loggish","logs","pows","v","z","log","transformSymlog","transformSymexp","symlogish","symlog","transformPow","transformSqrt","transformSquare","powish","pow","sqrt"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]}