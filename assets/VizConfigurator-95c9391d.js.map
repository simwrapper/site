{"version":3,"file":"VizConfigurator-95c9391d.js","sources":["../../src/components/viz-configurator/AddDatasets.vue","../../src/components/viz-configurator/Colors.vue","../../src/components/viz-configurator/Widths.vue","../../src/components/viz-configurator/LineColors.vue","../../src/components/viz-configurator/FillColors.vue","../../src/components/viz-configurator/FillHeight.vue","../../src/components/viz-configurator/LineWidths.vue","../../src/components/viz-configurator/Layers.vue","../../src/components/viz-configurator/CircleRadius.vue","../../src/components/viz-configurator/Filters.vue","../../src/components/viz-configurator/VizConfigurator.vue"],"sourcesContent":["<template lang=\"pug\">\n.datasets-panel\n  .loading-panel(v-if=\"isLoading\")\n    .thing\n      .spinner-box\n        p &nbsp;\n      h3 LOADING...\n\n  h3.button-close(@click=\"clickedClose\")\n    i.fa.fa-sm.fa-times\n\n  h3.header-line Add Data\n\n  .widgets\n    .widget\n      b Choose a dataset from files in this folder:\n      b-select.selector(expanded v-model=\"fileChoice\")\n        option(value=\"\" label=\"Select file...\")\n        option(v-for=\"filename in filesInFolder\" :value=\"filename\" :label=\"filename\")\n\n  br\n  .drop-zone\n      b Or Drag and Drop any dataset file:\n\n      file-selector(\n        :accept-extensions=\"validDataTypes.map(m => `.${m}`).join(',')\"\n        :multiple=\"true\"\n        :is-loading=\"isLoading\"\n        @validated=\"handleFilesValidated\"\n        @changed=\"handleFilesChanged\")\n\n          | or&nbsp;\n          b: a browse your files\n\n          .section-top(slot=\"top\")\n            br\n            p Drop files into this area.\n            p No size limit, but large datasets could crash your browser :-)\n            br\n            p Supported file types:&nbsp;\n              b {{ validDataTypes.join(', ')}}\n\n          .section-bottom(slot=\"loader\")\n            p: b Processing files<br/>\n            p: i Please wait...\n\n      br\n      p.center\n        input(style=\"display: none;\" name=\"dataBrowser\" id=\"dataBrowser\" type=\"file\")\n\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport { gUnzip } from '@/js/util'\nimport { VizLayerConfiguration, FileSystemConfig, DataTable } from '@/Globals'\nimport FileSelector from './FileSelector.vue'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\nimport DataFetcherWorker from '@/workers/DataFetcher.worker.ts?worker'\n\nexport type DatasetDefinition = {\n  key: string\n  filename?: string\n  dataTable: DataTable\n}\n\nexport default defineComponent({\n  name: 'AddDatasetsPanel',\n  components: { FileSelector },\n  props: {\n    fileSystem: { type: Object as PropType<FileSystemConfig>, required: true },\n    subfolder: { type: String, required: true },\n    vizConfiguration: { type: Object as PropType<VizLayerConfiguration> },\n  },\n  data: () => {\n    return {\n      validDataTypes: ['CSV', 'TSV', 'TAB', 'TXT', 'DBF', 'GZ', 'DAT'],\n      validRegex: /\\.(CSV|TSV|TAB|TXT|DBF|DAT)(\\.GZ)?$/,\n      fileChoice: '',\n      filesInFolder: [] as string[],\n      isLoading: false,\n    }\n  },\n  computed: {\n    fileApi(): HTTPFileSystem {\n      return new HTTPFileSystem(this.fileSystem)\n    },\n  },\n\n  async mounted() {\n    const { files } = await this.fileApi.getDirectory(this.subfolder)\n    this.filesInFolder = files.filter(f => this.validRegex.test(f.toLocaleUpperCase())).sort()\n  },\n\n  watch: {\n    fileChoice() {\n      console.warn('*** File Chosen!')\n      this.fileChoiceChanged(this.fileChoice)\n    },\n  },\n  methods: {\n    clickedClose() {\n      this.$emit('update', {})\n    },\n\n    async fileChoiceChanged(file: string) {\n      if (!file) return\n\n      this.isLoading = true\n      const dataTable = await this.fetchDataset(file)\n\n      // create a human-readable key for this file based on filename\n      let key = file\n      const pieces = this.validRegex.exec(file.toLocaleUpperCase())\n      if (pieces && pieces[0]) key = file.substring(0, file.length - pieces[0].length)\n\n      const dataset: DatasetDefinition = {\n        key,\n        dataTable,\n        filename: file,\n      }\n      this.$emit('update', { dataset })\n      this.isLoading = false\n    },\n\n    handleFilesValidated(result: any, files: any) {\n      console.log('Validated result', result)\n    },\n\n    async handleFilesChanged(files: any) {\n      this.isLoading = true\n\n      const list = Array.from(files) as any[]\n      for (const file of list) {\n        let result = (await this.loadDataUrl(file)) as any\n        const buffer = result.buffer || result\n        const data = await this.processBuffer(file.name, buffer)\n        // separate CSV comments from dataset columns\n        const { comments, ...dataTable } = data\n\n        // create a human-readable key for this file based on filename\n        let key = file.name\n        const pieces = this.validRegex.exec(key.toLocaleUpperCase())\n        if (pieces && pieces[0]) key = key.substring(0, key.length - pieces[0].length)\n\n        const dataset: DatasetDefinition = {\n          key,\n          dataTable,\n          filename: file,\n        }\n        this.$emit('update', { dataset })\n      }\n\n      this.isLoading = false\n    },\n\n    async processBuffer(name: string, buffer: ArrayBuffer) {\n      return new Promise<DataTable>((resolve, reject) => {\n        const thread = new DataFetcherWorker()\n        try {\n          thread.postMessage(\n            {\n              config: { dataset: name },\n              buffer,\n            },\n            [buffer]\n          )\n\n          thread.onmessage = e => {\n            thread.terminate()\n            resolve(e.data)\n          }\n        } catch (err) {\n          thread.terminate()\n          reject(err)\n        }\n      })\n    },\n\n    async loadDataUrl(file: any) {\n      const url = await new Promise(resolve => {\n        const reader = new FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onload = (e: any) => {\n          const buffer = e.target.result\n          const unzipped = gUnzip(buffer)\n          resolve(unzipped)\n        }\n      })\n      return url\n    },\n\n    async fetchDataset(dataset: string) {\n      return new Promise<DataTable>((resolve, reject) => {\n        const thread = new DataFetcherWorker()\n        try {\n          thread.postMessage({\n            fileSystemConfig: this.fileSystem,\n            subfolder: this.subfolder,\n            files: this.filesInFolder,\n            config: { dataset },\n          })\n\n          thread.onmessage = e => {\n            thread.terminate()\n            resolve(e.data)\n          }\n        } catch (err) {\n          thread.terminate()\n          reject(err)\n        }\n      })\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n$primColor: #008484;\n$secTextColor: #6f6f6f;\n\n.datasets-panel {\n  pointer-events: auto;\n  position: relative;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: 2000;\n  min-width: 100%;\n  padding: 0 1rem 1rem 1rem;\n  margin: 0 0.5rem auto 0;\n  background-color: var(--bgPanel2);\n  border: 1px solid var(--bgBold);\n  border-radius: 4px;\n  box-shadow: 0px 0px 10px 3px #22222240;\n  // filter: $filterShadow;\n}\n\n.widgets {\n  display: flex;\n  margin-bottom: 0.5rem;\n\n  p {\n    margin-top: 5px;\n    font-size: 1rem;\n  }\n}\n\n.widget {\n  flex: 1;\n}\n\na {\n  text-decoration: underline;\n}\n\n.header-line {\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n}\n.button-close {\n  position: absolute;\n  right: 0;\n  width: 3rem;\n  height: 2.5rem;\n  padding-top: 0;\n  text-align: center;\n  // margin-top: auto;\n  // margin-right: 1rem;\n}\n\n.button-close:hover {\n  background-color: #6688cc80;\n  color: white;\n  cursor: pointer;\n}\n\n.selector {\n  margin-top: 0.75rem;\n  overflow-x: auto;\n  max-width: 100%;\n}\n\n.center {\n  text-align: center;\n}\n// hello\n\n.fs-file-selector {\n  margin-top: 1rem;\n  user-select: none;\n  position: sticky !important;\n  // top: -2px;\n  text-align: center;\n  // background-color: rgba($primColor, 0.01);\n  backdrop-filter: blur(35px) saturate(200%);\n  border: 2px dashed $primColor;\n  border-radius: 5px;\n  transition: all ease 300ms;\n\n  .fs-droppable {\n    padding: 2rem 0;\n    transition: all ease 200ms;\n  }\n\n  .fs-loader {\n    background-color: transparent !important;\n  }\n\n  &.fs-drag-enter {\n    border: 2px solid $primColor;\n    background-color: rgba($primColor, 0.2);\n    .fs-droppable {\n      transition: all ease 100ms;\n      transform: scale(0.98);\n    }\n  }\n}\n.btn-back {\n  display: inline-block;\n  padding: 1rem 0;\n  position: sticky;\n  top: 1rem;\n  z-index: 10;\n  font-weight: 600;\n}\n.section-top {\n  margin-bottom: 2rem;\n}\n.section-bottom {\n  margin-top: 2rem;\n}\n.section-loader {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all ease 300ms;\n  background-color: rgba(#fff, 0.9);\n  backdrop-filter: blur(20px);\n}\n\n.loading-panel {\n  display: flex;\n  position: absolute;\n  z-index: 5;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  vertical-align: center;\n  margin: auto auto;\n  background-color: #444466cc;\n}\n\n.thing {\n  display: flex;\n  color: white;\n  padding: 1rem 3rem;\n  margin: auto auto;\n  background-color: #7a7ad4;\n  border-radius: 5px;\n  filter: drop-shadow(0px 3px 8px #222);\n}\n\n.spinner-box {\n  width: 3rem;\n  height: 2.5rem;\n  margin-right: 1rem;\n  z-index: 20;\n  background: url('../../assets/simwrapper-logo/SW_logo_icon_anim.gif');\n  background-size: 4rem;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n</style>\n","<template lang=\"pug\">\n.color-ramp-picker\n  .widgets\n    .widget\n        b-select.selector(expanded v-model=\"dataColumn\")\n          option(label=\"Single color\" value=\"\")\n          optgroup(v-for=\"dataset in datasetChoices()\"\n                  :key=\"dataset\" :label=\"dataset\")\n            option(v-for=\"column in columnsInDataset(dataset)\" :value=\"`${dataset}/${column}`\" :label=\"column\")\n\n  .colorbar.single(v-show=\"!dataColumn\")\n    .single-color(\n      v-for=\"swatch of simpleColors\" :key=\"swatch\"\n      :style=\"{backgroundColor: `${swatch}`}\"\n      :class=\"{active: selectedSingleColor == swatch }\"\n      @click=\"clickedSingleColor(swatch)\")\n\n  .more(v-show=\"dataColumn\")\n    .widgets\n      .widget\n        p Steps\n        b-input(v-model=\"steps\"\n            placeholder=\"Number\"\n            type=\"number\"\n            min=\"2\"\n            max=\"15\")\n\n      .widget\n        p Reverse\n        b-checkbox.hello(v-model=\"flip\")\n\n    .color-ramp(v-for=\"choice of colorChoices\" :key=\"choice.ramp\"\n      @click=\"pickColor(choice)\"\n      :class=\"{active: choice === selectedColor}\"\n    )\n      .colorbar\n        .swatch(\n          v-for=\"swatch,i of buildColors(choice)\" :key=\"i\"\n          :style=\"{backgroundColor: `${swatch}`}\"\n        ): p &nbsp;\n\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport * as d3sc from 'd3-scale-chromatic'\nimport * as d3color from 'd3-color'\n\nimport { VizLayerConfiguration, DataTable, DataType } from '@/Globals'\nimport globalStore from '@/store'\n\nconst d3 = Object.assign({}, d3sc, d3color) as any\n\nenum style {\n  categorical,\n  diverging,\n  sequential,\n}\n\ninterface Ramp {\n  ramp: string\n  style: style\n  reverse?: boolean\n  steps?: number\n}\n\nexport interface ColorDefinition {\n  dataset: string\n  columnName: string\n  colorRamp?: Ramp\n  fixedColors: string[]\n}\n\nexport default defineComponent({\n  name: 'ColorsConfig',\n  props: {\n    vizConfiguration: { type: Object as PropType<VizLayerConfiguration>, required: true },\n    datasets: { type: Object as PropType<{ [id: string]: DataTable }>, required: true },\n  },\n  data: () => {\n    const colorChoices = [\n      { ramp: 'Viridis', style: style.sequential, reverse: true }, // , reverse: true },\n      { ramp: 'Plasma', style: style.sequential, reverse: true }, // , reverse: true },\n      { ramp: 'Blues', style: style.sequential }, // , reverse: true },\n      // { ramp: 'Greens', style: style.sequential }, // , reverse: true },\n      { ramp: 'Purples', style: style.sequential }, // , reverse: true },\n      { ramp: 'Oranges', style: style.sequential }, // , reverse: true },\n      { ramp: 'PRGn', style: style.diverging, reverse: true },\n      { ramp: 'RdBu', style: style.diverging, reverse: true },\n      { ramp: 'Tableau10', style: style.categorical }, // , reverse: true },\n      { ramp: 'Paired', style: style.categorical }, // , reverse: true },\n      // { ramp: 'PuOr', style: style.diverging }, // , reverse: true },\n    ]\n\n    return {\n      colorChoices,\n      globalState: globalStore.state,\n      steps: '9',\n      flip: false,\n      dataColumn: '',\n      selectedColor: colorChoices[0] as Ramp,\n      selectedSingleColor: '',\n      datasetLabels: [] as string[],\n      isFirstDataset: true,\n    }\n  },\n  computed: {\n    simpleColors(): any {\n      return this.buildColors({ ramp: 'Tableau10', style: style.categorical }, 10)\n    },\n  },\n  mounted() {\n    this.selectedSingleColor = this.simpleColors[0]\n    this.datasetLabels = Object.keys(this.vizConfiguration.datasets)\n    this.datasetsAreLoaded()\n  },\n  watch: {\n    vizConfiguration() {\n      this.vizConfigChanged()\n    },\n    datasets() {\n      this.datasetsAreLoaded()\n    },\n    flip() {\n      this.emitColorSpecification()\n    },\n    steps() {\n      this.emitColorSpecification()\n    },\n    dataColumn() {\n      this.emitColorSpecification()\n    },\n    'global.isDarkMode'() {\n      this.emitColorSpecification()\n    },\n  },\n  methods: {\n    vizConfigChanged() {\n      const config = this.vizConfiguration.display?.color\n      if (config?.columnName) {\n        const selectedColumn = `${config.dataset}/${config.columnName}`\n        this.dataColumn = selectedColumn\n        this.datasetLabels = [...this.datasetLabels]\n      }\n    },\n\n    datasetsAreLoaded() {\n      const datasetIds = Object.keys(this.datasets)\n      this.datasetLabels = datasetIds\n\n      // don't change colors if we already set them\n      if (!this.isFirstDataset) return\n\n      if (datasetIds.length) this.isFirstDataset = false\n\n      const { dataset, columnName, colorRamp } = this.vizConfiguration.display.color\n\n      if (dataset && columnName) {\n        // console.log('SPECIFIED COLORS: ', dataset, columnName, colorRamp)\n        this.dataColumn = `${dataset}/${columnName}`\n\n        if (colorRamp) {\n          this.selectedColor =\n            this.colorChoices.find(c => c.ramp.toLowerCase() === colorRamp.ramp.toLowerCase()) ||\n            this.colorChoices[0]\n          this.flip = !!colorRamp.reverse // ? !!this.selectedColor.reverse : !this.selectedColor.reverse // XOR\n          if (colorRamp.steps) this.steps = '' + colorRamp.steps\n        }\n      } else if (datasetIds.length) {\n        const secondColumn = Object.keys(this.datasets[datasetIds[0]])[1]\n        console.log(secondColumn)\n        if (secondColumn) this.dataColumn = `${datasetIds[0]}/${secondColumn}`\n      }\n    },\n\n    emitColorSpecification() {\n      if (!this.dataColumn) return\n\n      const slash = this.dataColumn.indexOf('/')\n\n      if (slash === -1) {\n        this.clickedSingleColor(this.selectedSingleColor)\n        return\n      }\n\n      const dataset = this.dataColumn.substring(0, slash)\n      const columnName = this.dataColumn.substring(slash + 1)\n      const fixedColors = this.buildColors(this.selectedColor, parseInt(this.steps))\n\n      const steps = parseInt(this.steps)\n      const color = {\n        dataset,\n        columnName,\n        fixedColors,\n        colorRamp: {\n          ramp: this.selectedColor.ramp,\n          style: this.selectedColor.style,\n          reverse: this.flip,\n          steps,\n        },\n      }\n\n      setTimeout(() => this.$emit('update', { color }), 50)\n    },\n\n    clickedSingleColor(swatch: string) {\n      this.selectedSingleColor = swatch\n      const color: ColorDefinition = {\n        fixedColors: [this.selectedSingleColor],\n        dataset: '',\n        columnName: '',\n      }\n\n      // the link viewer is on main thread so lets make\n      // sure user gets some visual feedback\n      setTimeout(() => this.$emit('update', { color }), 50)\n    },\n\n    datasetChoices(): string[] {\n      return this.datasetLabels.filter(label => label !== 'csvBase')\n    },\n\n    columnsInDataset(datasetId: string): string[] {\n      const dataset = this.datasets[datasetId]\n      if (!dataset) return []\n      const allColumns = Object.keys(dataset).filter(\n        colName => dataset[colName].type !== DataType.LOOKUP\n      )\n\n      return allColumns\n    },\n\n    pickColor(colorRamp: Ramp) {\n      this.selectedColor = colorRamp\n      this.emitColorSpecification()\n    },\n\n    buildColors(scale: Ramp, count?: number): string[] {\n      let colors = [...this.ramp(scale, count || parseInt(this.steps))]\n\n      // many reasons to flip the colorscale:\n      // (1) the scale preset; (2) the checkbox (3) dark mode\n      let reverse = !!scale.reverse\n      if (this.flip) reverse = !reverse\n      if (reverse) colors = colors.reverse()\n\n      // only flip in dark mode if it's a sequential scale\n      if (scale.style === style.sequential && this.globalState.isDarkMode) {\n        colors = colors.reverse()\n      }\n\n      return colors\n    },\n\n    ramp(scale: Ramp, n: number): string[] {\n      let colors\n      // let dark\n\n      if (scale.style === style.categorical) {\n        const categories = d3[`scheme${scale.ramp}`]\n        return categories.slice(0, n)\n      }\n\n      if (d3[`scheme${scale.ramp}`] && d3[`scheme${scale.ramp}`][n]) {\n        colors = d3[`scheme${scale.ramp}`][n]\n        // dark = d3.lab(colors[0]).l < 50\n      } else {\n        try {\n          const interpolate = d3[`interpolate${scale.ramp}`]\n          colors = []\n          // dark = d3.lab(interpolate(0)).l < 50\n          for (let i = 0; i < n; ++i) {\n            colors.push(d3.rgb(interpolate(i / (n - 1))).hex())\n          }\n        } catch (e) {\n          // some ramps cannot be interpolated, give the\n          // highest one instead.\n          return this.ramp(scale, n - 1)\n        }\n      }\n      return colors\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n.color-ramp-picker {\n  padding-right: 0rem;\n}\n\n.widgets {\n  display: flex;\n  margin-bottom: 0.5rem;\n\n  p {\n    margin-top: 0.25rem;\n    font-size: 1rem;\n    margin-right: 1rem;\n  }\n}\n\n.selector {\n  margin-top: 0.75rem;\n  overflow-x: auto;\n  max-width: 100%;\n}\n\n.widget {\n  flex: 1;\n  margin-right: 0.75rem;\n  display: flex;\n  flex-direction: column;\n}\n\n.hello {\n  margin-top: 0.5rem;\n}\n\n.color-ramp {\n  display: flex;\n  flex-direction: column;\n  padding: 1px 1px;\n  border-radius: 3px;\n  margin-right: 0.75rem;\n  border: 3px solid #00000000;\n}\n\n.color-ramp.active {\n  border: 3px solid #6361dd;\n}\n\n.colorbar {\n  display: flex;\n  flex-direction: row;\n  height: 12px;\n}\n\n.color-ramp:hover {\n  background-color: #99c;\n}\n\n.swatch {\n  flex: 1;\n}\n\n.single {\n  margin-top: 0.75rem;\n  margin-bottom: 0.25rem;\n  height: 18px;\n}\n\n.single-color {\n  margin-right: 1px;\n  width: 18px;\n  border: 3px solid #e2e5f2;\n  border-radius: 2px;\n}\n\n.single-color:hover {\n  border-color: #99c;\n  cursor: pointer;\n}\n.single-color.active {\n  border-color: black;\n}\n</style>\n","<template lang=\"pug\">\n.width-panel\n  .widgets\n    .widget\n        b-select.selector(expanded v-model=\"dataColumn\")\n          option(label=\"None\" value=\"\")\n          optgroup(v-for=\"dataset in datasetChoices\"\n                  :key=\"dataset\" :label=\"dataset\")\n            option(v-for=\"column in numericColumnsInDataset(dataset)\" :value=\"`${dataset}/${column}`\" :label=\"column\")\n\n  .widgets\n    .widget\n      p Scaling\n      b-field\n        b-input(:disabled=\"!dataColumn\" v-model=\"xscaleFactor\" placeholder=\"1.0\")\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\nimport debounce from 'debounce'\n\nimport { VizLayerConfiguration, DataTable, DataType } from '@/Globals'\n\nexport type WidthDefinition = {\n  dataset?: string\n  columnName: string\n  scaleFactor?: number\n}\n\nexport default defineComponent({\n  name: 'WidthConfig',\n  props: {\n    vizConfiguration: { type: Object as PropType<VizLayerConfiguration>, required: true },\n    datasets: { type: Object as PropType<{ [id: string]: DataTable }>, required: true },\n  },\n  data: (self: any) => {\n    const transforms = ['none', 'sqrt', 'pow5']\n\n    return {\n      dataColumn: '',\n      xscaleFactor: '100',\n      selectedTransform: transforms[0],\n      datasetLabels: [] as string[],\n      debounceHandleWidthChanged: debounce(self.emitWidthSpecification, 500),\n    }\n  },\n  mounted() {\n    this.datasetsAreLoaded()\n  },\n  computed: {\n    datasetChoices(): string[] {\n      return this.datasetLabels.filter(label => label !== 'csvBase')\n    },\n  },\n  watch: {\n    vizConfiguration() {\n      this.vizConfigChanged()\n    },\n    datasets() {\n      this.datasetsAreLoaded()\n    },\n    xscaleFactor() {\n      this.debounceHandleWidthChanged()\n    },\n    dataColumn() {\n      this.emitWidthSpecification()\n    },\n  },\n  methods: {\n    vizConfigChanged() {\n      const config = this.vizConfiguration.display?.width\n      if (config?.columnName) {\n        const selectedColumn = `${config.dataset}/${config.columnName}`\n        this.dataColumn = selectedColumn\n        this.datasetLabels = [...this.datasetLabels]\n      }\n    },\n\n    datasetsAreLoaded() {\n      const datasetIds = Object.keys(this.datasets)\n      const { dataset, columnName, scaleFactor } = this.vizConfiguration.display.width\n      if (dataset && columnName) {\n        // console.log('SPECIFIED WIDTH: ', dataset, columnName, scaleFactor)\n        this.dataColumn = `${dataset}/${columnName}`\n        if (!!scaleFactor) this.xscaleFactor = '' + scaleFactor\n      } else if (datasetIds.length) {\n        const secondColumn = Object.keys(this.datasets[datasetIds[0]])[1]\n        if (secondColumn) this.dataColumn = `${datasetIds[0]}/${secondColumn}`\n      }\n      this.datasetLabels = datasetIds\n    },\n\n    emitWidthSpecification() {\n      const slash = this.dataColumn.indexOf('/')\n\n      if (slash === -1) {\n        this.clickedSingle()\n        return\n      }\n\n      const dataset = this.dataColumn.substring(0, slash)\n      const columnName = this.dataColumn.substring(slash + 1)\n\n      const width: WidthDefinition = {\n        dataset,\n        columnName,\n        scaleFactor: parseFloat(this.xscaleFactor),\n      }\n\n      setTimeout(() => this.$emit('update', { width }), 50)\n    },\n\n    clickedSingle() {\n      const width: WidthDefinition = {\n        dataset: '',\n        columnName: '',\n        scaleFactor: parseFloat(this.xscaleFactor),\n      }\n\n      // the link viewer is on main thread so lets make\n      // sure user gets some visual feedback\n      setTimeout(() => this.$emit('update', { width }), 50)\n    },\n\n    numericColumnsInDataset(datasetId: string): string[] {\n      const dataset = this.datasets[datasetId]\n      if (!dataset) return []\n      const allColumns = Object.keys(dataset).filter(\n        // skip first row, it has ID\n        colName => dataset[colName].type !== DataType.LOOKUP\n      )\n      return allColumns\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n.width-panel {\n  padding-right: 0rem;\n}\n\n.widgets {\n  display: flex;\n  margin-bottom: 0.5rem;\n\n  p {\n    margin-top: 5px;\n    font-size: 1rem;\n    margin-right: 1rem;\n  }\n}\n\n.widget {\n  flex: 1;\n  margin-right: 0.75rem;\n}\n\n.selector {\n  margin-top: 0.75rem;\n  overflow-x: auto;\n  max-width: 100%;\n}\n</style>\n","<template lang=\"pug\">\n.color-ramp-picker\n\n  //- DATA COLUMN\n  .widgets\n    .widget\n        p.tight Display\n        b-select.selector(expanded v-model=\"dataColumn\")\n          option(label=\"Single color\" value=\"@\")\n\n          optgroup(v-for=\"dataset in datasetChoices\"\n                    :key=\"dataset\"\n                    :label=\"dataset\"\n          )\n            option(v-for=\"column in columnsInDataset(dataset)\"\n                    :key=\"`${dataset}/${column}`\"\n                    :value=\"`${dataset}/${column}`\"\n                    :label=\"column\"\n            )\n\n  //- JOIN COLUMN\n  .widgets(v-if=\"datasetChoices.length > 1 && dataColumn && dataColumn.length > 1\")\n    .widget\n        p.tight Join by\n        b-select.selector(expanded v-model=\"join\")\n          option(label=\"None\" value=\"\")\n          option(label=\"Row count\" value=\"@count\")\n\n          optgroup(label=\"Join by...\")\n            option(v-for=\"col in columnsInDataset(dataColumn?.slice(0, dataColumn.indexOf('/')) || [])\"\n                    :value=\"col\"\n                    :label=\"col\"\n            )\n\n  //- NORMALIZE COLUMN\n  .widgets(v-if=\"dataColumn && dataColumn.length > 1\")\n    .widget\n        p.tight Normalize by\n        b-select.selector(expanded v-model=\"normalSelection\")\n          option(label=\"None\" value=\"\")\n          optgroup(v-for=\"dataset in datasetChoices\" :key=\"dataset\" :label=\"dataset\")\n            option(v-for=\"column in columnsInDataset(dataset)\"\n              :key=\"`${dataset}/${column}`\"\n              :value=\"`${dataset}:${column}`\"\n              :label=\"column\"\n            )\n\n  //- DIFF MODE\n  .more(:title=\"diffChoices.length<2 ? 'Add two datasets to enable comparisons' : ''\")\n    .widgets\n      .widget(style=\"flex: 3\")\n        p.tight Compare datasets\n        b-select.selector(\n          :disabled=\"!dataColumn || diffChoices.length<2\"\n          expanded\n          v-model=\"diffUISelection\"\n        )\n          option(v-for=\"option in diffChoices\" :label=\"option[0]\" :value=\"option[1]\")\n\n      .widget\n        p %Diff\n        b-checkbox.hello(\n          :disabled=\"!diffUISelection || !dataColumn || diffChoices.length<2\"\n          v-model=\"diffRelative\"\n        )\n\n  //- SIMPLE COLORS\n  .colorbar.single(v-show=\"dataColumn=='@'\")\n    .single-color(\n      v-for=\"swatch of simpleColors\" :key=\"swatch\"\n      :style=\"{backgroundColor: `${swatch}`}\"\n      :class=\"{active: selectedSingleColor == swatch }\"\n      @click=\"clickedSingleColor(swatch)\")\n\n  //- STEPS, REVERSE, COLOR RAMPS\n  .more(v-show=\"dataColumn && dataColumn.length > 1\")\n    .widgets\n      .widget(style=\"flex: 3\")\n        p Steps\n        b-input(v-model=\"steps\"\n            placeholder=\"Number\"\n            type=\"number\"\n            min=\"2\"\n            max=\"15\")\n\n      .widget\n        p Flip\n        b-checkbox.hello(v-model=\"flip\")\n\n    .color-ramp(v-for=\"choice of colorChoices\" :key=\"choice.ramp\"\n      @click=\"pickColor(choice)\"\n      :class=\"{active: choice === selectedColor}\"\n    )\n      .colorbar\n        .swatch(\n          v-for=\"swatch,i of buildColors(choice)\" :key=\"i\"\n          :style=\"{backgroundColor: `${swatch}`}\"\n        ): p &nbsp;\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\nimport { debounce } from 'debounce'\n\nimport globalStore from '@/store'\nimport { VizLayerConfiguration, DataTable, DataType } from '@/Globals'\nimport { Style, Ramp, getColorRampHexCodes } from '@/js/ColorsAndWidths'\n\nexport interface LineColorDefinition {\n  dataset: string\n  columnName: string\n  normalize: string\n  diff?: string\n  diffDatasets?: string[]\n  relative?: boolean\n  join?: string\n  colorRamp?: Ramp\n  fixedColors: string[]\n}\n\nconst ALL_COLOR_RAMPS = [\n  { ramp: 'Viridis', style: Style.sequential, reverse: true }, // , reverse: true },\n  { ramp: 'Plasma', style: Style.sequential, reverse: true }, // , reverse: true },\n  { ramp: 'Blues', style: Style.sequential }, // , reverse: true },\n  { ramp: 'Greens', style: Style.sequential }, // , reverse: true },\n  { ramp: 'Purples', style: Style.sequential }, // , reverse: true },\n  { ramp: 'Oranges', style: Style.sequential }, // , reverse: true },\n  { ramp: 'RdBu', style: Style.diverging, reverse: true },\n  { ramp: 'RdYlBu', style: Style.sequential }, // Not sequential, but otherwise the middle color is replaced\n  { ramp: 'PRGn', style: Style.diverging, reverse: true },\n  { ramp: 'Tableau10', style: Style.categorical }, // , reverse: true },\n  { ramp: 'Paired', style: Style.categorical }, // , reverse: true },\n  // { ramp: 'PuOr', style: Style.diverging }, // , reverse: true },\n]\n\nexport default defineComponent({\n  name: 'LineColorsConfig',\n  props: {\n    vizConfiguration: { type: Object as PropType<VizLayerConfiguration>, required: true },\n    datasets: { type: Object as PropType<{ [id: string]: DataTable }>, required: true },\n  },\n  computed: {\n    simpleColors(): any {\n      return this.buildColors({ ramp: 'Tableau10', style: Style.categorical }, 10)\n    },\n\n    colorChoices() {\n      // if (!this.diffDatasets || this.diffDatasets.length) {\n      //   return ALL_COLOR_RAMPS.filter(ramp => ramp.style == Style.diverging)\n      // }\n      return ALL_COLOR_RAMPS\n    },\n\n    datasetChoices() {\n      return this.datasetLabels.filter(label => label !== 'csvBase').reverse()\n    },\n  },\n\n  data: () => {\n    return {\n      globalState: globalStore.state,\n      dataColumn: '',\n      datasetLabels: [] as string[],\n      diffDatasets: [] as string[],\n      diffRelative: false,\n      diffUISelection: '',\n      diffChoices: [] as any[],\n      emitColorSpecification: {} as any,\n      flip: false,\n      isCurrentlyDiffMode: false,\n      join: '',\n      normalSelection: '',\n      selectedColor: {} as Ramp,\n      selectedSingleColor: '',\n      steps: '9',\n      useHardCodedColors: false,\n    }\n  },\n  mounted() {\n    this.emitColorSpecification = debounce(this.emitColorSpecificationDebounced, 150)\n\n    this.selectedSingleColor = this.simpleColors[0]\n    this.selectedColor = this.colorChoices[0]\n    this.datasetLabels = Object.keys(this.vizConfiguration.datasets)\n    this.datasetsAreLoaded()\n\n    if (this.vizConfiguration.display?.lineColor?.fixedColors) this.useHardCodedColors = true\n\n    this.vizConfigChanged()\n  },\n  watch: {\n    vizConfiguration() {\n      this.vizConfigChanged()\n    },\n    datasets() {\n      this.datasetsAreLoaded()\n    },\n    diffUISelection() {\n      this.diffSelectionChanged()\n    },\n    dataColumn() {\n      this.emitColorSpecification()\n    },\n    join() {\n      this.emitColorSpecification()\n    },\n    diffDatasets() {\n      this.emitColorSpecification()\n    },\n    flip() {\n      this.emitColorSpecification()\n    },\n    'globalState.isDarkMode'() {\n      this.emitColorSpecification()\n    },\n    normalSelection() {\n      this.emitColorSpecification()\n    },\n    selectedColor() {\n      this.emitColorSpecification()\n    },\n    steps() {\n      this.emitColorSpecification()\n    },\n    diffRelative() {\n      this.emitColorSpecification()\n    },\n  },\n  methods: {\n    vizConfigChanged() {\n      const config = this.vizConfiguration.display?.lineColor\n\n      this.setupDiffMode(config)\n\n      if (config?.columnName) {\n        const selectedColumn = this.diffDatasets.length\n          ? `${this.diffDatasets[0]}/${config.columnName}`\n          : `${config.dataset}/${config.columnName}`\n\n        this.dataColumn = selectedColumn\n        this.datasetLabels = [...this.datasetLabels]\n\n        if (config?.normalize) this.normalSelection = config.normalize\n        if (config?.join) this.join = config.join\n\n        if (config.colorRamp) {\n          let colorChoice =\n            this.colorChoices.find((f: Ramp) => f.ramp == config.colorRamp.ramp) ||\n            this.colorChoices[0]\n          this.selectedColor = colorChoice\n          this.steps = config.colorRamp.steps\n          this.flip = !!config.colorRamp.reverse\n        }\n      } else if (config?.fixedColors) {\n        this.clickedSingleColor(config.fixedColors[0])\n      }\n    },\n\n    setupDiffMode(config: LineColorDefinition) {\n      if (!config?.diff) return\n\n      let diffPieces: string[] = []\n\n      if (config.diff.indexOf(' - ') > -1) {\n        diffPieces = config.diff.split(' - ').map(p => p.trim())\n      } else {\n        diffPieces = config.diff.split('-').map(p => p.trim())\n        if (diffPieces.length > 2) throw Error('Ambiguous diff, use \" - \" to separate terms')\n      }\n\n      this.diffDatasets = diffPieces\n      this.diffRelative = !!config.relative\n      this.diffUISelection = `${diffPieces[0]} - ${diffPieces[1]}`\n    },\n    datasetsAreLoaded() {\n      const datasetIds = Object.keys(this.datasets)\n      this.datasetLabels = datasetIds\n      this.updateDiffLabels()\n    },\n    updateDiffLabels() {\n      const choices = []\n\n      choices.push(['No', ''])\n      if (this.datasetLabels.length <= 1) return\n\n      // create all combinations of x-y and y-x\n      const nonShapefileDatasets = this.datasetLabels.slice(1)\n      let combos = nonShapefileDatasets.flatMap((v, i) =>\n        nonShapefileDatasets.slice(i + 1).map(w => v + ' - ' + w)\n      )\n      combos.forEach(combo => choices.push([combo, combo]))\n\n      nonShapefileDatasets.reverse()\n      combos = nonShapefileDatasets.flatMap((v, i) =>\n        nonShapefileDatasets.slice(i + 1).map(w => v + ' - ' + w)\n      )\n      combos.forEach(combo => choices.push([combo, combo]))\n\n      this.diffChoices = choices\n    },\n\n    diffSelectionChanged() {\n      if (this.diffUISelection) {\n        const pieces = this.diffUISelection.split(' - ')\n        this.diffDatasets = pieces\n        // pick a diverging color ramp if we don't have one yet\n        // if (!this.isCurrentlyDiffMode) this.selectedColor = this.colorChoices[0]\n      } else {\n        // pick a nondiverging color ramp if we just turned diffmode off\n        // if (this.isCurrentlyDiffMode) this.selectedColor = ALL_COLOR_RAMPS[0]\n        this.diffDatasets = []\n        this.diffRelative = false\n      }\n      this.isCurrentlyDiffMode = !!this.diffUISelection\n    },\n\n    emitColorSpecificationDebounced() {\n      // no data\n      if (!this.dataColumn) return\n\n      // single color\n      if (this.dataColumn === '@') {\n        this.normalSelection = ''\n        if (!this.selectedSingleColor) this.selectedSingleColor = this.simpleColors[0]\n        this.clickedSingleColor(this.selectedSingleColor)\n        return\n      }\n\n      const slash = this.dataColumn.indexOf('/')\n\n      // based on data\n      const dataset = this.dataColumn.substring(0, slash)\n      const columnName = this.dataColumn.substring(slash + 1)\n      const steps = parseInt(this.steps)\n\n      // Define the actual colors in the ramp.\n      // Use hard-coded colors if they are present (in fixedColors) -- first load only.\n      const fixedColors = this.useHardCodedColors\n        ? this.vizConfiguration.display?.lineColor?.fixedColors.slice()\n        : this.buildColors(this.selectedColor, steps)\n\n      this.useHardCodedColors = false\n\n      const lineColor = {\n        dataset,\n        columnName,\n        join: this.join,\n        fixedColors,\n        normalize: this.normalSelection,\n        colorRamp: {\n          ramp: this.selectedColor.ramp,\n          style: this.selectedColor.style,\n          reverse: this.flip,\n          steps,\n        },\n      } as any\n\n      if (this.diffDatasets.length) lineColor.diffDatasets = this.diffDatasets\n      if (this.diffRelative) lineColor.relative = true\n\n      if (this.vizConfiguration.display?.lineColor?.colorRamp?.breakpoints) {\n        lineColor.colorRamp.breakpoints =\n          this.vizConfiguration.display?.lineColor?.colorRamp?.breakpoints\n      }\n\n      this.$emit('update', { lineColor })\n    },\n\n    clickedSingleColor(swatch: string) {\n      this.selectedSingleColor = swatch\n      const lineColor: LineColorDefinition = {\n        fixedColors: [this.selectedSingleColor],\n        dataset: '',\n        columnName: '',\n        normalize: '',\n      }\n\n      // the viewer is on main thread so lets make\n      // sure user gets some visual feedback\n      this.$emit('update', { lineColor })\n    },\n\n    columnsInDataset(datasetId: string): string[] {\n      const dataset = this.datasets[datasetId]\n      if (!dataset) return []\n      const allColumns = Object.keys(dataset).filter(\n        colName => dataset[colName].type !== DataType.LOOKUP\n      )\n\n      return allColumns\n    },\n\n    pickColor(colorRamp: Ramp) {\n      this.selectedColor = colorRamp\n      this.emitColorSpecification()\n    },\n\n    buildColors(scale: Ramp, count?: number): string[] {\n      let colors = [...getColorRampHexCodes(scale, count || parseInt(this.steps))]\n\n      // many reasons to flip the colorscale:\n      // (1) the scale preset; (2) the checkbox (3) dark mode\n      let reverse = !!scale.reverse\n      if (this.flip) reverse = !reverse\n      if (reverse) colors = colors.reverse()\n\n      // only flip in dark mode if it's a sequential scale\n      if (scale.style === Style.sequential && this.globalState.isDarkMode) {\n        colors = colors.reverse()\n      }\n\n      return colors\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n.color-ramp-picker {\n  padding-right: 0rem;\n}\n\n.widgets {\n  display: flex;\n  margin-bottom: 0.5rem;\n\n  p {\n    margin-top: 0.25rem;\n    font-size: 1rem;\n    margin-right: 1rem;\n  }\n}\n\n.selector {\n  margin-top: 0.75rem;\n  overflow-x: auto;\n  max-width: 100%;\n}\n\n.widget {\n  flex: 1;\n  margin-right: 0.75rem;\n  display: flex;\n  flex-direction: column;\n}\n\n.hello {\n  margin-top: 0.5rem;\n}\n\n.color-ramp {\n  display: flex;\n  flex-direction: column;\n  padding: 1px 1px;\n  border-radius: 3px;\n  margin-right: 0.75rem;\n  border: 2px solid #00000000;\n}\n\n.color-ramp.active {\n  border: 2px solid #6361dd;\n}\n\n.colorbar {\n  display: flex;\n  flex-direction: row;\n  height: 9px;\n}\n\n.color-ramp:hover {\n  background-color: #99c;\n}\n\n.swatch {\n  flex: 1;\n}\n\n.single {\n  margin-top: 0.75rem;\n  margin-bottom: 0.25rem;\n  height: 18px;\n}\n\n.single-color {\n  margin-right: 1px;\n  width: 18px;\n  border: 3px solid #e2e5f2;\n  border-radius: 2px;\n}\n\n.single-color:hover {\n  border-color: #99c;\n  cursor: pointer;\n}\n.single-color.active {\n  border-color: black;\n}\n.tight {\n  margin: 0 0 -10px 1px;\n}\n</style>\n","<template lang=\"pug\">\n.color-ramp-picker\n\n  //- DATA COLUMN\n  .widgets\n    .widget\n        p.tight Display\n        b-select.selector(expanded v-model=\"dataColumn\")\n          option(label=\"Single color\" value=\"@\")\n\n          optgroup(v-for=\"dataset in datasetChoices\"\n                   :key=\"dataset\"\n                   :label=\"dataset\"\n          )\n            option(v-for=\"column in columnsInDataset(dataset)\"\n                   :key=\"`${dataset}/${column}`\"\n                   :value=\"`${dataset}/${column}`\"\n                   :label=\"column\"\n            )\n\n  //- JOIN COLUMN\n  .widgets(v-if=\"datasetChoices.length > 1\")\n    .widget\n        p.tight Join by\n        b-select.selector(expanded v-model=\"join\")\n          option(label=\"None\" value=\"\")\n          option(label=\"Row count\" value=\"@count\")\n\n          optgroup(label=\"Join by...\")\n            option(v-for=\"col in columnsInDataset(dataColumn?.slice(0, dataColumn.indexOf('/')) || [])\"\n                   :value=\"col\"\n                   :label=\"col\"\n            )\n\n  //- NORMALIZE COLUMN\n  .widgets(v-if=\"dataColumn && dataColumn.length > 1\")\n    .widget\n        p.tight Normalize by\n        b-select.selector(expanded v-model=\"normalSelection\")\n          option(label=\"None\" value=\"\")\n          optgroup(v-for=\"dataset in datasetChoices\" :key=\"dataset\" :label=\"dataset\")\n            option(v-for=\"column in columnsInDataset(dataset)\"\n              :key=\"`${dataset}/${column}`\"\n              :value=\"`${dataset}:${column}`\"\n              :label=\"column\"\n            )\n\n  //- DIFF MODE\n  .more(:title=\"diffChoices.length<2 ? 'Add two datasets to enable comparisons' : ''\")\n    .widgets\n      .widget(style=\"flex: 3\")\n        p.tight Compare datasets\n        b-select.selector(\n          :disabled=\"!dataColumn || diffChoices.length<2\"\n          expanded\n          v-model=\"diffUISelection\"\n        )\n          option(v-for=\"option in diffChoices\" :label=\"option[0]\" :value=\"option[1]\")\n\n      .widget\n        p %Diff\n        b-checkbox.hello(\n          :disabled=\"!diffUISelection || !dataColumn || diffChoices.length<2\"\n          v-model=\"diffRelative\"\n        )\n\n  //- SIMPLE COLORS\n  .colorbar.single(v-show=\"dataColumn=='@'\")\n    .single-color(\n      v-for=\"swatch of simpleColors\" :key=\"swatch\"\n      :style=\"{backgroundColor: `${swatch}`}\"\n      :class=\"{active: selectedSingleColor == swatch }\"\n      @click=\"clickedSingleColor(swatch)\")\n\n  //- STEPS, REVERSE, COLOR RAMPS\n  .more(v-show=\"dataColumn && dataColumn.length > 1\")\n    .widgets\n      .widget(style=\"flex: 3\")\n        p Steps\n        b-input(v-model=\"steps\"\n            placeholder=\"Number\"\n            type=\"number\"\n            min=\"2\"\n            max=\"15\")\n\n      .widget\n        p Flip\n        b-checkbox.hello(v-model=\"flip\")\n\n    .color-ramp(v-for=\"choice of colorChoices\" :key=\"choice.ramp\"\n      @click=\"pickColor(choice)\"\n      :class=\"{active: choice === selectedColor}\"\n    )\n      .colorbar\n        .swatch(\n          v-for=\"swatch,i of buildColors(choice)\" :key=\"i\"\n          :style=\"{backgroundColor: `${swatch}`}\"\n        ): p &nbsp;\n\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\nimport { debounce } from 'debounce'\n\nimport globalStore from '@/store'\nimport { VizLayerConfiguration, DataTable, DataType } from '@/Globals'\nimport { Style, Ramp, getColorRampHexCodes } from '@/js/ColorsAndWidths'\n\nexport interface FillColorDefinition {\n  dataset: string\n  columnName: string\n  normalize: string\n  diff?: string\n  diffDatasets?: string[]\n  relative?: boolean\n  join?: string\n  colorRamp?: Ramp\n  fixedColors: string[]\n}\n\nconst ALL_COLOR_RAMPS = [\n  { ramp: 'Viridis', style: Style.sequential, reverse: true }, // , reverse: true },\n  { ramp: 'Plasma', style: Style.sequential, reverse: true }, // , reverse: true },\n  { ramp: 'Blues', style: Style.sequential }, // , reverse: true },\n  { ramp: 'Greens', style: Style.sequential }, // , reverse: true },\n  { ramp: 'Purples', style: Style.sequential }, // , reverse: true },\n  { ramp: 'Oranges', style: Style.sequential }, // , reverse: true },\n  { ramp: 'RdBu', style: Style.diverging, reverse: true },\n  { ramp: 'PRGn', style: Style.diverging, reverse: true },\n  { ramp: 'Tableau10', style: Style.categorical }, // , reverse: true },\n  { ramp: 'Paired', style: Style.categorical }, // , reverse: true },\n  // { ramp: 'PuOr', style: Style.diverging }, // , reverse: true },\n]\n\nexport default defineComponent({\n  name: 'FillColorsConfig',\n  props: {\n    vizConfiguration: { type: Object as PropType<VizLayerConfiguration>, required: true },\n    datasets: { type: Object as PropType<{ [id: string]: DataTable }>, required: true },\n  },\n  computed: {\n    simpleColors(): any {\n      return this.buildColors({ ramp: 'Tableau10', style: Style.categorical }, 10)\n    },\n\n    colorChoices() {\n      // if (!this.diffDatasets || this.diffDatasets.length) {\n      //   return ALL_COLOR_RAMPS.filter(ramp => ramp.style == Style.diverging)\n      // }\n      return ALL_COLOR_RAMPS\n    },\n\n    datasetChoices() {\n      return this.datasetLabels.filter(label => label !== 'csvBase').reverse()\n    },\n  },\n\n  data: () => {\n    return {\n      globalState: globalStore.state,\n      dataColumn: '',\n      datasetLabels: [] as string[],\n      diffDatasets: [] as string[],\n      diffRelative: false,\n      diffUISelection: '',\n      diffChoices: [] as any[],\n      emitColorSpecification: {} as any,\n      flip: false,\n      isCurrentlyDiffMode: false,\n      join: '',\n      normalSelection: '',\n      selectedColor: {} as Ramp,\n      selectedSingleColor: '',\n      steps: '9',\n      useHardCodedColors: false,\n    }\n  },\n  mounted() {\n    this.emitColorSpecification = debounce(this.emitColorSpecificationDebounced, 150)\n\n    this.selectedSingleColor = this.simpleColors[0]\n    this.selectedColor = this.colorChoices[0]\n    this.datasetLabels = Object.keys(this.vizConfiguration.datasets)\n    this.datasetsAreLoaded()\n\n    if (this.vizConfiguration.display?.fill?.fixedColors) this.useHardCodedColors = true\n\n    this.vizConfigChanged()\n  },\n  watch: {\n    vizConfiguration() {\n      this.vizConfigChanged()\n    },\n    datasets() {\n      this.datasetsAreLoaded()\n    },\n    diffUISelection() {\n      this.diffSelectionChanged()\n    },\n    dataColumn() {\n      this.emitColorSpecification()\n    },\n    join() {\n      this.emitColorSpecification()\n    },\n    diffDatasets() {\n      this.emitColorSpecification()\n    },\n    flip() {\n      this.emitColorSpecification()\n    },\n    'globalState.isDarkMode'() {\n      this.emitColorSpecification()\n    },\n    normalSelection() {\n      this.emitColorSpecification()\n    },\n    selectedColor() {\n      this.emitColorSpecification()\n    },\n    steps() {\n      this.emitColorSpecification()\n    },\n    diffRelative() {\n      this.emitColorSpecification()\n    },\n  },\n  methods: {\n    vizConfigChanged() {\n      const config = this.vizConfiguration.display?.fill\n\n      this.setupDiffMode(config)\n\n      if (config?.columnName) {\n        const selectedColumn = this.diffDatasets.length\n          ? `${this.diffDatasets[0]}/${config.columnName}`\n          : `${config.dataset}/${config.columnName}`\n\n        this.dataColumn = selectedColumn\n        this.datasetLabels = [...this.datasetLabels]\n\n        if (config?.normalize) this.normalSelection = config.normalize\n        if (config?.join) this.join = config.join\n\n        if (config.colorRamp) {\n          let colorChoice =\n            this.colorChoices.find((f: Ramp) => f.ramp == config.colorRamp.ramp) ||\n            this.colorChoices[0]\n          this.selectedColor = colorChoice\n          this.steps = config.colorRamp.steps\n          this.flip = !!config.colorRamp.reverse\n        }\n      } else if (config?.fixedColors) {\n        this.clickedSingleColor(config.fixedColors[0])\n      }\n    },\n\n    setupDiffMode(config: FillColorDefinition) {\n      if (!config?.diff) return\n\n      let diffPieces: string[] = []\n\n      if (config.diff.indexOf(' - ') > -1) {\n        diffPieces = config.diff.split(' - ').map(p => p.trim())\n      } else {\n        diffPieces = config.diff.split('-').map(p => p.trim())\n        if (diffPieces.length > 2) throw Error('Ambiguous diff, use \" - \" to separate terms')\n      }\n\n      this.diffDatasets = diffPieces\n      this.diffRelative = !!config.relative\n      this.diffUISelection = `${diffPieces[0]} - ${diffPieces[1]}`\n    },\n    datasetsAreLoaded() {\n      const datasetIds = Object.keys(this.datasets)\n      this.datasetLabels = datasetIds\n      this.updateDiffLabels()\n    },\n    updateDiffLabels() {\n      const choices = []\n\n      choices.push(['No', ''])\n      if (this.datasetLabels.length <= 1) return\n\n      // create all combinations of x-y and y-x\n      const nonShapefileDatasets = this.datasetLabels.slice(1)\n      let combos = nonShapefileDatasets.flatMap((v, i) =>\n        nonShapefileDatasets.slice(i + 1).map(w => v + ' - ' + w)\n      )\n      combos.forEach(combo => choices.push([combo, combo]))\n\n      nonShapefileDatasets.reverse()\n      combos = nonShapefileDatasets.flatMap((v, i) =>\n        nonShapefileDatasets.slice(i + 1).map(w => v + ' - ' + w)\n      )\n      combos.forEach(combo => choices.push([combo, combo]))\n\n      this.diffChoices = choices\n    },\n\n    diffSelectionChanged() {\n      if (this.diffUISelection) {\n        const pieces = this.diffUISelection.split(' - ')\n        this.diffDatasets = pieces\n        // pick a diverging color ramp if we don't have one yet\n        // if (!this.isCurrentlyDiffMode) this.selectedColor = this.colorChoices[0]\n      } else {\n        // pick a nondiverging color ramp if we just turned diffmode off\n        // if (this.isCurrentlyDiffMode) this.selectedColor = ALL_COLOR_RAMPS[0]\n        this.diffDatasets = []\n        this.diffRelative = false\n      }\n      this.isCurrentlyDiffMode = !!this.diffUISelection\n    },\n\n    emitColorSpecificationDebounced() {\n      // no fill\n      if (!this.dataColumn) return\n\n      // single color\n      if (this.dataColumn === '@') {\n        this.normalSelection = ''\n        if (!this.selectedSingleColor) this.selectedSingleColor = this.simpleColors[0]\n        this.clickedSingleColor(this.selectedSingleColor)\n        return\n      }\n\n      const slash = this.dataColumn.indexOf('/')\n\n      // based on data\n      const dataset = this.dataColumn.substring(0, slash)\n      const columnName = this.dataColumn.substring(slash + 1)\n      const steps = parseInt(this.steps)\n\n      // Define the actual colors in the ramp.\n      // Use hard-coded colors if they are present (in fixedColors) -- first load only.\n      const fixedColors = this.useHardCodedColors\n        ? this.vizConfiguration.display?.fill?.fixedColors.slice()\n        : this.buildColors(this.selectedColor, steps)\n\n      this.useHardCodedColors = false\n\n      const fill = {\n        dataset,\n        columnName,\n        join: this.join,\n        fixedColors,\n        normalize: this.normalSelection,\n        colorRamp: {\n          ramp: this.selectedColor.ramp,\n          style: this.selectedColor.style,\n          reverse: this.flip,\n          steps,\n        },\n      } as any\n\n      if (this.diffDatasets.length) fill.diffDatasets = this.diffDatasets\n      if (this.diffRelative) fill.relative = true\n\n      if (this.vizConfiguration.display?.fill?.colorRamp?.breakpoints) {\n        fill.colorRamp.breakpoints = this.vizConfiguration.display?.fill?.colorRamp?.breakpoints\n      }\n\n      this.$emit('update', { fill })\n    },\n\n    clickedSingleColor(swatch: string) {\n      this.selectedSingleColor = swatch\n      const fill: FillColorDefinition = {\n        fixedColors: [this.selectedSingleColor],\n        dataset: '',\n        columnName: '',\n        normalize: '',\n      }\n\n      // the viewer is on main thread so lets make\n      // sure user gets some visual feedback\n      this.$emit('update', { fill })\n    },\n\n    columnsInDataset(datasetId: string): string[] {\n      const dataset = this.datasets[datasetId]\n      if (!dataset) return []\n      const allColumns = Object.keys(dataset).filter(\n        colName => dataset[colName].type !== DataType.LOOKUP\n      )\n\n      return allColumns\n    },\n\n    pickColor(colorRamp: Ramp) {\n      this.selectedColor = colorRamp\n      this.emitColorSpecification()\n    },\n\n    buildColors(scale: Ramp, count?: number): string[] {\n      let colors = [...getColorRampHexCodes(scale, count || parseInt(this.steps))]\n\n      // many reasons to flip the colorscale:\n      // (1) the scale preset; (2) the checkbox (3) dark mode\n      let reverse = !!scale.reverse\n      if (this.flip) reverse = !reverse\n      if (reverse) colors = colors.reverse()\n\n      // only flip in dark mode if it's a sequential scale\n      if (scale.style === Style.sequential && this.globalState.isDarkMode) {\n        colors = colors.reverse()\n      }\n\n      return colors\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n.color-ramp-picker {\n  padding-right: 0rem;\n}\n\n.widgets {\n  display: flex;\n  margin-bottom: 0.5rem;\n\n  p {\n    margin-top: 0.25rem;\n    font-size: 1rem;\n    margin-right: 1rem;\n  }\n}\n\n.selector {\n  margin-top: 0.75rem;\n  overflow-x: auto;\n  max-width: 100%;\n}\n\n.widget {\n  flex: 1;\n  margin-right: 0.75rem;\n  display: flex;\n  flex-direction: column;\n}\n\n.hello {\n  margin-top: 0.5rem;\n}\n\n.color-ramp {\n  display: flex;\n  flex-direction: column;\n  padding: 1px 1px;\n  border-radius: 3px;\n  margin-right: 0.75rem;\n  border: 2px solid #00000000;\n}\n\n.color-ramp.active {\n  border: 2px solid #6361dd;\n}\n\n.colorbar {\n  display: flex;\n  flex-direction: row;\n  height: 9px;\n}\n\n.color-ramp:hover {\n  background-color: #99c;\n}\n\n.swatch {\n  flex: 1;\n}\n\n.single {\n  margin-top: 0.75rem;\n  margin-bottom: 0.25rem;\n  height: 18px;\n}\n\n.single-color {\n  margin-right: 1px;\n  width: 18px;\n  border: 3px solid #e2e5f2;\n  border-radius: 2px;\n}\n\n.single-color:hover {\n  border-color: #99c;\n  cursor: pointer;\n}\n.single-color.active {\n  border-color: black;\n}\n.tight {\n  margin: 0 0 -10px 1px;\n}\n</style>\n","<template lang=\"pug\">\n.height-panel\n\n  //- DATA COLUMN\n  .widgets\n    .widget\n        p.tight Display\n        b-select.selector(expanded v-model=\"dataColumn\")\n          option(label=\"None\" value=\"^\")\n          optgroup(v-for=\"dataset in datasetChoices\"\n                   :key=\"dataset\"\n                   :label=\"dataset\"\n          )\n            option(v-for=\"column in numericColumnsInDataset(dataset)\"\n                   :key=\"`${dataset}/${column}`\"\n                   :value=\"`${dataset}/${column}`\"\n                   :label=\"column\")\n\n  //- JOIN COLUMN\n  .widgets(v-if=\"datasetChoices.length > 1\")\n    .widget\n        p.tight Join by\n        b-select.selector(expanded v-model=\"join\")\n          option(label=\"None\" value=\"\")\n          option(label=\"Row count\" value=\"@count\")\n\n          optgroup(label=\"Join by...\")\n            option(v-for=\"col in columnsInDataset(dataColumn?.slice(0, dataColumn.indexOf('/')) || [])\"\n                   :key=\"col\"\n                   :value=\"col\"\n                   :label=\"col\"\n            )\n\n  //- NORMALIZE COLUMN\n  .widgets(v-if=\"dataColumn && dataColumn.length > 1\")\n    .widget\n        p.tight Normalize by\n        b-select.selector(expanded v-model=\"normalSelection\")\n          option(label=\"None\" value=\"\")\n          optgroup(v-for=\"dataset in datasetChoices\" :key=\"dataset\" :label=\"dataset\")\n            option(v-for=\"column in numericColumnsInDataset(dataset)\"\n                   :key=\"`${dataset}/${column}`\"\n                   :value=\"`${dataset}:${column}`\"\n                   :label=\"column\"\n            )\n\n  //- SCALING\n  .widgets\n    .widget\n      p Scaling\n      b-field\n        b-input(:disabled=\"!dataColumn\" v-model=\"scaleFactor\" placeholder=\"1.0\")\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport { VizLayerConfiguration, DataTable, DataType } from '@/Globals'\nimport { debounce } from 'debounce'\n\nexport type FillHeightDefinition = {\n  dataset?: string\n  columnName?: string\n  join?: string\n  normalize?: string\n  scaleFactor?: number\n}\n\nexport default defineComponent({\n  name: 'FillHeightConfig',\n  props: {\n    vizConfiguration: { type: Object as PropType<VizLayerConfiguration>, required: true },\n    datasets: { type: Object as PropType<{ [id: string]: DataTable }>, required: true },\n  },\n  data: () => {\n    const transforms = ['none', 'sqrt', 'pow5']\n    return {\n      transforms,\n      dataColumn: '',\n      join: '',\n      normalSelection: '',\n      scaleFactor: '1',\n      selectedTransform: transforms[0],\n      datasetLabels: [] as string[],\n      debounceHandleScale: {} as any,\n    }\n  },\n  mounted() {\n    this.datasetLabels = Object.keys(this.vizConfiguration.datasets)\n    this.debounceHandleScale = debounce(this.handleScaleChanged, 500)\n    this.datasetsAreLoaded()\n    this.vizConfigChanged()\n  },\n  watch: {\n    vizConfiguration() {\n      this.vizConfigChanged()\n    },\n    datasets() {\n      this.datasetsAreLoaded()\n    },\n    join() {\n      this.emitSpecification()\n    },\n    scaleFactor() {\n      this.debounceHandleScale()\n    },\n    dataColumn() {\n      this.emitSpecification()\n    },\n    normalSelection() {\n      this.emitSpecification()\n    },\n  },\n  computed: {\n    datasetChoices(): string[] {\n      return this.datasetLabels.filter(label => label !== 'csvBase').reverse()\n    },\n  },\n  methods: {\n    vizConfigChanged() {\n      const config = this.vizConfiguration.display?.fillHeight\n      if (config?.columnName) {\n        this.dataColumn = `${config.dataset}/${config.columnName}`\n        this.datasetLabels = [...this.datasetLabels]\n        this.scaleFactor = config.scaleFactor\n        this.join = config.join\n\n        if (config?.normalize) {\n          this.normalSelection = config.normalize\n        }\n      }\n    },\n\n    datasetsAreLoaded() {\n      const datasetIds = Object.keys(this.datasets)\n      this.datasetLabels = datasetIds\n    },\n\n    handleScaleChanged() {\n      this.emitSpecification()\n    },\n\n    emitSpecification() {\n      // no width? ignore this\n      if (!this.dataColumn) {\n        // this.normalSelection = ''\n        return\n      }\n\n      // set to \"None\"\n      if (this.dataColumn === '^') {\n        this.normalSelection = ''\n\n        const fillHeight: FillHeightDefinition = {\n          dataset: '',\n          columnName: '',\n          join: this.join,\n          normalize: this.normalSelection,\n          scaleFactor: parseFloat(this.scaleFactor),\n        }\n\n        setTimeout(() => this.$emit('update', { fillHeight }), 25)\n\n        return\n      }\n\n      const slash = this.dataColumn.indexOf('/')\n\n      const dataset = this.dataColumn.substring(0, slash)\n      const columnName = this.dataColumn.substring(slash + 1)\n\n      const fillHeight: FillHeightDefinition = {\n        dataset,\n        columnName,\n        join: this.join,\n        normalize: this.normalSelection,\n        scaleFactor: parseFloat(this.scaleFactor),\n      }\n\n      setTimeout(() => this.$emit('update', { fillHeight }), 25)\n    },\n\n    columnsInDataset(datasetId: string): string[] {\n      const dataset = this.datasets[datasetId]\n      if (!dataset) return []\n      const allColumns = Object.keys(dataset).filter(\n        colName => dataset[colName].type !== DataType.LOOKUP\n      )\n\n      return allColumns\n    },\n\n    numericColumnsInDataset(datasetId: string): string[] {\n      const dataset = this.datasets[datasetId]\n      if (!dataset) return []\n\n      const allColumns = Object.keys(dataset).filter(\n        colName => dataset[colName].type !== DataType.LOOKUP\n      )\n\n      return allColumns\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n.height-panel {\n  padding-right: 0rem;\n}\n\n.widgets {\n  display: flex;\n  margin-bottom: 0.5rem;\n\n  p {\n    margin-top: 5px;\n    font-size: 1rem;\n    margin-right: 1rem;\n  }\n}\n\n.widget {\n  flex: 1;\n  margin-right: 0.75rem;\n}\n\n.selector {\n  margin-top: 0.75rem;\n  overflow-x: auto;\n  max-width: 100%;\n}\n\n.tight {\n  margin: 0 0 -10px 1px;\n}\n</style>\n","<template lang=\"pug\">\n.width-panel\n\n  //- DATA COLUMN\n  .widgets\n    .widget\n        p.tight Display\n        b-select.selector(expanded v-model=\"dataColumn\")\n\n          option(label=\"None\" value=\"@0\")\n          option(label=\"1px\" value=\"@1\")\n          option(label=\"2px\" value=\"@2\")\n          option(label=\"3px\" value=\"@3\")\n          option(label=\"5px\" value=\"@5\")\n          option(label=\"8px\" value=\"@8\")\n\n          optgroup(v-for=\"dataset in datasetChoices\"\n                  :key=\"dataset\" :label=\"dataset\")\n            option(v-for=\"column in numericColumnsInDataset(dataset)\"\n                  :key=\"`${dataset}/${column}`\"\n                  :value=\"`${dataset}/${column}`\"\n                  :label=\"column\")\n\n  //- JOIN COLUMN ------------\n  .widgets(v-if=\"datasetChoices.length > 1 && dataColumn && dataColumn.length > 2\")\n    .widget\n        p.tight Join by\n        b-select.selector(expanded v-model=\"join\")\n          option(label=\"None\" value=\"\")\n          option(label=\"Row count\" value=\"@count\")\n\n          optgroup(label=\"Join by...\")\n            option(v-for=\"col in columnsInDataset(dataColumn?.slice(0, dataColumn.indexOf('/')) || [])\"\n                   :key=\"col\"\n                   :value=\"col\"\n                   :label=\"col\"\n            )\n\n  //- SCALING ----------------\n  .widgets(v-if=\"dataColumn && dataColumn.length > 2\")\n    .widget\n      p Scaling\n      b-field\n        b-input(:disabled=\"!dataColumn\" v-model=\"scaleFactor\" placeholder=\"1.0\")\n\n  //- DIFF MODE --------------\n  .more(:title=\"diffChoices.length<2 ? 'Add two datasets to enable comparisons' : ''\")\n    .widgets\n      .widget(style=\"flex: 3\")\n        p.tight Compare datasets\n        b-select.selector(\n          :disabled=\"!dataColumn || diffChoices.length<2\"\n          expanded\n          v-model=\"diffUISelection\"\n        )\n          option(v-for=\"option in diffChoices\" :label=\"option[0]\" :value=\"option[1]\")\n\n      //- .widget\n      //-   p % Diff\n      //-   b-checkbox.hello(\n      //-     :disabled=\"!diffUISelection || !dataColumn || diffChoices.length<2\"\n      //-     v-model=\"diffRelative\"\n      //-   )\n\n  //- .widgets\n  //-   .widget\n  //-     p Transform\n  //-     b-field.has-addons\n  //-       p.control(v-for=\"transform of transforms\" :key=\"transform\")\n  //-         b-button.is-small(\n  //-           :disabled=\"!dataColumn\"\n  //-           :class=\"{'is-warning': dataColumn && transform==selectedTransform}\"\n  //-           @click=\"selectedTransform=transform\"\n  //-           :title=\"dataColumn ? 'Transforms occur after scaling':'Select a data field first'\"\n  //-           ) {{ transform }}\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\nimport debounce from 'debounce'\n\nimport { VizLayerConfiguration, DataTable, DataType } from '@/Globals'\n\nexport type LineWidthDefinition = {\n  dataset?: string\n  columnName?: string\n  scaleFactor?: number\n  diff?: string\n  diffDatasets?: string[]\n  relative?: boolean\n  join?: string\n}\n\nexport default defineComponent({\n  name: 'LineWidthsConfig',\n  props: {\n    vizConfiguration: { type: Object as PropType<VizLayerConfiguration>, required: true },\n    datasets: { type: Object as PropType<{ [id: string]: DataTable }>, required: true },\n  },\n  data: () => {\n    const transforms = ['none', 'sqrt', 'pow5']\n\n    return {\n      dataColumn: '',\n      scaleFactor: '1',\n      join: '',\n      selectedTransform: transforms[0],\n      datasetLabels: [] as string[],\n      diffDatasets: [] as string[],\n      diffRelative: false,\n      diffUISelection: '',\n      diffChoices: [] as any[],\n      isCurrentlyDiffMode: false,\n      debounceHandleScaleChanged: {} as any,\n    }\n  },\n  mounted() {\n    this.debounceHandleScaleChanged = debounce(this.handleScaleChanged, 500)\n    this.datasetsAreLoaded()\n    this.vizConfigChanged()\n  },\n  watch: {\n    vizConfiguration() {\n      this.vizConfigChanged()\n    },\n    dataColumn() {\n      this.emitSpecification()\n    },\n    diffDatasets() {\n      this.emitSpecification()\n    },\n    diffRelative() {\n      this.emitSpecification()\n    },\n    datasets() {\n      this.datasetsAreLoaded()\n    },\n    diffUISelection() {\n      this.diffSelectionChanged()\n    },\n    scaleFactor() {\n      this.debounceHandleScaleChanged()\n    },\n    join() {\n      this.emitSpecification()\n    },\n  },\n  computed: {\n    datasetChoices() {\n      return this.datasetLabels.filter(label => label !== 'csvBase').reverse()\n    },\n  },\n  methods: {\n    vizConfigChanged() {\n      const config = this.vizConfiguration.display?.lineWidth\n      this.setupDiffMode(config)\n\n      if (config?.columnName) {\n        this.dataColumn = this.diffDatasets.length\n          ? `${this.diffDatasets[0]}/${config.columnName}`\n          : `${config.dataset}/${config.columnName}`\n\n        this.datasetLabels = [...this.datasetLabels]\n        this.scaleFactor = config.scaleFactor ?? '1'\n        this.join = config.join\n      } else if (/^@\\d$/.test(config?.dataset)) {\n        // simple numeric width:\n        this.dataColumn = config.dataset\n      }\n    },\n    setupDiffMode(config: LineWidthDefinition) {\n      if (!config?.diff) return\n\n      let diffPieces: string[] = []\n\n      if (config.diff.indexOf(' - ') > -1) {\n        diffPieces = config.diff.split(' - ').map(p => p.trim())\n      } else {\n        diffPieces = config.diff.split('-').map(p => p.trim())\n        if (diffPieces.length > 2) throw Error('Ambiguous diff, use \" - \" to separate terms')\n      }\n\n      this.diffDatasets = diffPieces\n      this.diffRelative = !!config.relative\n      this.diffUISelection = `${diffPieces[0]} - ${diffPieces[1]}`\n    },\n\n    datasetsAreLoaded() {\n      const datasetIds = Object.keys(this.datasets)\n      this.datasetLabels = datasetIds\n      this.updateDiffLabels()\n\n      // const { dataset, columnName, scaleFactor } = this.vizConfiguration.display.width\n      // if (dataset && columnName) {\n      //   console.log('SPECIFIED WIDTH: ', dataset, columnName, scaleFactor)\n      //   this.dataColumn = `${dataset}/${columnName}`\n      //   if (!!scaleFactor) this.xscaleFactor = '' + scaleFactor\n      // } else if (datasetIds.length) {\n      //   const secondColumn = Object.keys(this.datasets[datasetIds[0]])[1]\n      //   if (secondColumn) this.dataColumn = `${datasetIds[0]}/${secondColumn}`\n      // }\n    },\n    updateDiffLabels() {\n      const choices = []\n\n      choices.push(['No', ''])\n      if (this.datasetLabels.length <= 1) return\n\n      // create all combinations of x-y and y-x\n      const nonShapefileDatasets = this.datasetLabels.slice(1)\n      let combos = nonShapefileDatasets.flatMap((v, i) =>\n        nonShapefileDatasets.slice(i + 1).map(w => v + ' - ' + w)\n      )\n      combos.forEach(combo => choices.push([combo, combo]))\n\n      nonShapefileDatasets.reverse()\n      combos = nonShapefileDatasets.flatMap((v, i) =>\n        nonShapefileDatasets.slice(i + 1).map(w => v + ' - ' + w)\n      )\n      combos.forEach(combo => choices.push([combo, combo]))\n\n      this.diffChoices = choices\n    },\n\n    diffSelectionChanged() {\n      if (this.diffUISelection) {\n        const pieces = this.diffUISelection.split(' - ')\n        this.diffDatasets = pieces\n      } else {\n        this.diffDatasets = []\n        this.diffRelative = false\n      }\n      this.isCurrentlyDiffMode = !!this.diffUISelection\n    },\n\n    handleScaleChanged() {\n      this.emitSpecification()\n    },\n\n    emitSpecification() {\n      // no width? ignore this\n      if (!this.dataColumn) return\n\n      const slash = this.dataColumn.indexOf('/')\n\n      if (slash === -1) {\n        this.clickedSingle()\n        return\n      }\n\n      const dataset = this.dataColumn.substring(0, slash)\n      const columnName = this.dataColumn.substring(slash + 1)\n\n      const lineWidth: LineWidthDefinition = {\n        dataset,\n        columnName,\n        join: this.join,\n        scaleFactor: parseFloat(this.scaleFactor),\n      } as any\n\n      if (this.diffDatasets.length) lineWidth.diffDatasets = this.diffDatasets\n      if (this.diffRelative) lineWidth.relative = true\n\n      setTimeout(() => this.$emit('update', { lineWidth }), 50)\n    },\n\n    clickedSingle() {\n      // console.log('SINGLE', this.dataColumn)\n      const lineWidth: LineWidthDefinition = {\n        dataset: '',\n        columnName: '',\n        scaleFactor: parseFloat(this.scaleFactor),\n      }\n\n      const simpleWidth = /^@\\d$/\n      if (simpleWidth.test(this.dataColumn)) {\n        lineWidth.dataset = this.dataColumn\n      }\n\n      // the link viewer is on main thread so lets make\n      // sure user gets some visual feedback\n      setTimeout(() => this.$emit('update', { lineWidth }), 20)\n    },\n\n    columnsInDataset(datasetId: string): string[] {\n      const dataset = this.datasets[datasetId]\n      if (!dataset) return []\n      const allColumns = Object.keys(dataset).filter(\n        colName => dataset[colName].type !== DataType.LOOKUP\n      )\n\n      return allColumns\n    },\n\n    numericColumnsInDataset(datasetId: string): string[] {\n      const dataset = this.datasets[datasetId]\n      if (!dataset) return []\n\n      const allColumns = Object.keys(dataset).filter(\n        colName => dataset[colName].type !== DataType.LOOKUP\n      )\n\n      return allColumns\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n.width-panel {\n  padding-right: 0rem;\n}\n\n.widgets {\n  display: flex;\n  margin-bottom: 0.5rem;\n\n  p {\n    margin-top: 5px;\n    font-size: 1rem;\n    margin-right: 1rem;\n  }\n}\n\n.widget {\n  flex: 1;\n  margin-right: 0.75rem;\n}\n\n.selector {\n  margin-top: 0.75rem;\n  overflow-x: auto;\n  max-width: 100%;\n}\n\n.tight {\n  margin: 0 0 -10px 1px;\n}\n</style>\n","<template lang=\"pug\">\n.layers-panel\n\n  b-button.is-small.is-warning(@click=\"addLayer()\") + Add Layer\n\n  .layer(v-for=\"layer,i in layers\")\n    .delete-button(@click=\"deleteLayer(i)\") x\n\n    .xlabel(style=\"margin-top: 0;\"): b Layer Title\n    b-input(size=\"is-small\" v-model=\"layer.title\" @input=\"updateLayers\")\n\n    .xlabel(:title=\"helpFileText\") File / URL ℹ️\n    .flex-row(style=\"gap: 0.25rem\")\n      b-input.flex1(size=\"is-small\" v-model=\"layer.shapes\" @input=\"updateLayers\")\n      b-button.is-small(title=\"Open file...\" @click=\"openFileDialog(layer)\"): i.fas.fa-folder\n\n    .flex-row(style=\"gap: 0.25rem\")\n      .flex-col.flex1\n        .xlabel Fill Color\n        b-input(size=\"is-small\" v-model=\"layer.fill\" @input=\"updateLayers\")\n      .flex-col.flex1\n        .xlabel Opacity\n        b-input(size=\"is-small\" v-model=\"layer.opacity\" @input=\"updateLayers\")\n\n    .xlabel.flex-row(style=\"gap: 0.25rem\")\n      .flex-col.flex1\n        .t Border Color\n        b-input(size=\"is-small\" v-model=\"layer.borderColor\" @input=\"updateLayers\")\n      .flex-col.flex1\n        .t Border Width\n        b-input(size=\"is-small\" v-model=\"layer.borderWidth\" @input=\"updateLayers\")\n\n    .xlabel Label Column\n    b-input(size=\"is-small\" v-model=\"layer.label\" @input=\"updateLayers\")\n\n    .flex-row\n      b-checkbox.flex1.simple-checkbox(v-model=\"layer.visible\" @input=\"updateLayers\") Visible\n      b-checkbox.flex1.simple-checkbox(v-model=\"layer.onTop\" @input=\"updateLayers\") On top\n\n  //- //- DATA COLUMN\n  //- .widgets\n  //-   .widget\n  //-       p.tight Display\n  //-       b-select.selector(expanded v-model=\"dataColumn\")\n\n  //-         option(label=\"None\" value=\"@0\")\n  //-         option(label=\"1px\" value=\"@1\")\n  //-         option(label=\"2px\" value=\"@2\")\n  //-         option(label=\"3px\" value=\"@3\")\n  //-         option(label=\"5px\" value=\"@5\")\n  //-         option(label=\"8px\" value=\"@8\")\n\n  //-         optgroup(v-for=\"dataset in datasetChoices\"\n  //-                 :key=\"dataset\" :label=\"dataset\")\n  //-           option(v-for=\"column in numericColumnsInDataset(dataset)\"\n  //-                 :key=\"`${dataset}/${column}`\"\n  //-                 :value=\"`${dataset}/${column}`\"\n  //-                 :label=\"column\")\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\nimport debounce from 'debounce'\n\nimport { VizLayerConfiguration, DataTable, DataType } from '@/Globals'\n\nexport type LayerDefinition = {\n  title: string\n  shapes: string\n  fill: string\n  opacity: number\n  borderColor: string\n  borderWidth: number\n  label: string\n  visible: boolean\n  onTop: boolean\n}\n\nexport default defineComponent({\n  name: 'LayersConfig',\n  props: {\n    vizConfiguration: { type: Object as PropType<VizLayerConfiguration>, required: true },\n    subfolder: String,\n  },\n  data: () => {\n    return {\n      helpFileText:\n        'File types supported:\\nURLs, GeoJSON, Shapefiles.\\n\\nNote: The browser \"Open\" dialog does not provide the relative path,\\nso you may need to add the relative folder location here.',\n      rawFileData: {} as { [id: string]: any },\n    }\n  },\n  mounted() {},\n\n  computed: {\n    layers() {\n      const keys = Object.keys(this.vizConfiguration.backgroundLayers)\n      const layers = keys.map(id => {\n        const layer = this.vizConfiguration.backgroundLayers[id]\n        layer.title = id\n        return JSON.parse(JSON.stringify(layer))\n      })\n      return layers\n    },\n  },\n\n  watch: {},\n\n  methods: {\n    async openFileDialog(layer: LayerDefinition) {\n      const result = (await this.loadFile()) as any\n      if (!result.file) return\n\n      layer.shapes = result.file.name\n      alert(\n        `Note: If the selected file is not in the current folder:\\n/${this.subfolder}\\n\\nthen you must manually add the relative path, e.g.\\n../../${result.file.name}.\\n\\nThis is a browser security limitation.`\n      )\n      this.updateLayers()\n    },\n\n    loadFile() {\n      return new Promise((resolve, reject) => {\n        const input = document.createElement('input')\n        input.type = 'file'\n        input.accept = '.geojson, .shp'\n\n        input.onchange = (event: any) => {\n          const file = event.target.files[0]\n          if (file) {\n            const reader = new FileReader()\n            reader.onload = (e: any) => resolve({ file, content: e.target.result })\n            reader.onerror = e => reject(e)\n            reader.readAsArrayBuffer(file)\n          }\n        }\n        input.click()\n      })\n    },\n\n    deleteLayer(i: number) {\n      const title = this.layers[i].title\n      const answer = confirm(`Delete layer \"${title}\"?`)\n      if (answer) {\n        this.layers.splice(i, 1)\n        this.updateLayers()\n      }\n    },\n\n    addLayer() {\n      this.layers.unshift({\n        title: `Layer ${1 + this.layers.length}`,\n        shapes: '',\n        fill: 'Rainbow',\n        opacity: 0.5,\n        borderColor: '#fff',\n        borderWidth: 3,\n        label: '',\n        visible: true,\n        onTop: false,\n      })\n      this.updateLayers()\n    },\n\n    updateLayers() {\n      setTimeout(() => {\n        this.$emit('update', { layers: this.layers })\n      }, 100)\n    },\n\n    getLayer(id: string) {\n      try {\n        return this.vizConfiguration?.backgroundLayers[id]\n      } catch {\n        return undefined\n      }\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.layers-panel {\n  padding-right: 0.25rem;\n  padding-top: 0.75rem;\n}\n\n.layer {\n  margin-top: 0.5rem;\n  margin-right: 0.25rem;\n  padding: 0 0.2rem;\n  background-color: var(--bgCardFrame2);\n  font-size: 0.9rem;\n  border: 1px solid #80808080;\n}\n\n.xlabel {\n  margin-top: 0.5rem;\n}\n\n.delete-button {\n  float: right;\n  opacity: 0.5;\n  text-align: center;\n  padding: 2px 3px;\n  border: 1px solid #00000000;\n  line-height: 12px;\n}\n\n.delete-button:hover {\n  cursor: pointer;\n  opacity: 0.8;\n  border: 1px solid #ff0000aa;\n  border-radius: 3px;\n  background-color: #ff0000ff;\n  color: white;\n}\n\n.delete-button:active {\n  background-color: #ff4444ff;\n  opacity: 1;\n}\n\n.simple-checkbox {\n  margin-top: 0.75rem;\n  margin-bottom: 0.25rem;\n}\n\n.simple-checkbox:hover {\n  color: unset;\n}\n</style>\n","<template lang=\"pug\">\n.width-panel\n  .widgets\n    .widget\n        p.tight Display\n        b-select.selector(expanded v-model=\"dataColumn\")\n          option(label=\"None\" value=\"@\")\n          optgroup(v-for=\"dataset in datasetChoices\"\n                  :key=\"dataset\" :label=\"dataset\")\n            option(v-for=\"column in numericColumnsInDataset(dataset)\"\n                  :value=\"`${dataset}/${column}`\"\n                  :label=\"column\")\n\n  //- JOIN COLUMN ------------\n  .widgets(v-if=\"datasetChoices.length > 1\")\n    .widget\n        p.tight Join by\n        b-select.selector(expanded v-model=\"join\")\n          option(label=\"None\" value=\"\")\n          option(label=\"Row count\" value=\"@count\")\n\n          optgroup(label=\"Join by...\")\n            option(v-for=\"col in columnsInDataset(dataColumn?.slice(0, dataColumn.indexOf('/')) || [])\"\n                   :key=\"col\"\n                   :value=\"col\"\n                   :label=\"col\"\n            )\n\n  .widgets\n    .widget\n      p Scaling\n      b-field\n        b-input(:disabled=\"!dataColumn\" v-model=\"scaleFactor\" placeholder=\"1.0\")\n\n  //- .widgets\n  //-   .widget\n  //-     p Transform\n  //-     b-field.has-addons\n  //-       p.control(v-for=\"transform of transforms\" :key=\"transform\")\n  //-         b-button.is-small(\n  //-           :disabled=\"!dataColumn\"\n  //-           :class=\"{'is-warning': dataColumn && transform==selectedTransform}\"\n  //-           @click=\"selectedTransform=transform\"\n  //-           :title=\"dataColumn ? 'Transforms occur after scaling':'Select a data field first'\"\n  //-           ) {{ transform }}\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\nimport { VizLayerConfiguration, DataTable, DataType } from '@/Globals'\n\nexport type CircleRadiusDefinition = {\n  dataset?: string\n  columnName?: string\n  scaleFactor?: number\n  join?: string\n}\n\nexport default defineComponent({\n  name: 'CircleRadiusConfig',\n  props: {\n    vizConfiguration: { type: Object as PropType<VizLayerConfiguration>, required: true },\n    datasets: { type: Object as PropType<{ [id: string]: DataTable }>, required: true },\n  },\n  data: () => {\n    const transforms = ['none', 'sqrt', 'pow5']\n    return {\n      transforms,\n      dataColumn: '',\n      scaleFactor: '100',\n      selectedTransform: transforms[0],\n      datasetLabels: [] as string[],\n      join: '',\n    }\n  },\n  mounted() {\n    this.datasetsAreLoaded()\n    this.vizConfigChanged()\n  },\n  watch: {\n    vizConfiguration() {\n      this.vizConfigChanged()\n    },\n    datasets() {\n      this.datasetsAreLoaded()\n    },\n    scaleFactor() {\n      this.emitWidthSpecification()\n    },\n    dataColumn() {\n      this.emitWidthSpecification()\n    },\n    join() {\n      this.emitWidthSpecification()\n    },\n  },\n\n  computed: {\n    datasetChoices() {\n      return this.datasetLabels.filter(label => label !== 'csvBase').reverse()\n    },\n  },\n\n  methods: {\n    vizConfigChanged() {\n      const config = this.vizConfiguration.display?.radius\n      if (config?.columnName) {\n        const selectedColumn = `${config.dataset}/${config.columnName}`\n        this.dataColumn = selectedColumn\n        this.datasetLabels = [...this.datasetLabels]\n        this.scaleFactor = config.scaleFactor\n        this.join = config.join ?? ''\n      }\n    },\n\n    datasetsAreLoaded() {\n      const datasetIds = Object.keys(this.datasets)\n      this.datasetLabels = datasetIds\n    },\n\n    emitWidthSpecification() {\n      if (!this.dataColumn) return\n\n      if (this.dataColumn == '@') {\n        const radius = {\n          columnName: '',\n          scaleFactor: parseFloat(this.scaleFactor),\n          join: this.join,\n        }\n        setTimeout(() => this.$emit('update', { radius }), 50)\n        return\n      }\n\n      const slash = this.dataColumn.indexOf('/')\n      const dataset = this.dataColumn.substring(0, slash)\n      const columnName = this.dataColumn.substring(slash + 1)\n\n      const radius: CircleRadiusDefinition = {\n        dataset,\n        columnName,\n        scaleFactor: parseFloat(this.scaleFactor),\n        join: this.join,\n      }\n\n      setTimeout(() => this.$emit('update', { radius }), 50)\n    },\n\n    columnsInDataset(datasetId: string): string[] {\n      const dataset = this.datasets[datasetId]\n      if (!dataset) return []\n      const allColumns = Object.keys(dataset).filter(\n        colName => dataset[colName].type !== DataType.LOOKUP\n      )\n\n      return allColumns\n    },\n\n    numericColumnsInDataset(datasetId: string): string[] {\n      const dataset = this.datasets[datasetId]\n      if (!dataset) return []\n      const allColumns = Object.keys(dataset).filter(\n        colName => dataset[colName].type !== DataType.LOOKUP\n      )\n\n      return allColumns\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n.width-panel {\n  padding-right: 0rem;\n}\n\n.widgets {\n  display: flex;\n  margin-bottom: 0.5rem;\n\n  p {\n    margin-top: 5px;\n    font-size: 1rem;\n    margin-right: 1rem;\n  }\n}\n\n.widget {\n  flex: 1;\n  margin-right: 0.75rem;\n}\n\n.selector {\n  margin-top: 0.75rem;\n  overflow-x: auto;\n  max-width: 100%;\n}\n\n.tight {\n  margin: 0 0 -10px 1px;\n}\n</style>\n","<template lang=\"pug\">\n.width-panel\n  //- .widgets\n  //-   .widget\n  //-     p(style=\"line-height: 1.25rem;\") Select features based on data.\n\n  .widgets(v-show=\"filterIds.length\")\n    .widget\n      h4 Active Filters\n\n      .filter-items\n        .active-filter.filter-details(v-for=\"f in filterIds\" :key=\"f\")\n          p.stretch\n            b {{ filters[f].dataset }}:&nbsp;\n            span(v-if=\"filters[f].operator == OPERATORS[0]\") by&nbsp;\n            | {{ `${filters[f].column}` }}\n            span(v-if=\"filters[f].operator !== OPERATORS[0]\") &nbsp;{{ `${filters[f].operator} ${filters[f].value}`}}\n\n          .span.close-button(@click=\"clickedRemoveFilter(f)\") &times;\n\n  .widgets\n    .widget.boop\n      h4 Add New Filter\n      b-select.tight.selector(expanded v-model=\"addDataColumn\" placeholder=\"Select...\")\n        optgroup(v-for=\"dataset in datasetChoices\"\n                :key=\"dataset\" :label=\"dataset\")\n          option(v-for=\"column in numericColumnsInDataset(dataset)\"\n                :value=\"`${dataset}@${column}`\"\n                :label=\"column\")\n\n      .filter-details2(v-if=\"addDataColumn\")\n        b-select.operator(expanded v-model=\"addOperator\")\n          option(v-for=\"operator in OPERATORS\" :value=\"operator\" :label=\"operator\")\n        b-field(v-if=\"addOperator!==OPERATORS[0]\")\n          b-input(v-model=\"addValue\" placeholder=\"1.0\")\n\n      .button-bar(v-if=\"addDataColumn\")\n        button.button.add-button.is-small.is-inverted(\n          @click=\"clickedCancel\"\n        ) Cancel\n        button.button.add-button.is-small.is-primary(v-if=\"addDataColumn\"\n          :disabled=\"addOperator !== OPERATORS[0] && addValue===''\"\n          @click=\"clickedAddFilter\"\n        ) &nbsp;&nbsp;Add&nbsp;&nbsp;\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport { VizLayerConfiguration, DataTable, DataType } from '@/Globals'\n\nexport type FilterDefinition = {\n  dataset: string\n  column: string\n  operator: string\n  value: string\n}\n\nexport default defineComponent({\n  props: {\n    vizConfiguration: { type: Object as PropType<VizLayerConfiguration>, required: true },\n    datasets: { type: Object as PropType<{ [id: string]: DataTable }>, required: true },\n  },\n  data: () => {\n    const OPERATORS = ['Categories', '==', '!=', '<=', '>=', '<', '>']\n\n    return {\n      OPERATORS,\n      filters: {} as { [id: string]: FilterDefinition },\n      addDataColumn: null as string | null,\n      addOperator: OPERATORS[0],\n      addValue: '',\n      datasetLabels: [] as string[],\n    }\n  },\n  mounted() {\n    this.datasetsAreLoaded()\n    this.vizConfigChanged()\n  },\n  watch: {\n    filters() {\n      this.emitSpecification()\n    },\n    vizConfiguration() {\n      this.vizConfigChanged()\n    },\n    datasets() {\n      this.datasetsAreLoaded()\n    },\n  },\n  computed: {\n    filterIds(): any {\n      return Object.keys(this.filters)\n    },\n    datasetChoices(): any {\n      return this.datasetLabels.filter(label => label !== 'XcsvBase').reverse()\n    },\n  },\n  methods: {\n    eraseFields() {\n      this.addDataColumn = null\n      this.addOperator = this.OPERATORS[0]\n      this.addValue = ''\n    },\n\n    clickedCancel() {\n      this.eraseFields()\n    },\n\n    clickedAddFilter() {\n      let [dataset, column] = this.addDataColumn ? this.addDataColumn.split('@') : ['', '']\n\n      // always call shapefile or network \"shapes\"\n      // console.log(2, dataset, column, this.datasetLabels)\n      if (this.datasetLabels.indexOf(dataset) < 1) dataset = 'shapes'\n\n      // If user selected Categories, make sure value field is blank\n      if (this.addOperator === this.OPERATORS[0]) this.addValue = ''\n\n      const filter: FilterDefinition = {\n        dataset,\n        column,\n        operator: this.addOperator,\n        value: this.addValue,\n      }\n      this.filters[`${dataset}.${column}`] = filter\n      this.filters = Object.assign({}, this.filters)\n\n      this.eraseFields()\n    },\n\n    clickedRemoveFilter(f: string) {\n      delete this.filters[f]\n      this.filters = Object.assign({}, this.filters)\n    },\n\n    vizConfigChanged() {\n      this.filters = {}\n      if (!this.vizConfiguration.filters) return\n\n      // make local copy of filter config\n      let filterConfig = JSON.parse(JSON.stringify(this.vizConfiguration.filters))\n\n      // some users write YAML as objects, others as arrays:\n      if (Array.isArray(filterConfig)) {\n        const entries = {}\n        filterConfig.forEach(item => Object.assign(entries, item))\n        filterConfig = entries\n      }\n\n      for (const key of Object.keys(filterConfig)) {\n        const [dataset, column] = key.split('.')\n        if (column == undefined) {\n          this.$emit('error', `Filter key is not \"dataset.column\": ${key}`)\n          continue\n        }\n\n        const filter: FilterDefinition = {\n          dataset,\n          column,\n          operator: '',\n          value: filterConfig[key],\n        }\n\n        if (filter.value === this.OPERATORS[0]) {\n          filter.column = filter.column.substring(0, filter.column.length - 1)\n          filter.operator = this.OPERATORS[0]\n        }\n\n        if (column.endsWith('!')) {\n          filter.column = filter.column.substring(0, filter.column.length - 1)\n          filter.operator = '!='\n        }\n\n        for (const operator of ['<=', '>=', '<', '>']) {\n          if (typeof filter.value === 'string' && filter.value.startsWith(operator)) {\n            filter.value = filter.value.substring(operator.length).trim()\n            filter.operator = operator\n            break\n          }\n        }\n\n        this.filters[`${filter.dataset}.${filter.column}`] = filter\n      }\n\n      this.datasetLabels = [...this.datasetLabels]\n    },\n\n    datasetsAreLoaded() {\n      const datasetIds = Object.keys(this.datasets)\n      this.datasetLabels = datasetIds\n    },\n\n    emitSpecification() {\n      const f = {} as any\n\n      // convert the filters back to the format used in YAML\n\n      for (const key of Object.keys(this.filters)) {\n        const filter = Object.assign({}, this.filters[key])\n        let id = `${filter.dataset}.${filter.column}`\n        if (filter.operator === '!=') id += '!'\n\n        if (filter.operator === this.OPERATORS[0]) {\n          filter.value = '@categorical'\n        }\n\n        if (filter.operator.startsWith('<') || filter.operator.startsWith('>')) {\n          filter.value = `${filter.operator} ${filter.value}`\n        }\n\n        f[id] = filter.value\n      }\n\n      setTimeout(() => this.$emit('update', { filters: f }), 25)\n    },\n\n    numericColumnsInDataset(datasetId: string): string[] {\n      const dataset = this.datasets[datasetId]\n      if (!dataset) return []\n      const allColumns = Object.keys(dataset).filter(\n        colName => dataset[colName].type !== DataType.LOOKUP\n      )\n\n      return allColumns\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n.width-panel {\n  padding-right: 0rem;\n}\n\n.widgets {\n  display: flex;\n  margin-bottom: 0.5rem;\n\n  p {\n    margin-top: 5px;\n    font-size: 1rem;\n    margin-right: 1rem;\n  }\n}\n\n.widget {\n  flex: 1;\n  margin-right: 0.75rem;\n}\n\n.selector {\n  margin-top: 0.75rem;\n  overflow-x: auto;\n  max-width: 100%;\n}\n\n.tight {\n  margin: 0rem 0 -8px 0px;\n}\n\n.filter-details {\n  display: flex;\n  line-height: 1rem;\n}\n\n.filter-details2 {\n  display: flex;\n  margin-top: 8px;\n}\n\n.filter-details .close-button {\n  border: 1px solid #00000000;\n  padding: 0 4px;\n  visibility: hidden;\n  font-weight: bold;\n  padding: 0 4px 2px 4px;\n  margin-top: 3px;\n  margin-bottom: auto;\n}\n\n.filter-details:hover .close-button {\n  visibility: unset;\n  cursor: pointer;\n  color: #800;\n  border: 1px solid #800;\n  border-radius: 3px;\n  background-color: #ffffffff;\n}\n\n.operator {\n  flex: 1;\n  min-width: 5rem;\n}\n\n.button-bar {\n  display: block;\n  margin-left: auto;\n}\n\n.add-button {\n  margin: 3px 1px 0 auto;\n}\n\n.boop {\n  display: flex;\n  flex-direction: column;\n}\n\n.filter-items {\n  // margin-left: 0.5rem;\n  display: flex;\n  flex-direction: column;\n}\n\n.stretch {\n  flex: 1;\n}\n\nh4 {\n  margin-top: 0.25rem;\n  color: var(--textFancy);\n  font-weight: bold;\n}\n\n.button {\n  margin-left: 2px;\n}\n\n.active-filter {\n}\n</style>\n","<template lang=\"pug\">\n.viz-configurator\n\n  .map-actions\n    button.button.draw-button.is-tiny(\n      v-show=\"!embedded\"\n      title=\"Config\"\n      @click=\"clickedShowHide\"\n      :class=\"{'is-showing': showPanels}\"\n    )\n      i.fa.fa-sliders-h.settings-icon\n\n    button.button.draw-button.is-tiny(\n      title=\"Legend\"\n      @click=\"clickedLegendShowHide\"\n      :class=\"{'is-showing': showLegend}\"\n    )\n      i.fa.fa-info.settings-icon\n\n  .right-panels\n    .configuration-panels(v-show=\"showPanels && !showAddDatasets\")\n      .section-panel\n        .actions\n          b-dropdown(v-model=\"selectedExportAction\"\n            aria-role=\"list\" position=\"is-bottom-left\" :close-on-click=\"true\"\n            @change=\"clickedExport\"\n          )\n              template(#trigger=\"{ active }\")\n                b-button.is-small.is-white.export-button()\n                  i.fa.fa-sm.fa-share\n                  | &nbsp;Export\n              b-dropdown-item(value=\"yaml\" aria-role=\"listitem\") Save YAML config\n              b-dropdown-item(value=\"png\" aria-role=\"listitem\") Take screenshot\n\n          b-button.is-small.is-white.export-button(@click=\"clickedAddData\")\n            i.fa.fa-sm.fa-plus\n            | &nbsp;Add Data\n\n      .section-panel(v-for=\"section in getSections()\" :key=\"section.name\")\n        h1(:class=\"{h1active: section.name === activeSection}\" @click=\"clickedSection(section.name)\") {{ section.name }}\n\n        .symbology-panel(v-show=\"section.name===activeSection\" :class=\"{active: section.name === activeSection}\")\n          component(v-if=\"section.component\"\n            :is=\"section.component\"\n            :vizConfiguration=\"vizConfiguration\"\n            :datasets=\"datasets\"\n            :subfolder=\"subfolder\"\n            @update=\"handleConfigChanged\")\n          p(v-else) To be added\n\n    //- .legend-area\n    //-   legend-box.legend-panel(\n    //-     v-show=\"showLegend\"\n    //-     :legendStore=\"legendStore\"\n    //-   )\n\n  add-datasets-panel(v-if=\"showAddDatasets\"\n    :vizConfiguration=\"vizConfiguration\"\n    :fileSystem=\"fileSystem\"\n    :subfolder=\"subfolder\"\n    @update=\"handleConfigChanged\")\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\nimport YAML from 'yaml'\nimport { startCase } from 'lodash'\n\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\nimport LegendStore from '@/js/LegendStore'\nimport { FilterDefinition } from '@/js/DashboardDataManager'\n\nimport AddDatasetsPanel from './AddDatasets.vue'\nimport ColorPanel from './Colors.vue'\nimport WidthPanel from './Widths.vue'\nimport LegendBox from './LegendBox.vue'\nimport LineColorPanel from './LineColors.vue'\nimport FillColorPanel from './FillColors.vue'\nimport FillHeightPanel from './FillHeight.vue'\nimport LineWidthPanel from './LineWidths.vue'\nimport LayersPanel from './Layers.vue'\nimport CircleRadiusPanel from './CircleRadius.vue'\nimport FiltersPanel from './Filters.vue'\nimport { FileSystemConfig } from '@/Globals'\n\nexport default defineComponent({\n  name: 'VizConfigurator',\n  components: {\n    AddDatasetsPanel,\n    CircleRadiusPanel,\n    ColorPanel,\n    WidthPanel,\n    FillColorPanel,\n    FillHeightPanel,\n    LegendBox,\n    LineColorPanel,\n    LineWidthPanel,\n    FiltersPanel,\n    LayersPanel,\n  },\n\n  props: {\n    vizDetails: { type: Object as any, required: true },\n    datasets: { type: Object as any, required: true },\n    fileSystem: { type: Object as PropType<FileSystemConfig>, required: true },\n    subfolder: { type: String, required: true },\n    yamlConfig: { type: String },\n    legendStore: { type: Object as PropType<LegendStore>, required: true },\n    filterDefinitions: { type: Object, required: true },\n    sections: { type: Array as PropType<string[]> },\n    embedded: Boolean,\n  },\n\n  data: () => {\n    return {\n      showPanels: false,\n      showLegend: true,\n      activeSection: '',\n      showAddDatasets: false,\n      selectedExportAction: '',\n      layer: {\n        general: {\n          type: 'links',\n          dataset: 'network.geojson',\n          columns: {},\n        },\n        display: {\n          lineColor: {},\n          color: {},\n          lineWidth: {},\n          radius: {},\n          fill: {},\n          label: {},\n          fillHeight: {},\n        },\n      },\n    }\n  },\n  mounted() {\n    this.activeSection = this.sections ? this.sections[0] : 'color'\n    if (this.embedded) this.showLegend = true\n  },\n  computed: {\n    vizConfiguration(): any {\n      return {\n        datasets: this.vizDetails.datasets,\n        display: this.vizDetails.display,\n        filters: this.vizDetails.filters,\n        backgroundLayers: this.vizDetails.backgroundLayers || {},\n      }\n    },\n\n    fidgetSections(): any[] {\n      return Object.keys(this.layer.display)\n    },\n  },\n  methods: {\n    getSections() {\n      if (this.sections) {\n        return this.sections.map(section => {\n          const camelCaseName =\n            startCase(section.replaceAll('-', ' ')).replaceAll(' ', '') + 'Panel'\n          return { component: camelCaseName, name: section.replaceAll('-', ' ') }\n        })\n      } else {\n        return [\n          { component: 'ColorPanel', name: 'color' },\n          { component: 'WidthPanel', name: 'width' },\n          // { component: 'FillPanel', name: 'fill' },\n        ]\n      }\n    },\n\n    clickedShowHide() {\n      this.showPanels = !this.showPanels\n    },\n\n    clickedLegendShowHide() {\n      this.$emit('toggleLegend')\n      this.showLegend = !this.showLegend\n    },\n\n    clickedSection(section: string) {\n      if (section === this.activeSection) this.activeSection = ''\n      else this.activeSection = section\n    },\n\n    async handleConfigChanged(props: any) {\n      this.showAddDatasets = false\n      await this.$nextTick()\n      this.$emit('update', props)\n    },\n\n    clickedAddData() {\n      this.showAddDatasets = true\n    },\n\n    async clickedExport() {\n      await this.$nextTick()\n      if (this.selectedExportAction == 'yaml') {\n        this.exportYaml()\n      } else if (this.selectedExportAction == 'png') {\n        this.$emit('screenshot')\n      }\n      this.selectedExportAction = ''\n    },\n\n    exportYaml() {\n      let suggestedFilename = 'viz-viztype-config.yaml'\n      const configFile = this.yamlConfig?.toLocaleLowerCase() || ''\n\n      if (configFile.endsWith('yaml') || configFile.endsWith('yml')) {\n        suggestedFilename = this.yamlConfig || 'viz-viztype-config.yaml'\n      }\n\n      if (configFile.endsWith('shp')) {\n        suggestedFilename = `viz-map-${configFile}.yaml`\n      }\n\n      const filename = prompt('Export filename:', suggestedFilename)\n      if (!filename) return\n\n      // make a copy so we don't screw up the viz when we edit, and also\n      // to put things in a specific order every time:\n      const config = {\n        title: this.vizDetails.title,\n        description: this.vizDetails.description,\n        zoom: Math.round(10 * this.$store.state.viewState.zoom) / 10,\n        pitch: Math.round(this.$store.state.viewState.pitch),\n        bearing: Math.round(this.$store.state.viewState.bearing),\n        center: [\n          Math.round(100 * this.$store.state.viewState.center[0]) / 100,\n          Math.round(100 * this.$store.state.viewState.center[1]) / 100,\n        ],\n        network: this.vizDetails.network || this.vizDetails.geojsonFile,\n        projection: this.vizDetails.projection,\n        showDifferences: this.vizDetails.showDifferences,\n        sampleRate: this.vizDetails.sampleRate,\n        shapes: this.vizDetails.shapes?.file || this.vizDetails.shapes,\n        datasets: { ...this.vizDetails.datasets },\n        display: { ...this.vizDetails.display },\n        filters: {},\n        backgroundLayers: this.vizDetails.backgroundLayers || {},\n      } as any\n\n      // remove bgLayer titles\n      for (const id of Object.keys(config.backgroundLayers)) {\n        const layer = config.backgroundLayers[id]\n        delete layer.title\n        if (layer.label === '') delete layer.label\n      }\n\n      // define shapefile join column, if we have one\n      if (typeof this.vizDetails.shapes === 'object' && this.vizDetails.shapes.join) {\n        config.shapes = { file: config.shapes, join: this.vizDetails.shapes.join }\n      }\n\n      // remove pitch and bearing if they're zero\n      if (!this.$store.state.viewState.bearing) delete config.bearing\n      if (!this.$store.state.viewState.pitch) delete config.pitch\n\n      // remove shapefile itself from list of datasets\n      const shapeFilename =\n        typeof config.shapes === 'string'\n          ? config?.shapes?.substring(1 + config.shapes.lastIndexOf('/'))\n          : config?.shapes?.file?.substring(1 + config.shapes.file.lastIndexOf('/') || 0)\n      if (config.datasets[shapeFilename]) delete config.datasets[shapeFilename]\n\n      // remove blank and false values\n      for (const prop of Object.keys(config)) if (!config[prop]) delete config[prop]\n      if (config.display.color) {\n        delete config.display.color?.colorRamp?.style\n        delete config.display.color?.fixedColors\n      }\n      if (config.display.fill) {\n        if (config.display.fill.colorRamp) {\n          delete config.display.fill.colorRamp?.style\n          delete config.display.fill.fixedColors\n          if (!config.display.fill.colorRamp.reverse) {\n            delete config.display.fill.colorRamp.reverse\n          }\n        } else {\n          delete config.display.fill.filters\n          delete config.display.fill.dataset\n          delete config.display.fill.columnName\n        }\n      }\n      if (config.display.lineColor) {\n        console.log(555, config.display.lineColor)\n        // no-lines: set to false\n        if (\n          config.display.lineColor.fixedColors &&\n          config.display.lineColor.fixedColors[0] === ''\n        ) {\n          config.display.lineColor = false\n        } else {\n          if (config.display.lineColor.colorRamp) {\n            delete config.display.lineColor.colorRamp?.style\n            delete config.display.lineColor.fixedColors\n            if (!config.display.lineColor.colorRamp.reverse) {\n              delete config.display.lineColor.colorRamp.reverse\n            }\n          } else {\n            delete config.display.lineColor.dataset\n            delete config.display.lineColor.columnName\n          }\n        }\n      }\n\n      // diff mode\n      for (const panel of ['fill', 'lineColor', 'lineWidth']) {\n        const section = config.display[panel]\n        if (!section) continue\n\n        if (!section.normalize) delete section.normalize\n        if (!section.relative) delete section.relative\n\n        if (section.diffDatasets) {\n          section.diff = `${section.diffDatasets[0]} - ${section.diffDatasets[1]}`\n          delete section.dataset\n          delete section.diffDatasets\n          // reorder elements\n          const topElements = { diff: section.diff, columnName: section.columnName } as any\n          if (section.relative) topElements.relative = true\n          config.display[panel] = Object.assign(topElements, section)\n        }\n      }\n\n      // clean up datasets filenames & joins\n      if (config.datasets) {\n        for (const [key, filenameOrObject] of Object.entries(config.datasets) as any[]) {\n          if (typeof filenameOrObject.file === 'object') {\n            config.datasets[key].file = filenameOrObject.file?.name || filenameOrObject.file || key\n          }\n          // remove old join statements\n          if (typeof filenameOrObject === 'object') {\n            delete config.datasets[key].join\n            // simplify: if all we have is a filename, convert object to string\n            if (Object.keys(config.datasets[key]).length == 1 && config.datasets[key].file) {\n              config.datasets[key] = config.datasets[key].file\n            }\n          }\n        }\n      }\n\n      // delete empty display sections\n      for (const entries of Object.entries(config.display) as any[]) {\n        // user can disable a section (lines ahem!) by setting it to false\n        if (entries[1] === false) continue\n        if (!Object.keys(entries[1]).length) delete config.display[entries[0]]\n      }\n\n      // filters\n      if (!Object.keys(this.filterDefinitions).length) delete config.filters\n      else {\n        config.filters = Object.assign({}, this.filterDefinitions)\n      }\n\n      const text = YAML.stringify(config, {\n        indent: 4,\n        simpleKeys: true,\n      })\n\n      var element = document.createElement('a')\n      element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text))\n      element.setAttribute('download', filename)\n      element.style.display = 'none'\n      document.body.appendChild(element)\n\n      element.click()\n\n      document.body.removeChild(element)\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.viz-configurator {\n  position: absolute;\n  top: 5px;\n  right: 7px;\n  bottom: 3.5rem;\n  display: flex;\n  flex-direction: row-reverse;\n  pointer-events: none;\n}\n\nh1 {\n  color: var(--link);\n  font-weight: bold;\n  text-transform: uppercase;\n  line-height: 1.6rem;\n  // margin-top: 2px;\n  padding-left: 0.25rem;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n\nh1:hover {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n  cursor: pointer;\n  background-color: #4e7cc588;\n  color: white;\n}\n\n.h1active {\n  background-color: #85aeeb;\n  color: white;\n}\n\n.active {\n  background-color: #e2e5f2;\n  margin-bottom: 0px;\n  border-bottom-left-radius: 5px;\n  border-bottom-right-radius: 3px;\n}\n\n.symbology-panel {\n  border: var(--borderSymbology);\n  color: var(--textBold);\n  background-color: var(--bgCream);\n  padding-left: 0.75rem;\n  padding-bottom: 0.5rem;\n}\n\n.configuration-panels {\n  display: flex;\n  flex-direction: column;\n  background: var(--bgPanel);\n  // padding: 2px 4px 4px 4px;\n  width: 16rem;\n  color: $steelGray;\n  user-select: none;\n  border-radius: 3px;\n  pointer-events: auto;\n  margin: 0 0.5rem 0rem 0;\n  filter: $filterShadow;\n  z-index: 10;\n}\n\n.map-actions {\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  margin: 72px 0px auto 0px;\n  pointer-events: auto;\n  z-index: 5;\n}\n\n.draw-button {\n  // background-color: var(--bgPanel3);\n  padding: 0px 4px;\n  border: var(--borderZoomButtons);\n  // border-radius: 4px;\n  width: 24px;\n  height: 24px;\n  margin-top: 1px;\n}\n\n.draw-button:hover {\n  background-color: #f0f0f0;\n}\n\n.draw-button.is-showing {\n  background-color: #7ba8eb; // var(--linkHover);\n  border-color: #7ba8eb; // var(--linkHover);\n  color: white;\n}\n\n.settings-icon {\n  opacity: 0.75;\n}\n\n.actions {\n  display: flex;\n  flex-direction: row-reverse;\n  padding: 0rem 1px 0rem 0.5rem;\n  background-color: var(--bgBold);\n\n  :hover {\n    cursor: pointer;\n  }\n}\n\n.actions:hover {\n  // background-color: var(--bgPanel2);\n  color: var(--link);\n}\n\n.export-button {\n  background-color: var(--bgBold);\n  margin: 0 0;\n  padding: 0rem 0.4rem;\n  color: var(--link);\n  font-size: 0.8rem;\n  line-height: 1rem;\n  text-transform: uppercase;\n  font-weight: bold;\n}\n\n.export-button:hover {\n  background-color: var(--bgCream4);\n  color: var(--linkHover);\n}\n\n.legend-area {\n  background-color: var(--bgBold);\n  filter: $filterShadow;\n  margin: auto 0.5rem 0 0;\n  opacity: 0.97;\n  overflow: auto;\n  pointer-events: all;\n  user-select: none;\n  z-index: 1;\n}\n\n.legend-panel {\n  background-color: var(--bgBold);\n}\n\n.right-panels {\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  overflow-x: hidden;\n  z-index: 10;\n  pointer-events: all;\n  gap: 2rem;\n}\n\n@media only screen and (max-width: 640px) {\n}\n</style>\n"],"names":["_sfc_main$a","defineComponent","FileSelector","HTTPFileSystem","files","f","file","dataTable","key","pieces","dataset","result","list","buffer","data","comments","name","resolve","reject","thread","DataFetcherWorker","e","err","reader","unzipped","gUnzip","d3","d3sc","d3color","_sfc_main$9","colorChoices","globalStore","config","_a","selectedColumn","datasetIds","columnName","colorRamp","c","secondColumn","slash","fixedColors","steps","color","swatch","label","datasetId","colName","DataType","scale","count","colors","reverse","n","interpolate","_sfc_main$8","self","debounce","scaleFactor","width","ALL_COLOR_RAMPS","Style","_sfc_main$7","_b","colorChoice","diffPieces","p","choices","nonShapefileDatasets","combos","v","w","combo","lineColor","_e","_d","_c","_h","_g","_f","getColorRampHexCodes","_sfc_main$6","fill","_sfc_main$5","transforms","fillHeight","_sfc_main$4","lineWidth","_sfc_main$3","id","layer","input","event","i","title","_sfc_main$2","radius","_sfc_main$1","OPERATORS","column","filter","filterConfig","entries","item","operator","_sfc_main","AddDatasetsPanel","CircleRadiusPanel","ColorPanel","WidthPanel","FillColorPanel","FillHeightPanel","LegendBox","LineColorPanel","LineWidthPanel","FiltersPanel","LayersPanel","section","startCase","props","suggestedFilename","configFile","filename","shapeFilename","prop","_i","_j","panel","topElements","filenameOrObject","_k","text","YAML","element"],"mappings":"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"}