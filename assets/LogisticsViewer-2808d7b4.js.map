{"version":3,"file":"LogisticsViewer-2808d7b4.js","sources":["../../src/plugins/logistics/TourViz.tsx","../../src/plugins/logistics/LogisticsViewer.vue"],"sourcesContent":["import React, { useState, useMemo, useEffect, useRef } from 'react'\nimport { StaticMap } from 'react-map-gl'\nimport { AmbientLight, PointLight, LightingEffect } from '@deck.gl/core'\nimport DeckGL from '@deck.gl/react'\nimport { ArcLayer, ScatterplotLayer, IconLayer, PathLayer, TextLayer } from '@deck.gl/layers'\nimport PathOffsetLayer from '@/layers/PathOffsetLayer'\nimport { PathStyleExtension } from '@deck.gl/extensions'\n\nimport globalStore from '@/store'\nimport { MAPBOX_TOKEN, REACT_VIEW_HANDLES } from '@/Globals'\nimport { formatScalarComplex } from '../matrix/local/vis-utils'\n\n// -------------------------------------------------------------\n// Tour viz has several layers, top to bottom:\n//\n// - shipments (arc layer, orig->destination)\n// - destination text on top of circles\n// - destination circles\n// - delivery legs (path layer, each leg is its own path)\n// - shipment link (dashed line on stopActivity link itself)\n\ninterface Shipment {\n  $id: string\n  fromX: number\n  fromY: number\n  toX: number\n  toY: number\n}\n\ninterface lspShipmentChain {\n  chainId: string\n  from: number\n  hubs: []\n  isDirectChain: boolean\n  shipmentId: string\n  toX: number\n  toY: number\n  fromX: number\n  fromY: number\n  route: []\n  color: number\n  hubsChains: any[]\n  directChains: any[]\n}\n\nconst ActivityColor = {\n  pickup: [0, 150, 255],\n  delivery: [240, 0, 60],\n  service: [255, 64, 255],\n}\n\nvar totalShipments = 0\n\n\nexport default function Component(props: {\n  activeTab: string\n  shipments: Shipment[]\n  lspShipmentChains: lspShipmentChain[]\n  carrierTours: lspShipmentChain[]\n  legs: any[]\n  carrierServices: {}\n  showHub: boolean\n  hubLocation: any[]\n  hubName: string\n  stopActivities: any[]\n  depots: { link: string; midpoint: number[]; coords: number[] }[]\n  colors: any\n  center: [number, number]\n  onClick: any\n  viewId: number\n  settings: any\n  dark: boolean\n  numSelectedTours: number\n  projection: string\n}) {\n\n  const [viewState, setViewState] = useState(globalStore.state.viewState)\n  const [hoverInfo, setHoverInfo] = useState({} as any)\n  const [pickupsAndDeliveries, setPickupsAndDeliveries] = useState({\n    type: 'activity',\n    pickups: [] as any[],\n    deliveries: [] as any[],\n  })\n\n  var {\n    dark,\n    activeTab,\n    numSelectedTours,\n    lspShipmentChains,\n    shipments,\n    depots,\n    legs,\n    settings,\n    stopActivities,\n    center,\n    onClick,\n    projection,\n  } = props\n\n\n  const { simplifyTours, scaleFactor, shipmentDotsOnTourMap, showEachCarrierTour } = settings\n\n  // range is (1/) 16384 - 0.000001\n  // scaleFactor is 0-100, which we invert and shift to [14 to -6], then 2^value is widthScale.\n  let widthScale = scaleFactor == 0 ? 1e-6 : 1 / Math.pow(2, (100 - scaleFactor) / 5 - 6.0)\n\n  var [layers, setLayers] = useState<any[]>([]);\n  const prevHubChains = useRef(lspShipmentChains)\n\n  // register setViewState in global view updater\n  // so we can respond to external map motion\n  REACT_VIEW_HANDLES[props.viewId] = () => {\n    setViewState(globalStore.state.viewState)\n  }\n\n  // useEffect(() => {\n  //   formerTab = activeTab\n  // }, [props.activeTab])\n\n  // update pickups and deliveries only when shipments change ----------------------\n  useEffect(() => {\n    const pickups: { [xy: string]: { type: string; coord: number[]; shipmentIds: string[] } } = {}\n    const deliveries: { [xy: string]: { type: string; coord: number[]; shipmentIds: string[] } } =\n      {}\n\n    shipments.forEach(shipment => {\n      let xy = `${shipment.fromX}-${shipment.fromY}`\n      if (!pickups[xy])\n        pickups[xy] = { type: 'pickup', shipmentIds: [], coord: [shipment.fromX, shipment.fromY] }\n      pickups[xy].shipmentIds.push(shipment.$id)\n\n      xy = `${shipment.toX}-${shipment.toY}`\n      if (!deliveries[xy])\n        deliveries[xy] = { type: 'delivery', shipmentIds: [], coord: [shipment.toX, shipment.toY] }\n      deliveries[xy].shipmentIds.push(shipment.$id)\n    })\n\n    setPickupsAndDeliveries({\n      type: 'activity',\n      pickups: Object.values(pickups),\n      deliveries: Object.values(deliveries),\n    })\n  }, [shipments])\n\n  function handleClick(event: any) {\n    if (!event.object) {\n      // no object: send null as message that blank area was clicked\n      onClick(null)\n    } else {\n      onClick(event.object)\n    }\n  }\n\n  function handleViewState(view: any) {\n    setViewState(view)\n    view.center = [view.longitude, view.latitude]\n    globalStore.commit('setMapCamera', view)\n  }\n\n  function renderTooltip(hoverInfo: any) {\n\n    const { object } = hoverInfo\n    if (!object) return null\n\n    if (object?.type == 'pickup') return renderActivityTooltip(hoverInfo, 'pickup')\n    if (object?.type == 'delivery') return renderActivityTooltip(hoverInfo, 'delivery')\n    if (object?.type == 'leg') return renderTourTooltip(hoverInfo)\n    if (object?.color) return renderLegTooltip(hoverInfo)\n    if (object?.label == 'Depot') return renderHubInfo(hoverInfo)\n    return renderStopTooltip(hoverInfo)\n  }\n\n  function renderActivityTooltip(hoverInfo: any, activity: string) {\n    // console.log(hoverInfo)\n    const { object, x, y } = hoverInfo\n    return (\n      <div\n        className=\"tooltip\"\n        style={{\n          backgroundColor: '#334455ee',\n          boxShadow: '2.5px 2px 4px rgba(0,0,0,0.25)',\n          color: '#eee',\n          padding: '0.5rem 0.5rem',\n          position: 'absolute',\n          opacity: 0.9,\n          left: x + 20,\n          top: y + 20,\n        }}\n      >\n        <table style={{ maxWidth: '30rem', fontSize: '0.8rem' }}>\n          <tbody>\n            <tr>\n              <td style={{ textAlign: 'right', paddingRight: '0.5rem', paddingTop: '0.2rem' }}>\n                {activity}:\n              </td>\n              <td style={{ paddingTop: '0.2rem' }}>{object.shipmentIds.join(', ')}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n\n  function renderLegTooltip(hoverInfo: any) {\n\n    const { object, x, y } = hoverInfo\n\n    if (hoverInfo.layer.id == \"HubChain\") {\n\n      return (\n        <div\n          className=\"tooltip\"\n          style={{\n            fontSize: '0.8rem',\n            backgroundColor: '#334455ee',\n            boxShadow: '2.5px 2px 4px rgba(0,0,0,0.25)',\n            color: '#eee',\n            padding: '0.5rem 0.5rem',\n            position: 'absolute',\n            left: x + 20,\n            top: y - 30,\n          }}\n        >\n          Total Shipment Count: {totalShipments} <br />\n          Chain Type: {object?.chainId} <br />\n        </div>\n      )\n    } else {\n\n      return (\n\n        <div\n          className=\"tooltip\"\n          style={{\n            fontSize: '0.8rem',\n            backgroundColor: '#334455ee',\n            boxShadow: '2.5px 2px 4px rgba(0,0,0,0.25)',\n            color: '#eee',\n            padding: '0.5rem 0.5rem',\n            position: 'absolute',\n            left: x + 20,\n            top: y - 30,\n          }}\n        >\n          Shipment Id: {object.shipmentId} <br />\n\n        </div>\n      )\n    }\n\n  }\n\n  function renderTourTooltip(hoverInfo: any) {\n\n    const { object, x, y } = hoverInfo\n\n    return (\n      <div\n        className=\"tooltip\"\n        style={{\n          fontSize: '0.8rem',\n          backgroundColor: '#334455ee',\n          boxShadow: '2.5px 2px 4px rgba(0,0,0,0.25)',\n          color: '#eee',\n          padding: '0.5rem 0.5rem',\n          position: 'absolute',\n          left: x + 20,\n          top: y - 30,\n        }}\n      >\n        Vehicle Id: {object?.tour.vehicleId} <br />\n        Tour Id: {object?.tour.tourId} <br />\n      </div>\n    )\n  }\n\n  function renderHubInfo(hoverInfo: any) {\n\n\n  }\n\n\n\n  function renderStopTooltip(hoverInfo: any) {\n    const { object, x, y } = hoverInfo\n\n    // collect some info\n    const visits = object.visits.length\n    const pickups = object.visits.reduce(\n      (prev: number, visit: any) => prev + visit.pickup.length,\n      0\n    )\n    const deliveries = object.visits.reduce(\n      (prev: number, visit: any) => prev + visit.delivery.length,\n      0\n    )\n\n    const services = object.visits.reduce(\n      (prev: number, visit: any) => prev + visit.service.length,\n      0\n    )\n\n    const numPickupsAndDeliveries = pickups + deliveries\n    const overview = { visits, pickups, deliveries, services } as any\n\n    // delivery stop has complicated position stuff\n    const tipHeight = Object.keys(object).length * 20 + 32 // good guess\n    let yPosition = y - 30\n    if (yPosition + tipHeight > window.innerHeight) {\n      yPosition = y - tipHeight\n    }\n\n    return (\n      <div\n        className=\"tooltip\"\n        style={{\n          fontSize: '0.7rem',\n          backgroundColor: '#334455ee',\n          boxShadow: '2.5px 2px 4px rgba(0,0,0,0.25)',\n          color: '#eee',\n          padding: '0.5rem 0.5rem',\n          position: 'absolute',\n          left: x + 20,\n          top: yPosition,\n        }}\n      >\n        <table\n          style={{\n            fontSize: '0.8rem',\n          }}\n        >\n          <tbody>\n            {Object.keys(overview).map((a: any) => {\n              return (\n                <tr key={a}>\n                  <td style={{ textAlign: 'right', paddingRight: '0.5rem' }}>{a}:</td>\n                  <td style={{ fontWeight: 'bold' }}> {overview[a]}</td>\n                </tr>\n              )\n            })}\n\n            {numPickupsAndDeliveries == 1 &&\n              Object.keys(object.details).map((a: any) => {\n                return (\n                  <tr key={a}>\n                    <td\n                      style={{ textAlign: 'right', paddingRight: '0.5rem', paddingTop: '0.2rem' }}\n                    >\n                      {a.slice(1)}:\n                    </td>\n                    <td style={{ paddingTop: '0.2rem' }}>{object.details[a]}</td>\n                  </tr>\n                )\n              })}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  console.log(props.carrierServices)\n\n  if (activeTab == 'lspTours') {\n\n    layers = []\n\n    const opacity = shipments.length > 1 ? 32 : 255\n\n    function getLspTourColor(vehicleId: string) {\n      // Simple hash function to generate a number from the string\n      let hash = 0;\n      for (let i = 0; i < vehicleId.length; i++) {\n        hash = vehicleId.charCodeAt(i) + ((hash << 5) - hash);\n      }\n\n      // Generate RGB values by mapping parts of the hash to the 0-255 range\n      const r = (hash & 0xFF0000) >> 16;\n      const g = (hash & 0x00FF00) >> 8;\n      const b = hash & 0x0000FF;\n\n      return [r, g, b];\n    }\n\n    function getCarrierToursColors(leg: any) {\n      // Simple hash function to generate a number from the string\n      let hash = 0;\n      for (let i = 0; i < leg.tour.tourId.length; i++) {\n        hash = leg.tour.tourId.charCodeAt(i) + ((hash << 5) - hash);\n      }\n\n      hash *= leg.tour.tourNumber\n      // Use the hash to generate a hue value (0 - 360)\n      const hue = (hash % 360 + 360) % 360; // Ensures hue is positive\n\n      // Use fixed saturation and lightness to keep the colors vivid and distinct\n      const saturation = 70;  // Percentage (70%)\n      const lightness = 50;   // Percentage (50%)\n\n      // Convert HSL to RGB for use in most systems\n      return hslToRgb(hue, saturation, lightness);\n\n    }\n\n    // Helper function to convert HSL to RGB\n    function hslToRgb(h: number, s: number, l: number) {\n      s /= 100;\n      l /= 100;\n\n      const k = (n: any) => (n + h / 30) % 12;\n      const a = s * Math.min(l, 1 - l);\n      const f = (n: any) => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));\n\n      return [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n    }\n    if (props.showHub === true && props.hubLocation.length > 0) {\n\n      layers.push(\n        //@ts-ignore:\n        new TextLayer({\n          id: 'pickupsHubChain',\n          data: props.hubLocation,\n          getPosition: [props.hubLocation[0], props.hubLocation[1]],\n          getText: () => props.hubName,\n          getRadius: 2,\n          opacity: 0.9,\n          background: true,\n          backgroundPadding: numSelectedTours !== 1 ? [2, 1, 2, 1] : [3, 2, 3, 1],\n          getBackgroundColor: () => [240, 130, 0],\n          getColor: [255, 255, 255],\n          parameters: { depthTest: false },\n          pickable: true,\n          radiusUnits: 'pixels',\n          getSize: (d: any) => 11,\n          getTextAnchor: 'middle',\n          getAlignmentBaseline: 'center',\n          noAlloc: false,\n          billboard: true,\n          sizeScale: 1,\n          autoHighlight: true,\n          onHover: setHoverInfo,\n        })\n      )\n    } else {\n\n      layers.push(\n        //@ts-ignore:\n        new PathLayer({\n          id: 'shipmentLocationDashedLine',\n          data: stopActivities,\n          getPath: (d: any) => [d.ptFrom, d.ptTo],\n          getColor: [128, 128, 128],\n          getOffset: 2, // 2: RIGHT-SIDE TRAFFIC\n          opacity: 1,\n          widthMinPixels: 3,\n          rounded: true,\n          shadowEnabled: false,\n          pickable: false,\n          autoHighlight: false,\n          highlightColor: [255, 255, 255],\n          parameters: { depthTest: false },\n          getDashArray: [3, 2],\n          dashJustified: true,\n          extensions: [new PathStyleExtension({ dash: true })],\n        })\n      )\n\n      if (!showEachCarrierTour && simplifyTours) {\n        layers.push(\n          //@ts-ignore:\n          new ArcLayer({\n            id: 'leg-arcs',\n            data: legs,\n            getSourcePosition: (d: any) => d.points[0],\n            getTargetPosition: (d: any) => d.points[d.points.length - 1],\n            getSourceColor: (d: any) => getLspTourColor(d.tour.vehicleId),\n            getTargetColor: (d: any) => getLspTourColor(d.tour.vehicleId),\n            getWidth: scaleFactor ? (d: any) => d.totalSize / 2 : 3,\n            getHeight: 0.5,\n            widthMinPixels: 2,\n            widthMaxPixels: 200,\n            widthUnits: 'pixels',\n            widthScale: widthScale,\n            opacity: 0.9,\n            parameters: { depthTest: false },\n            updateTriggers: { getWidth: [scaleFactor] },\n            transitions: { getWidth: 150 },\n            pickable: true,\n            autoHighlight: true,\n            highlightColor: [255, 255, 255], // [64, 255, 64],\n            onHover: setHoverInfo,\n          })\n        )\n      } else if (showEachCarrierTour && !simplifyTours) {\n        layers.push(\n          //@ts-ignore:\n          new PathLayer({\n            id: 'deliveryroutes2',\n            data: legs,\n            getPath: (d: any) => d.points,\n            getColor: (d: any) => getCarrierToursColors(d),\n            getWidth: scaleFactor ? (d: any) => d.totalSize : 3,\n            getOffset: 2, // 2: RIGHT-SIDE TRAFFIC\n            opacity: 1,\n            widthMinPixels: 3,\n            widthMaxPixels: 200,\n            widthUnits: 'pixels',\n            widthScale: widthScale,\n            rounded: true,\n            shadowEnabled: false,\n            pickable: true,\n            autoHighlight: true,\n            highlightColor: [255, 255, 255], // [64, 255, 64],\n            onHover: setHoverInfo,\n            parameters: { depthTest: false },\n            updateTriggers: { getWidth: [scaleFactor] },\n            transitions: { getWidth: 150 },\n          })\n        )\n      } else if (simplifyTours && showEachCarrierTour) {\n        layers.push(\n          //@ts-ignore:\n          new ArcLayer({\n            id: 'leg-arcs',\n            data: legs,\n            getSourcePosition: (d: any) => d.points[0],\n            getTargetPosition: (d: any) => d.points[d.points.length - 1],\n            getSourceColor: (d: any) => getCarrierToursColors(d),\n            getTargetColor: (d: any) => getCarrierToursColors(d),\n            getWidth: scaleFactor ? (d: any) => d.totalSize / 2 : 3,\n            getHeight: 0.5,\n            widthMinPixels: 2,\n            widthMaxPixels: 200,\n            widthUnits: 'pixels',\n            widthScale: widthScale,\n            opacity: 0.9,\n            parameters: { depthTest: false },\n            updateTriggers: { getWidth: [scaleFactor] },\n            transitions: { getWidth: 150 },\n            pickable: true,\n            autoHighlight: true,\n            highlightColor: [255, 255, 255], // [64, 255, 64],\n            onHover: setHoverInfo,\n          })\n        )\n      } else {\n        layers.push(\n          //@ts-ignore:\n          new PathLayer({\n            id: 'deliveryroutes1',\n            data: legs,\n            getPath: (d: any) => d.points,\n            getColor: (d: any) => getLspTourColor(d.tour.vehicleId),\n            getWidth: scaleFactor ? (d: any) => d.totalSize : 3,\n            getOffset: 2, // 2: RIGHT-SIDE TRAFFIC\n            opacity: 1,\n            widthMinPixels: 3,\n            widthMaxPixels: 200,\n            widthUnits: 'pixels',\n            widthScale: widthScale,\n            rounded: true,\n            shadowEnabled: false,\n            pickable: true,\n            autoHighlight: true,\n            highlightColor: [255, 255, 255], // [64, 255, 64],\n            onHover: setHoverInfo,\n            parameters: { depthTest: false },\n            updateTriggers: { getWidth: [scaleFactor] },\n            transitions: { getWidth: 150 },\n          })\n        )\n      }\n\n      // destination labels\n\n\n      layers.push(\n        //@ts-ignore\n        new TextLayer({\n          id: 'dest-labels',\n          data: stopActivities,\n          background: true,\n          backgroundPadding: numSelectedTours !== 1 ? [2, 1, 2, 1] : [3, 2, 3, 1],\n          getColor: [255, 255, 255],\n          getBackgroundColor: (d: any) => {\n            const pickups = d.visits.reduce(\n              (prev: number, visit: any) => prev + visit.pickup.length,\n              0\n            )\n            const deliveries = d.visits.reduce(\n              (prev: number, visit: any) => prev + visit.delivery.length,\n              0\n            )\n            const services = d.visits.reduce(\n              (prev: number, visit: any) => prev + visit.service.length,\n              0\n            )\n            if (pickups && deliveries) return [0, 0, 255]\n            if (pickups) return ActivityColor.pickup\n            if (deliveries) return ActivityColor.delivery\n            if (services) return ActivityColor.delivery\n            return [240, 130, 0]\n          },\n          getPosition: (d: any) => d.midpoint,\n          getText: (d: any) =>\n            d.label == 'Hub' ? d.label : numSelectedTours !== 1 ? ' ' : `${d.label}`,\n          getSize: (d: any) => (d.label == 'Hub' ? 11 : numSelectedTours !== 1 ? 4 : 11),\n          getTextAnchor: 'middle',\n          getAlignmentBaseline: 'center',\n          opacity: 1,\n          noAlloc: false,\n          billboard: true,\n          sizeScale: 1,\n          pickable: true,\n          autoHighlight: true,\n          highlightColor: [255, 255, 255],\n          onHover: setHoverInfo,\n          visible: shipmentDotsOnTourMap,\n        })\n      )\n\n    }\n  }\n\n  // shipment panel\n  if (activeTab == 'shipments') {\n\n    if (props.showHub && props.hubLocation.length > 0) {\n      layers.push(\n        //@ts-ignore:\n        new TextLayer({\n          id: 'shipmentHubs',\n          data: props.hubLocation,\n          getPosition: [props.hubLocation[0], props.hubLocation[1]],\n          getText: () => props.hubName,\n          getRadius: 2,\n          opacity: 0.9,\n          background: true,\n          backgroundPadding: numSelectedTours !== 1 ? [2, 1, 2, 1] : [3, 2, 3, 1],\n          getBackgroundColor: () => [240, 130, 0],\n          getColor: [255, 255, 255],\n          parameters: { depthTest: false },\n          pickable: true,\n          radiusUnits: 'pixels',\n          getSize: (d: any) => 11,\n          getTextAnchor: 'middle',\n          getAlignmentBaseline: 'center',\n          noAlloc: false,\n          billboard: true,\n          sizeScale: 1,\n          autoHighlight: true,\n          onHover: setHoverInfo,\n        })\n      )\n    } else {\n      layers.push(\n        //@ts-ignore:\n        new ScatterplotLayer({\n          id: 'deliveries',\n          data: pickupsAndDeliveries.deliveries,\n          getPosition: (d: any) => d.coord,\n          getColor: ActivityColor.delivery,\n          getRadius: 3,\n          opacity: 0.9,\n          parameters: { depthTest: false },\n          pickable: true,\n          radiusUnits: 'pixels',\n          onHover: setHoverInfo,\n        })\n      )\n      layers.push(\n        //@ts-ignore:\n        new ScatterplotLayer({\n          id: 'pickups',\n          data: pickupsAndDeliveries.pickups,\n          getPosition: (d: any) => d.coord,\n          getColor: ActivityColor.pickup,\n          getRadius: 2,\n          opacity: 0.9,\n          parameters: { depthTest: false },\n          pickable: true,\n          radiusUnits: 'pixels',\n          onHover: setHoverInfo,\n        })\n      )\n\n      const opacity = shipments.length > 1 ? 32 : 255\n\n      layers.push(\n        //@ts-ignore:\n        new ArcLayer({\n          id: 'shipments',\n          data: shipments,\n          getSourcePosition: (d: any) => [d.fromX, d.fromY],\n          getTargetPosition: (d: any) => [d.toX, d.toY],\n          getSourceColor: [0, 228, 255, opacity],\n          getTargetColor: [240, 0, 60, 224],\n          getWidth: parseInt(\"100\") || 1.0 * 0.5,\n          widthUnits: 'pixels',\n          getHeight: 0.5,\n          opacity: 0.9,\n          parameters: { depthTest: false },\n          widthScale: widthScale,\n          widthMinPixels: 1,\n          widthMaxPixels: 100,\n          updateTriggers: { getWidth: [scaleFactor] },\n          transitions: { getWidth: 200 },\n        })\n      )\n    }\n  }\n\n  if (activeTab === \"lspShipmentChains\" && props.showHub && props.hubLocation.length > 0) {\n    let lspChainsCopy = lspShipmentChains\n    lspShipmentChains = []\n    lspShipmentChains = lspChainsCopy\n    layers.push(\n      //@ts-ignore:\n      new TextLayer({\n        id: 'lspHubs2',\n        data: props.hubLocation,\n        getPosition: [props.hubLocation[0], props.hubLocation[1]],\n        getText: () => props.hubName,\n        getRadius: 2,\n        opacity: 0.9,\n        background: true,\n        backgroundPadding: numSelectedTours !== 1 ? [2, 1, 2, 1] : [3, 2, 3, 1],\n        getBackgroundColor: () => [240, 130, 0],\n        getColor: [255, 255, 255],\n        parameters: { depthTest: false },\n        pickable: true,\n        radiusUnits: 'pixels',\n        getSize: (d: any) => 11,\n        getTextAnchor: 'middle',\n        getAlignmentBaseline: 'center',\n        noAlloc: false,\n        billboard: true,\n        sizeScale: 1,\n        autoHighlight: true,\n        onHover: setHoverInfo,\n      })\n    )\n  }\n\n  useEffect(() => {\n\n    const newLayers = []; // Initialize a new layers array\n\n    const opacity = shipments.length > 1 ? 32 : 255\n\n    function getLineWidth(chainIndex: number, shipmentChain: any) {\n      if (chainIndex + 1 == Number(shipmentChain.route.length - 1)) {\n        return 0.1;\n      } else {\n        return 2;\n      }\n    }\n\n    function getSourceColor(chainIndex: number, shipmentChain: any) {\n      if (chainIndex + 1 == Number(shipmentChain.route.length - 1)) {\n        return [0, 228, 255, opacity];\n      } else {\n        return [255, 255, 255];\n      }\n    }\n\n    function getTargetColor(chainIndex: number, shipmentChain: any) {\n      if (chainIndex + 1 == Number(shipmentChain.route.length - 1)) {\n        return [240, 0, 60, 224];\n      } else {\n        return [255, 255, 255];\n      }\n    }\n\n    if (activeTab === \"lspShipmentChains\" && !props.showHub && props.hubLocation.length == 0) {\n\n      const opacity = shipments.length > 1 ? 32 : 255;\n\n      // Handle direct chains when hubsChains is empty\n      if (lspShipmentChains[0].hubsChains.length === 0) {\n        newLayers.push(\n          new ArcLayer({\n            id: 'shipmentdirectchains',\n            data: lspShipmentChains[0].directChains,\n            getSourcePosition: (d: any) => [d.fromX, d.fromY],\n            getTargetPosition: (d: any) => [d.toX, d.toY],\n            getSourceColor: [0, 228, 255, opacity],\n            getTargetColor: [240, 0, 60, 224],\n            getWidth: 1,\n            widthUnits: 'pixels',\n            getHeight: 0.5,\n            opacity: 0.9,\n            parameters: { depthTest: false },\n            widthScale: widthScale,\n            widthMinPixels: 1,\n            widthMaxPixels: 100,\n            updateTriggers: { getWidth: [scaleFactor] },\n            transitions: { getWidth: 200 },\n          })\n        );\n\n        newLayers.push(\n          new ScatterplotLayer({\n            id: 'deliveriesHubChain',\n            data: lspShipmentChains[0].directChains,\n            getPosition: (d: any) => [d.toX, d.toY],\n            getColor: ActivityColor.delivery,\n            getRadius: 3,\n            opacity: 0.9,\n            parameters: { depthTest: false },\n            pickable: true,\n            radiusUnits: 'pixels',\n            onHover: setHoverInfo,\n          })\n        );\n\n        newLayers.push(\n          new ScatterplotLayer({\n            id: 'pickupsHubChain',\n            data: lspShipmentChains[0].directChains,\n            getPosition: (d: any) => [d.fromX, d.fromY],\n            getColor: ActivityColor.pickup,\n            getRadius: 2,\n            opacity: 0.9,\n            parameters: { depthTest: false },\n            pickable: true,\n            radiusUnits: 'pixels',\n          })\n        );\n      } else {\n        totalShipments = 0\n        lspShipmentChains[0].hubsChains.forEach(lspShipmentChain => {\n          totalShipments++\n          for (let i = 0; i < lspShipmentChain.route.length - 1; i++) {\n            newLayers.push(\n              //@ts-ignore:\n              new ArcLayer({\n                id: 'shipmenthubchains',\n                data: lspShipmentChains[0].hubsChains,\n                getSourcePosition: (d: any) => [d.route[i][0], d.route[i][1]],\n                getTargetPosition: (d: any) => [d.route[i + 1][0], d.route[i + 1][1]],\n                getSourceColor: getSourceColor(i, lspShipmentChain),\n                getTargetColor: getTargetColor(i, lspShipmentChain),\n                getWidth: getLineWidth(i, lspShipmentChain),\n                widthUnits: 'pixels',\n                getHeight: 0.5,\n                opacity: 0.9,\n                parameters: { depthTest: false },\n                widthScale: widthScale,\n                widthMinPixels: 1,\n                widthMaxPixels: 100,\n                updateTriggers: { getWidth: [scaleFactor] },\n                transitions: { getWidth: 200 },\n              })\n            )\n            newLayers.push(\n              //@ts-ignore:\n              new ScatterplotLayer({\n                id: 'HubChain',\n                data: lspShipmentChains[0].hubsChains,\n                getPosition: (d: any) => [d.route[i][0], d.route[i][1]],\n                getColor: ActivityColor.pickup,\n                getRadius: 3,\n                opacity: 0.9,\n                parameters: { depthTest: false },\n                pickable: true,\n                radiusUnits: 'pixels',\n              })\n            )\n          }\n        })\n\n         newLayers.push(\n            //@ts-ignore\n            new TextLayer({\n              id: 'HubChain',\n              data: lspShipmentChains[0].hubsChains,\n              getPosition: (d: any) => [d.hubs[0].locationX, d.hubs[0].locationY],\n              getText: (d: any) => d.hubs[0].id,\n              getAlignmentBaseline: 'center',\n              getColor: [255, 255, 255],\n              getBackgroundColor: [240, 130, 0],\n              background: true,\n              backgroundPadding: [2, 2, 2, 2],\n              fontWeight: 'normal',\n              getSize: 10,\n              getTextAnchor: 'middle',\n              pickable: true,\n              onHover: setHoverInfo\n            })\n          )\n\n        newLayers.push(\n          //@ts-ignore:\n          new ScatterplotLayer({\n            id: 'deliveriesHubChain',\n            data: lspShipmentChains[0].hubsChains,\n            getPosition: (d: any) => [d.toX, d.toY],\n            getColor: ActivityColor.delivery,\n            getRadius: 3,\n            opacity: 0.9,\n            parameters: { depthTest: false },\n            pickable: true,\n            radiusUnits: 'pixels',\n            onHover: setHoverInfo,\n          })\n        )\n\n\n\n        newLayers.push(\n          //@ts-ignore:\n          new ScatterplotLayer({\n            id: 'pickupsHubChain',\n            data: lspShipmentChains[0].hubsChains,\n            getPosition: (d: any) => [d.fromX, d.fromY],\n            getColor: ActivityColor.pickup,\n            getRadius: 2,\n            opacity: 0.9,\n            parameters: { depthTest: false },\n            pickable: true,\n            radiusUnits: 'pixels',\n            // onHover: setHoverInfo,\n          })\n        )\n      }\n    }\n    setLayers(newLayers);\n    prevHubChains.current = lspShipmentChains; // Update the ref for the next render\n  }, [lspShipmentChains]);\n\n\n\n\n  const showBackgroundMap = projection && projection !== 'Atlantis'\n\n  return (\n    <DeckGL\n      layers={layers}\n      pickingRadius={3}\n      controller={true}\n      getCursor={() => 'pointer'}\n      onClick={handleClick}\n      viewState={viewState}\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\n    >\n      {showBackgroundMap && (\n        /*\n        // @ts-ignore */\n        <StaticMap mapboxApiAccessToken={MAPBOX_TOKEN} mapStyle={globalStore.getters.mapStyle} />\n      )}\n      {renderTooltip(hoverInfo)}\n    </DeckGL>\n  )\n}\n","<template lang=\"pug\">\n.carrier-viewer(:class=\"{'hide-thumbnail': !thumbnail}\" oncontextmenu=\"return false\")\n\n  .container-1\n    .main-panel\n      tour-viz.anim(v-if=\"!thumbnail\"\n        :activeTab=\"activeTab\"\n        :shipments=\"shownShipments\"\n        :lspShipmentChains=\"lspShipmentChains\"\n        :carrierTours=\"carrierTours\"\n        :carrierServices=\"carrierServicesAll\"\n        :showCompleteHubChain=\"showCompleteHubChain\"\n        :depots=\"shownDepots\"\n        :legs=\"shownLegs\"\n        :showHub=\"showHub\"\n        :hubLocation=\"hubLocation\"\n        :hubName=\"hubName\"\n        :stopActivities=\"stopActivities\"\n        :dark=\"globalState.isDarkMode\"\n        :center=\"vizDetails.center\"\n        :viewId=\"linkLayerId\"\n        :settings=\"vizSettings\"\n        :numSelectedTours=\"selectedTours.length\"\n        :onClick=\"handleClick\"\n        :projection=\"vizDetails.projection\"\n        )\n      ZoomButtons(v-if=\"!thumbnail\")\n      .xmessage(v-if=\"myState.statusMessage\") {{ myState.statusMessage }}\n\n    .right-panel(v-if=\"!thumbnail\" :darkMode=\"true\")\n      h3(style=\"margin-left: 0.25rem\" v-if=\"lsps.length\") {{ 'Service Providers' }}\n\n      .lsp-list\n        .lsp(v-for=\"lsp in lsps\" :key=\"lsp.$id\"\n          :class=\"{selected: lsp.$id===selectedLsp}\"\n          @click=\"handleSelectLspFromList(lsp)\")\n          .lsp-title {{ lsp.$id }}\n\n      h4 {{ selectedLsp || 'Details' }}\n\n      b-field.detail-buttons(v-if=\"selectedLsp\" size=\"is-small\")\n        // watch array and if the length changes, change value of boolean for v-if\n        b-radio-button(v-if=\"checkIfDirectChain()\" v-model=\"activeTab\" native-value=\"shipments\" size=\"is-small\" type=\"is-warning\")\n          span {{ $t('Shipment Chains') }}\n        b-radio-button(v-if=\"checkIfHubChain()\" v-model=\"activeTab\" native-value=\"lspShipmentChains\" size=\"is-small\" type=\"is-warning\")\n          span {{ $t('Shipment Chains') }}\n        b-radio-button(v-model=\"activeTab\" native-value=\"lspTours\" style=\"50%\" size=\"is-small\" type=\"is-warning\" @click.native=\"handleSelectLspButton(selectedLsp)\")\n          span {{ $t('LSP Tours') }}\n\n      br\n      br\n      br\n\n      h3(style=\"margin-left: 0.25rem\" v-if=\"lsps.length\") {{ 'Carriers' }}\n\n      .carrier-list\n        h5(style=\"font-weight:bold\") {{\"Direct Chain Carriers:\"}}\n        .carrier(v-for=\"carrier in lspCarriers\" :key=\"carrier.$id\"\n          :class=\"{selected: carrier.$id===selectedCarrier}\"\n          @click=\"handleSelectCarrier(carrier)\")\n          .carrier-title {{ carrier.$id }}\n        br\n        h5(style=\"font-weight:bold\") {{\"Hub Chain Carriers:\"}}\n          .carrierHub(v-for=\"hubChain in allHubChains\" :key=\"hubChain.chainIndex\")\n            h6(name=\"\" style=\"font-weight:bold\" @click=\"getCarrierServicesForHubChain(selectedLsp)\") {{\"Hub Chain \" + hubChain.chainIndex + \":\"}}\n            .carrier(v-for=\"carrier in hubChain.chainIds\" :key=\"carrier\"\n              :class=\"{selected: carrier===selectedCarrier}\"\n              @click=\"handleSelectCarrier(carrier)\")\n              .carrier-title {{ carrier }}\n\n\n      h4 {{ selectedCarrier || 'Details' }}\n\n      .switchbox\n        .switches\n          b-switch(v-if=\"(activeTab == 'lspTours' || activeTab == 'tours') && selectedCarrier != ''\" v-model=\"vizSettings.showEachCarrierTour\")\n            span(v-html=\"$t('Carrier Tours')\")\n\n      .detail-area\n\n        .lspShipmentChains(v-if=\"activeTab=='lspShipmentChains'\")\n          span {{ $t('Lsp Shipments')}}: {{ lspShipmentHubChains.length}}\n          .leaf.tour(v-for=\"lspShipmentChain,i in lspShipmentHubChains\" :key=\"`${i}-${lspShipmentChain.shipmentId}`\"\n          @click=\"handleSelectShipmentChain(lspShipmentChain)\"\n          :class=\"{selected: lspShipmentChain==selectedLSPChain}\"        \n          ) {{ `${lspShipmentChain.shipmentId}: ${lspShipmentChain.chainId}` }}\n        .lspShipmentChains(v-if=\"activeTab=='shipments'\")\n          span {{ $t('Shipments')}}: {{ shipments.length}}\n          .leaf.tour(v-for=\"shipment,i in shipments\" :key=\"`${i}-${shipment.$id}`\"\n          @click=\"handleSelectShipment(shipment)\"   \n          :class=\"{selected: shipment==selectedShipment}\"       \n          ) {{ `${shipment.$id}` }}\n        .tours(v-if=\"activeTab=='lspTours' && selectedCarrier && hubLocation.length == 0\")\n          span {{ $t('tours')}}: {{ carrierTours[0].length }}\n          .leaf.tour(v-for=\"tour,i in carrierTours[0]\" :key=\"`${i}-${tour.$id}`\"\n            @click=\"handleSelectTour(tour)\"\n            :class=\"{selected: selectedTours.includes(tour)}\")\n            .carrier-tours(v-if=\"tour.tourId\")\n              div(v-if=\"tour.tourId && vizSettings.showEachCarrierTour\" id=\"tourColor\" :style=\"{ backgroundColor: getTourColor(tour.tourId, tour.tourNumber) }\")\n              div(v-if=\"tour.tourId && !vizSettings.showEachCarrierTour\" id=\"tourColor\" :style=\"{ backgroundColor: getLspTourColor(tour.vehicleId) }\")\n              div(v-if=\"tour.tourId\" id=\"tour\") {{ tour.tourId }}: {{ `${tour.vehicleId}` }}\n              div(v-else) {{ `${tour.vehicleId}` }}\n        .lsptours(v-if=\"activeTab=='lspTours' && !selectedCarrier\")\n          span {{ $t('tours')}}: {{ lspToursAll.length }}\n          .leaf.tour(v-for=\"tour,i in lspToursAll\" :key=\"`${i}-${tour.$id}`\"\n            @click=\"handleSelectTour(tour)\"\n            :class=\"{selected: selectedTours.includes(tour)}\")\n            .lsp-tours(v-if=\"tour.tourId\")\n              div(v-if=\"tour.tourId\" id=\"tourColor\" :style=\"{ backgroundColor: getLspTourColor(tour.vehicleId) }\")\n              div(v-if=\"tour.tourId\") {{ tour.tourId }}: {{ `${tour.vehicleId}` }}\n              div(v-else) {{ `${tour.vehicleId}` }}\n\n      .switchbox\n        .switches(v-if=\"activeTab == 'shipments' || activeTab=='lspShipmentChains'\")\n          p {{$t('scaleSize')}}\n          b-slider.slider(v-if=\"activeTab == 'shipments' || activeTab=='lspShipmentChains'\" :tooltip=\"false\" type=\"is-link\" size=\"is-small\" v-model=\"vizSettings.scaleFactor\")\n        .addedSpace(v-if=\"activeTab == 'tours' || activeTab=='lspTours'\")\n          br\n        .switches(v-if=\"activeTab == 'tours' || activeTab=='lspTours'\")\n          b-switch(v-model=\"vizSettings.shipmentDotsOnTourMap\")\n            span(v-html=\"$t('shipmentDots')\")\n          b-switch(v-model=\"vizSettings.simplifyTours\")\n            span(v-html=\"$t('flatten')\")\n  \n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: {\n      carriers: 'Carriers',\n      vehicles: 'VEHICLES',\n      services: 'SERVICES',\n      shipments: 'SHIPMENTS',\n      tours: 'TOURS',\n      pickup: 'Pickup',\n      service: 'service',\n      delivery: 'Delivery',\n      flatten: 'Simple&nbsp;tours',\n      shipmentDots: 'Show shipments',\n      scaleSize: 'Widths',\n      scaleFactor: 'Width',\n      'Shipment Chains': 'Shipment Chains',\n      'Shipments': 'Shipments',\n      'LSP Tours': 'LSP Tours',\n      'lspShipmentChains': 'lspShipmentChains',\n      'Carrier Tours': 'Carrier Tours',\n      Tours: 'Tours'\n    },\n    de: {\n      carriers: 'Unternehmen',\n      vehicles: 'FAHRZEUGE',\n      services: 'BETRIEBE',\n      shipments: 'LIEFERUNGEN',\n      service: 'service',\n      tours: 'TOUREN',\n      pickup: 'Abholung',\n      delivery: 'Lieferung',\n      'shipment Chains': 'Lieferungketten',\n      Tours: 'Tours'\n    },\n  },\n}\n\nimport { defineComponent, shallowReactive } from 'vue'\nimport type { PropType } from 'vue'\n\nimport { ToggleButton } from 'vue-js-toggle-button'\nimport readBlob from 'read-blob'\nimport YAML from 'yaml'\nimport naturalSort from 'javascript-natural-sort'\nimport colorMap from 'colormap'\n\nimport globalStore from '@/store'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\nimport LegendColors from '@/components/LegendColors'\nimport ZoomButtons from '@/components/ZoomButtons.vue'\nimport { gUnzip, parseXML, findMatchingGlobInFiles, arrayBufferToBase64 } from '@/js/util'\n\nimport RoadNetworkLoader from '@/workers/RoadNetworkLoader.worker.ts?worker'\n\nimport TourViz from './TourViz'\n\nimport {\n  FileSystem,\n  LegendItem,\n  LegendItemType,\n  FileSystemConfig,\n  VisualizationPlugin,\n  LIGHT_MODE,\n  DARK_MODE,\n  REACT_VIEW_HANDLES,\n  MAP_STYLES_OFFLINE,\n  ColorScheme,\n} from '@/Globals'\nimport { concat, forEach } from 'lodash'\nimport { typeOf } from 'mathjs'\nimport { diff } from 'nerdamer'\nimport { any } from 'micromatch'\nimport { id, None } from 'vega'\n\ninterface NetworkLinks {\n  source: Float32Array\n  dest: Float32Array\n  linkIds: any[]\n  projection: String\n}\n\nnaturalSort.insensitive = true\n\n// An ActivityLocation is a link on which activities occur.\n// A location can have multiple visits on a tour!\n// Visits can have multiple pickups/dropoffs.\ninterface ActivityLocation {\n  link: string\n  midpoint: number[]\n  visits: any[]\n  label: string\n  tour: any\n  details?: any\n  ptFrom: number[]\n  ptTo: number[]\n}\ninterface Hub {\n  id: string,\n  location: number,\n  locationX: number,\n  locationY: number\n}\n\n// hubs interface for better labeling?\n\ninterface lspShipmentChain {\n  isDirectChain: boolean,\n  hubs: Hub[],\n  from: string,\n  to: string,\n  fromX: number,\n  fromY: number,\n  toX: number,\n  toY: number,\n  route: any[],\n  color: number,\n  chainId: string\n  shipmentId: string\n}\n\ninterface carrierServices {\n  carrierId: String,\n  carrierServices: [],\n  hubChainIndex: Number,\n  carrierDepotId: String\n}\n\ninterface hubChainIds {\n  chainIds: any[],\n  chainIndex: Number\n}\n\ninterface lspShipmentChains {\n  hubsChains: any[],\n  directChains: any[]\n}\n\nconst LogisticsPlugin = defineComponent({\n  name: 'LogisticsPlugin',\n  i18n,\n  components: {\n    LegendColors,\n    ToggleButton,\n    TourViz,\n    ZoomButtons,\n  },\n  props: {\n    root: { type: String, required: true },\n    subfolder: { type: String, required: true },\n    yamlConfig: String,\n    config: Object as any,\n    thumbnail: Boolean,\n  },\n  data: () => {\n    return {\n      linkLayerId: Math.floor(1e12 * Math.random()),\n\n      vizSettings: {\n        simplifyTours: false,\n        showEachCarrierTour: false,\n        scaleShipmentSizes: true,\n        shipmentDotsOnTourMap: true,\n        scaleFactor: 0, // 0 means don't scale at all\n      },\n\n      vizDetails: {\n        network: '',\n        carriers: '',\n        lsps: '',\n        projection: '',\n        title: '',\n        description: '',\n        thumbnail: '',\n        center: null as any,\n      },\n\n      myState: {\n        statusMessage: '',\n        isRunning: false,\n        subfolder: '',\n        yamlConfig: '',\n        thumbnail: true,\n        data: [] as any[],\n      },\n\n      searchTerm: '',\n      searchEnabled: false,\n\n      globalState: globalStore.state,\n      isLoaded: true,\n      showHelp: false,\n      activeTab: '',\n\n      speedStops: [-10, -5, -2, -1, -0.5, -0.25, 0, 0.25, 0.5, 1, 2, 5, 10],\n      speed: 1,\n\n      legendBits: [] as any[],\n\n      links: null as any,\n\n      toggleTours: true,\n      toggleVehicles: true,\n      toggleShipments: true,\n      toggleServices: true,\n\n      detailContent: '',\n      linksCsvData: null as any,\n\n      data: null as any,\n\n      darkMode: null as any,\n      lightMode: null as any,\n\n\n      // logistic Variables\n      lsps: [] as any[],\n      lspPlan: {} as any,\n      resources: [] as any[],\n      lspShipmentChains: [] as any[], // may not need this - can be replaced with interface \n      lspShipmentDirectChains: [] as any[],\n      lspShipmentHubChains: [] as any[],\n      lspChainTours: [] as any[],\n      lspChainToursAll: [] as any[],\n      lspToursAll: [] as any[], // only used for details section (not viz)\n      lspCarriers: [] as any[],\n      lspHubChainCarriers: [] as any[],\n      lspHubCarriers: [] as any[],\n      lspDirectCarriers: [] as any[],\n      lspCarrier: {} as any,\n\n      allHubChains: [] as any[],\n      allCarrierHubIds: [] as any[],\n      hubLocation: [] as any[],\n      showHub: false,\n      hubName: \"\",\n\n      carriers: [] as any[],\n      carrierTours: [] as any[],\n      carrierServicesAll: new Set(),\n      showCompleteHubChain: false,\n      showCarrierTours: false,\n      showCarrierToursList: false,\n      vehicles: [] as any[],\n      shipments: [] as any[],\n      shipmentLookup: {} as any, // keyed on $id\n      services: [] as any[],\n      stopActivities: [] as any[],\n      tours: [] as any[],\n      plans: [] as any[],\n\n      shownShipments: [] as any[],\n      shipmentIdsInTour: [] as any[],\n\n      depots: [] as any,\n      shownDepots: [] as any,\n\n      shownLegs: [] as {\n        count: number\n        shipmentsOnBoard: string[]\n        totalSize: number\n        points: number[][]\n        tour: any\n        color: number[]\n        type: string\n      }[],\n\n      selectedLsp: '',\n      selectedCarrier: '',\n      selectedTours: [] as any[],\n      selectedPlan: null as any,\n      selectedPlanIndex: null as any,\n      selectedShipment: null as any,\n      selectedLSPChain: null as any,\n\n      thumbnailUrl: '',\n\n      vehicleLookup: [] as string[],\n      vehicleLookupString: {} as { [id: string]: number },\n\n      // always pick the same \"random\" colors\n      rgb: colorMap({\n        colormap: 'phase',\n        nshades: 9,\n        format: 'rba',\n      })\n        .map((a: any) => a.slice(0, 3))\n        .reverse(),\n\n      dropdownIsActive: false,\n    }\n  },\n  computed: {\n    fileApi(): HTTPFileSystem {\n      return new HTTPFileSystem(this.fileSystem, globalStore)\n    },\n\n    fileSystem(): FileSystemConfig {\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\n        (a: FileSystemConfig) => a.slug === this.root\n      )\n      if (svnProject.length === 0) {\n        console.log('no such project')\n        throw Error\n      }\n      return svnProject[0]\n    },\n\n    textColor(): any {\n      const lightmode = {\n        text: '#3498db',\n        bg: '#eeeef480',\n      }\n\n      const darkmode = {\n        text: 'white',\n        bg: '#181518aa',\n      }\n\n      return this.globalState.isDarkMode ? darkmode : lightmode\n    },\n  },\n\n  watch: {\n    '$store.state.viewState'() {\n      if (!REACT_VIEW_HANDLES[this.linkLayerId]) return\n      REACT_VIEW_HANDLES[this.linkLayerId]()\n    },\n\n    'globalState.isDarkMode'() {\n      this.updateLegendColors()\n    },\n\n    async 'globalState.authAttempts'() {\n      console.log('AUTH CHANGED - Reload')\n      if (!this.yamlConfig) this.buildRouteFromUrl()\n      await this.getVizDetails()\n    },\n\n    'this.activeTab'() {\n      console.log(this.activeTab)\n    },\n  },\n\n  methods: {\n\n    checkIfHubChain() {\n      if (this.lspShipmentHubChains.length > 0) {\n        return true\n      } else {\n        return false\n      }\n    },\n\n    checkIfDirectChain() {\n      if (this.lspShipmentDirectChains.length > 0 && this.lspShipmentHubChains.length == 0) {\n        return true\n      } else {\n        return false\n      }\n    },\n\n\n    handleSelectShipment(shipment: any) {\n\n      if (this.selectedShipment === shipment) {\n        this.selectedShipment = null\n        this.shownShipments = []\n\n        // if everything is deselected, reset view\n        if (!this.selectedTours.length) {\n          const carrier = this.carriers.filter(c => c.$id == this.selectedCarrier)\n          this.selectedCarrier = ''\n          this.handleSelectCarrier(carrier[0])\n        }\n\n        return\n      }\n\n      this.shownShipments = this.shipments.filter(s => s.$id === shipment.$id)\n      this.selectedShipment = shipment\n    },\n\n    handleSelectShipmentChain(shipmentChain: any) {\n\n      if (this.selectedLSPChain === shipmentChain) {\n        this.selectedLSPChain = null\n        this.shownShipments = []\n\n        if (this.selectedLSPChain == null) {\n        const lsp = this.lsps.filter(c => c.$id == this.selectedLsp)\n\n        let lspCarrier\n        lsp[0].resources.carrier.forEach((carrier:any) => {\n          if (carrier.$id == this.selectedCarrier) {\n            lspCarrier = carrier\n          }\n        })\n\n        this.shipments = this.processShipments(lspCarrier)\n        this.lspShipmentChains = []\n        this.lspShipmentChains.push(this.processLogisticChains(this.shipments))\n        this.shownShipments = this.shipments\n      }\n        return\n      }\n\n      let newLspShipmentChains: lspShipmentChains = {\n        hubsChains: this.lspShipmentHubChains,\n        directChains: this.lspShipmentDirectChains\n      }\n\n      newLspShipmentChains.hubsChains = this.lspShipmentHubChains.filter(s => s.shipmentId === shipmentChain.shipmentId)\n      newLspShipmentChains.directChains = []\n\n      this.lspShipmentChains = []\n\n      this.lspShipmentChains.push(newLspShipmentChains)\n      this.selectedLSPChain = shipmentChain\n\n    },\n\n\n    processActivitiesInTour(tour: any): {\n      shipmentIdsInTour: any[]\n      stopActivities: ActivityLocation[]\n    } {\n      const shipmentIdsInTour: any[] = []\n      let stopCount = 0\n\n\n      // link ID is the lookup key for activity locations.\n      // BUT, since link-IDs are often numbers, we must always\n      // prepend an \"L\" to the link-id so that the key order\n      // is stable and based on insertion order.\n      const locations: { [link: string]: ActivityLocation } = {}\n\n\n      let linkMidpoint = []\n      let prevLocation = \"\"\n\n      // if starting point is last hub chain node \n      if (this.lspShipmentHubChains.length > 0) {\n        const depotLink = this.links[this.lspShipmentHubChains[0].hubs[this.lspShipmentHubChains[0].hubs.length - 1].location]\n        linkMidpoint = [0.5 * (depotLink[0] + depotLink[2]), 0.5 * (depotLink[1] + depotLink[3])]\n        prevLocation = this.lspShipmentHubChains[0].hubs[this.lspShipmentHubChains[0].hubs.length - 1].location\n\n        // store starting location\n        locations[`L${this.lspShipmentHubChains[0].hubs[this.lspShipmentHubChains[0].hubs.length - 1].location}`] = {\n          link: this.lspShipmentHubChains[0].hubs[this.lspShipmentHubChains[0].hubs.length - 1].location,\n          midpoint: linkMidpoint,\n          visits: [{ pickup: [], delivery: [], service: [] }],\n          label: '',\n          tour,\n          details: {},\n          ptFrom: [depotLink[0], depotLink[1]],\n          ptTo: [depotLink[2], depotLink[3]],\n        }\n        // starting point is Depot (direct chain without hubs)\n      } else if (this.lspShipmentDirectChains.length > 0) {\n        const depotLink = this.links[this.lspShipmentDirectChains[0].from]\n        linkMidpoint = [0.5 * (depotLink[0] + depotLink[2]), 0.5 * (depotLink[1] + depotLink[3])]\n        prevLocation = this.lspShipmentDirectChains[0].from\n        locations[`L${this.lspShipmentDirectChains[0].from}`] = {\n          link: this.lspShipmentDirectChains[0].from,\n          midpoint: linkMidpoint,\n          visits: [{ pickup: [], delivery: [], service: [] }],\n          label: '',\n          tour,\n          details: {},\n          ptFrom: [depotLink[0], depotLink[1]],\n          ptTo: [depotLink[2], depotLink[3]],\n        }\n        // safety net in case error with direct/hub chain processing\n      } else {\n        const depotLink = this.links[this.lspShipmentChains[0].from]\n        linkMidpoint = [0.5 * (depotLink[0] + depotLink[2]), 0.5 * (depotLink[1] + depotLink[3])]\n        prevLocation = this.lspShipmentChains[0].from\n        locations[`L${this.lspShipmentChains[0].from}`] = {\n          link: this.lspShipmentChains[0].from,\n          midpoint: linkMidpoint,\n          visits: [{ pickup: [], delivery: [], service: [] }],\n          label: '',\n          tour,\n          details: {},\n          ptFrom: [depotLink[0], depotLink[1]],\n          ptTo: [depotLink[2], depotLink[3]],\n        }\n      }\n\n\n\n      tour.plan.forEach((activity: any) => {\n\n        if (!activity.$serviceId) {\n          return\n        }\n\n        shipmentIdsInTour.push(activity.$serviceId)\n\n        // not distribution tour (follows hub chain pattern -- Normally)\n        if (tour.vehicleId == 'mainTruck') {\n          const link = (tour.legs[0].links[0]) as string\n          const ptFrom = [this.links[link][0], this.links[link][1]]\n          const ptTo = [this.links[link][2], this.links[link][3]]\n          const midpoint = [0.5 * (ptFrom[0] + ptTo[0]), 0.5 * (ptFrom[1] + ptTo[1])]\n\n          // pickup,delivery,service - translated for UI\n          const actType = this.$t(String(activity.$type))\n          // get details: remove coords, IDs, that we don't need to show the user in UI.\n          // const { from, fromX, fromY, to, toX, toY, id, ...details } = shipment\n\n          const act = {\n            id: tour.id,\n            type: actType,\n            count: stopCount++,\n            link,\n            midpoint,\n            label: '',\n            tour,\n            ptFrom,\n            ptTo,\n          }\n\n\n          // where to store it? same or new location?\n          if (link == prevLocation) {\n            // same loc as last activity\n            locations[`L${link}`].visits[locations[`L${link}`].visits.length - 1][\n              activity.$type\n            ].push(act)\n          } else if (`L${link}` in locations) {\n            // previously-visited location. Start a new visit!\n            const visit = { pickup: [], delivery: [], service: [] } as any\n            visit[activity.$type].push(act) // so gets saved in either pickup[] or delivery[]\n            locations[`L${link}`].visits.push(visit)\n          } else {\n            // never been here before\n            const visit = { pickup: [], delivery: [], service: [] } as any\n            visit[activity.$type].push(act)\n            locations[`L${link}`] = {\n              link,\n              midpoint,\n              label: '',\n              tour,\n              ptFrom,\n              ptTo,\n              visits: [visit],\n            }\n          }\n          prevLocation = link\n          // distribution tour\n        } else {\n          const shipment = this.shipmentLookup[activity.$serviceId]\n          if (!shipment) return\n\n          const link = (activity.$type === 'pickup' ? shipment.$from : shipment.$to) as string\n          const ptFrom = [this.links[link][0], this.links[link][1]]\n          const ptTo = [this.links[link][2], this.links[link][3]]\n          const midpoint = [0.5 * (ptFrom[0] + ptTo[0]), 0.5 * (ptFrom[1] + ptTo[1])]\n\n          // pickup,delivery,service - translated for UI\n          const actType = this.$t(activity.$type)\n          // get details: remove coords, IDs, that we don't need to show the user in UI.\n          const { from, fromX, fromY, to, toX, toY, id, ...details } = shipment\n\n          const act = {\n            id: shipment.$id,\n            type: actType,\n            count: stopCount++,\n            link,\n            midpoint,\n            label: '',\n            tour,\n            details,\n            ptFrom,\n            ptTo,\n          }\n\n\n          // where to store it? same or new location?\n          if (link == prevLocation) {\n            // same loc as last activity\n            locations[`L${link}`].visits[locations[`L${link}`].visits.length - 1][\n              activity.$type\n            ].push(act)\n          } else if (`L${link}` in locations) {\n            // previously-visited location. Start a new visit!\n            const visit = { pickup: [], delivery: [], service: [] } as any\n            visit[activity.$type].push(act) // so gets saved in either pickup[] or delivery[]\n            locations[`L${link}`].visits.push(visit)\n          } else {\n            // never been here before\n            const visit = { pickup: [], delivery: [], service: [] } as any\n            visit[activity.$type].push(act)\n            locations[`L${link}`] = {\n              link,\n              midpoint,\n              label: '',\n              tour,\n              details,\n              ptFrom,\n              ptTo,\n              visits: [visit],\n            }\n          }\n          prevLocation = link\n        }\n      })\n\n\n      // convert to an array, insertion order is stable value order\n      const stopActivities = Object.values(locations)\n\n      // set stop labels: use count for all but the first one\n      for (let sCount = 0; sCount < stopActivities.length; sCount++) {\n        stopActivities[sCount].label = `${sCount}`\n      }\n\n      // this should be correctly implemented - logic not there at the moment\n      if (this.lspShipmentHubChains.length > 0) {\n        stopActivities[0].label = 'Hub'\n      } else {\n        stopActivities[0].label = 'Depot'\n      }\n\n      return { shipmentIdsInTour, stopActivities }\n    },\n\n    setupDepots() {\n      const depots: { [link: string]: any } = {}\n\n      this.vehicles.forEach((v: any) => {\n        const linkId = v.$depotLinkId\n        let depotLink = this.links[linkId]\n\n        if (!depotLink) return\n\n        if (!depots[linkId]) {\n          depots[linkId] = {\n            type: 'depot',\n            link: v.$depotLinkId,\n            midpoint: [0.5 * (depotLink[0] + depotLink[2]), 0.5 * (depotLink[1] + depotLink[3])],\n            coords: this.links[v.$depotLinkId],\n            vehicles: {} as any,\n          }\n        }\n        depots[linkId].vehicles[v.$id] = v\n      })\n\n      this.depots = Object.values(depots)\n      this.shownDepots = this.depots.slice(0)\n    },\n\n    // -----------------------------------------------------------------------\n    // chain tours\n    selectAllLspTours() {\n      this.selectedTours = []\n      this.shownLegs = []\n      this.stopActivities = []\n      this.shownDepots = []\n      this.shownShipments = this.shipments.slice(0)\n\n\n      for (const lspChainTour of this.lspChainToursAll) {\n        for (const tour of lspChainTour) {\n          //  all legs\n          tour.legs.forEach((leg: any, count_route: number) =>\n            this.addRouteToMap(tour, leg, count_route++)\n          )\n\n          // all activities\n          const z = this.processActivitiesInTour(tour)\n          this.stopActivities = this.stopActivities.concat(z.stopActivities)\n\n          // all depots\n          this.setupDepots()\n        }\n      }\n    },\n\n    // direct shipment tours\n    selectAllTours() {\n      this.selectedTours = []\n      this.shownLegs = []\n      this.stopActivities = []\n      this.shownDepots = []\n      this.shownShipments = this.shipments.slice(0)\n\n\n      if (this.carrierTours.length > 0) {\n        for (const tour of this.carrierTours[0]) {\n          //  all legs\n          tour.legs.forEach((leg: any, count_route: number) =>\n            this.addRouteToMap(tour, leg, count_route++)\n          )\n\n          // all activities\n          const z = this.processActivitiesInTour(tour)\n          this.stopActivities = this.stopActivities.concat(z.stopActivities)\n\n          // all depots\n          this.setupDepots()\n        }\n      } else {\n        for (const tour of this.lspChainToursAll) {\n          //  all legs\n          tour.legs.forEach((leg: any, count_route: number) =>\n            this.addRouteToMap(tour, leg, count_route++)\n          )\n\n          // all activities\n          const z = this.processActivitiesInTour(tour)\n          this.stopActivities = this.stopActivities.concat(z.stopActivities)\n\n          // all depots\n          this.setupDepots()\n        }\n      }\n    },\n\n    // Helper function to convert HSL to RGB\n    hslToRgb(h: number, s: number, l: number) {\n      s /= 100;\n      l /= 100;\n\n      const k = (n: any) => (n + h / 30) % 12;\n      const a = s * Math.min(l, 1 - l);\n      const f = (n: any) => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));\n\n      return [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n    },\n\n    getTourColor(tourId: any, tourNumber: any) {\n      // Simple hash function to generate a number from the string\n      let hash = 0;\n      for (let i = 0; i < tourId.length; i++) {\n        hash = tourId.charCodeAt(i) + ((hash << 5) - hash);\n      }\n\n      hash *= tourNumber\n      // Use the hash to generate a hue value (0 - 360)\n      const hue = (hash % 360 + 360) % 360; // Ensures hue is positive\n\n      // Use fixed saturation and lightness to keep the colors vivid and distinct\n      const saturation = 70;  // Percentage (70%)\n      const lightness = 50;   // Percentage (50%)\n\n\n      // Convert HSL to RGB for use in most systems\n      let color = this.hslToRgb(hue, saturation, lightness)\n\n      return `rgb(${color[0]}, ${color[1]}, ${color[2]})`;\n    },\n\n\n    getLspTourColor(vehicleId: string) {\n      // Simple hash function to generate a number from the string\n      let hash = 0;\n      for (let i = 0; i < vehicleId.length; i++) {\n        hash = vehicleId.charCodeAt(i) + ((hash << 5) - hash);\n      }\n\n      // Generate RGB values by mapping parts of the hash to the 0-255 range\n      const r = (hash & 0xFF0000) >> 16;\n      const g = (hash & 0x00FF00) >> 8;\n      const b = hash & 0x0000FF;\n\n      return `rgb(${r}, ${g}, ${b})`;\n    },\n\n\n    async handleSelectTour(tour: any) {\n      // add the legs from the shipmentLookup if the tour has no route data\n      if (!tour.legs.length) {\n        console.log('No Route.')\n        for (let i = 0; i < tour.plan.length; i++) {\n          if (tour.plan[i].$shipmentId) {\n            const shipmentId = tour.plan[i].$shipmentId\n            const linksArray = [\n              this.shipmentLookup[shipmentId].$from,\n              this.shipmentLookup[shipmentId].$to,\n            ]\n            tour.legs.push({ links: linksArray })\n          }\n        }\n        this.vizSettings.simplifyTours = true\n      }\n\n\n      //this unselects tour if user clicks an already-selected tour again\n      if (this.selectedTours.includes(tour)) {\n        this.selectedTours = this.selectedTours.filter((element: any) => element !== tour)\n        this.shownLegs = this.shownLegs.filter(leg => leg.tour !== tour)\n        this.stopActivities = this.stopActivities.filter(stop => stop.tour !== tour)\n\n        // if everything is deselected, EVERYTHING is selected! :-O\n        if (!this.selectedTours.length) {\n          this.selectAllTours()\n        }\n        return\n      }\n\n      // if this is the first selected tour, remove everything else first\n      if (!this.selectedTours.length) {\n        this.selectedTours = []\n        this.shownLegs = []\n        this.stopActivities = []\n        this.shownDepots = []\n      }\n\n      this.selectedTours.push(tour)\n\n      const { shipmentIdsInTour, stopActivities } = this.processActivitiesInTour(tour)\n      this.shipmentIdsInTour = shipmentIdsInTour\n\n      // Add all legs from all routes of this tour to the map\n      let count_route = 0\n      for (const leg of tour.legs) {\n        this.addRouteToMap(tour, leg, count_route++)\n      }\n\n      // add stop activity locations at the very end\n      this.stopActivities = this.stopActivities.concat(stopActivities)\n    },\n\n    addRouteToMap(\n      tour: any,\n      leg: { links: any[]; shipmentsOnBoard: string[]; totalSize: number },\n      count_route: number\n    ) {\n\n      // starting point from xy:[0,1]\n      const points = [[this.links[leg.links[0]][0], this.links[leg.links[0]][1]]]\n\n      for (const link of leg.links) {\n        const lastPoint = points[points.length - 1]\n        const fromXY = [this.links[link][0], this.links[link][1]]\n\n        // add from-point if it isn't a duplicate\n        if (fromXY[0] !== lastPoint[0] || fromXY[1] !== lastPoint[1]) {\n          points.push(fromXY)\n        }\n\n        // always add to-point: xy:[2,3]\n        points.push([this.links[link][2], this.links[link][3]])\n      }\n\n      this.shownLegs = this.shownLegs.concat([\n        {\n          tour,\n          shipmentsOnBoard: leg.shipmentsOnBoard,\n          totalSize: leg.totalSize,\n          count: count_route,\n          points,\n          color: this.rgb[((3 + points.length) % this.rgb.length)],\n          type: 'leg',\n        },\n      ])\n    },\n\n    handleSelectLspButton(lsp: any) {\n      this.showCarrierToursList = false\n      this.activeTab = 'lspTours'\n      this.selectedCarrier = ''\n      this.handleSelectLsp(lsp)\n    },\n\n    handleSelectLspFromList(lsp: any) {\n      this.showCarrierToursList = false\n      if (this.lspShipmentDirectChains.length == 0 && this.lspShipmentHubChains.length == 0) {\n        this.activeTab = \"lspShipmentChains\"\n      } else {\n        this.activeTab = \"shipments\"\n      }\n      this.selectedCarrier = lsp.resources.carrier[0].$id\n      this.handleSelectLsp(lsp)\n\n    },\n\n\n    handleSelectLsp(lsp: any) {\n\n      if (typeof (lsp) == 'string') {\n        lsp = this.lsps.find((c: any) => c.$id === lsp)\n      }\n      this.lspToursAll = []\n\n      this.lspCarriers = []\n      this.lspHubChainCarriers = []\n      this.allHubChains = []\n      // this.lspHubChainCarriers = lsp.resources.carrier.filter((x: any) => this.lspHubCarriers.includes(x.$id))\n      this.lspHubChainCarriers = this.findLspHubChainCarriers(lsp)\n      this.lspCarriers = lsp.resources.carrier.filter((x: any) => !this.allCarrierHubIds.includes(x.$id))\n\n      const id = lsp.$id\n\n      this.selectedLsp = id\n      let lspCarrier = this.carriers.find(c => c.$id === lsp.resources.carrier[0].$id)\n\n\n      this.shipments = this.processShipments(lspCarrier)\n      this.lspShipmentChains = []\n      this.lspShipmentChains.push(this.processLogisticChains(this.shipments))\n      this.shownShipments = this.shipments\n\n\n      let lspToursPlan = lsp.LspPlans.LspPlan.find((c: any) => c.$selected === \"true\")\n      this.lspChainToursAll = []\n      lspToursPlan.logisticChains.logisticChain.forEach((logisticChain: any) => {\n        logisticChain.logisticChainElement.forEach((chainElement: any) => {\n          let chainElementTours = this.processTours(chainElement)\n          if (chainElementTours.length > 0) {\n            this.lspChainToursAll.push(chainElementTours)\n\n          }\n        })\n      })\n\n      this.lspChainToursAll.forEach(array => {\n        this.lspToursAll = this.lspToursAll.concat(array)\n      })\n\n      this.selectAllLspTours()\n\n    },\n\n    getCarrierServicesForHubChain(lsp: any) {\n      this.showCompleteHubChain = true\n      this.handleSelectLsp(lsp)\n    },\n\n    findLspHubChainCarriers(lsp: any) {\n      let carrierLspPlan = {} as any\n      lsp.LspPlans.LspPlan.forEach((plan: any) => {\n        if (plan.$selected === \"true\") {\n          carrierLspPlan = plan\n        }\n      })\n\n      let hubChains: any = []\n\n      carrierLspPlan.logisticChains.logisticChain.forEach((logisticChain: any) => {\n        if (logisticChain.$id == \"hubChain\") {\n          hubChains.push(logisticChain)\n        }\n      });\n      let i = 0\n\n      hubChains.forEach((hubChain: any) => {\n        let hubChainCopy: hubChainIds = {\n          chainIds: [],\n          chainIndex: i\n        }\n\n        hubChain.logisticChainElement.forEach((chain: any) => {\n          hubChainCopy.chainIds.push(chain.$resourceId)\n          this.allCarrierHubIds.push(chain.$resourceId)\n        })\n        this.allHubChains.push(hubChainCopy)\n        i++\n      });\n\n      return this.allHubChains\n    },\n\n    // handleSelectCarrierTours(carrierId: any) {\n    //   console.log(\"tets\")\n    //   // this.showCarrierToursList = true;\n    //   // this.handleSelectCarrier(carrierId)\n    //   // this.selectedCarrier = carrierId\n\n    // },\n\n    handleSelectCarrier(carrierId: any) {\n\n      /// make new carrier specific data object with tours and shipments \n      let carrier: any = {}\n\n      if (typeOf(carrierId) == 'string') {\n        carrier = this.carriers.find(c => c.$id === carrierId)\n      } else {\n        carrier = this.carriers.find(c => c.$id === carrierId.$id)\n      }\n\n      this.showHub = false\n      this.hubLocation = []\n\n      if (carrier == undefined) {\n        this.shipments = []\n        this.hubLocation = []\n        // // it's a hub - how to handle?\n        this.lspShipmentChains = []\n        let currentLsp = this.lsps.find((c: any) => c.$id == this.selectedLsp)\n        let resourceHub = currentLsp.resources.hub.find((c: any) => c.$id == carrierId)\n        this.hubLocation.push(0.5 * (this.links[resourceHub.$location][0] + this.links[resourceHub.$location][2]))\n        this.hubLocation.push(0.5 * (this.links[resourceHub.$location][1] + this.links[resourceHub.$location][3]))\n        this.hubName = carrierId\n        // this.activeTab = ''\n        this.showHub = true\n        this.selectedCarrier = carrierId\n        return\n      }\n\n      this.dropdownIsActive = false\n      if (!this.links) return\n\n      const id = carrier.$id\n\n      this.vehicles = []\n      this.shipments = []\n      this.services = []\n      this.plans = []\n      this.shownShipments = []\n      this.shownDepots = []\n      this.selectedShipment = null\n      this.shipmentIdsInTour = []\n      this.stopActivities = []\n      this.shownLegs = []\n\n      // unselect carrier\n      if (this.selectedCarrier === id) {\n        this.selectedCarrier = ''\n        console.log(\"carriers unselected - TRIGGER THE LSP!\")\n        this.handleSelectLsp(this.lsps.find((c: any) => c.$id == this.selectedLsp))\n        return\n      }\n\n      this.selectedCarrier = id\n\n      // depots\n      this.setupDepots()\n\n      // shipments\n      this.shipments = this.processShipments(carrier)\n      this.lspShipmentChains = []\n      this.lspShipmentChains.push(this.processLogisticChains(this.shipments))\n\n      if (carrier.services?.service?.length)\n        this.services = carrier?.services.service\n          .map((s: any) => s.$)\n          .sort((a: any, b: any) => naturalSort(a.$id, b.$id))\n\n      // select everything\n      this.shownShipments = this.shipments\n\n      this.lspChainTours = []\n      this.lspChainToursAll = []\n      let carrierLsp = {} as any\n      this.lsps.forEach(lsp => {\n        if (lsp.resources.carrier.find((c: any) => c.$id == carrier.$id)) {\n          carrierLsp = lsp\n        }\n      }\n      )\n\n      let carrierLspPlan = {} as any\n      carrierLsp.LspPlans.LspPlan.forEach((plan: any) => {\n        if (plan.$selected === \"true\") {\n          carrierLspPlan = plan\n        }\n      })\n\n      this.carrierTours = []\n\n      let directChainId = carrierLspPlan.logisticChains.logisticChain.find((c: any) => c.$id === \"directChain\")\n      let hubChainId = carrierLspPlan.logisticChains.logisticChain.find((c: any) => c.$id === \"hubChain\")\n      let directChainsIds = [] as any\n      let hubChainsIds = [] as any\n\n\n      if (directChainId) {\n        directChainId.logisticChainElement.forEach((chain: any) => {\n          directChainsIds.push(chain.$resourceId)\n        }\n        )\n      }\n\n      if (hubChainId) {\n        hubChainId.logisticChainElement.forEach((chain: any) => {\n          hubChainsIds.push(chain.$resourceId)\n        }\n        )\n      }\n\n      if (directChainsIds.find((id: any) => id === carrier.$id)) {\n        directChainId.logisticChainElement.forEach((chainElement: any) => {\n          if (chainElement.$resourceId === carrier.$id) {\n            this.carrierTours.push(this.processTours(chainElement))\n          }\n        })\n      } else if (hubChainsIds.find((id: any) => id === carrier.$id))\n        hubChainId.logisticChainElement.forEach((chainElement: any) => {\n          if (chainElement.$resourceId === carrier.$id) {\n            this.carrierTours.push(this.processTours(chainElement))\n          }\n          this.lspChainTours.push(this.processTours(chainElement))\n        })\n\n\n      this.lspChainTours.forEach(array => {\n        this.lspChainToursAll = this.lspChainToursAll.concat(array)\n      })\n      if (this.lspChainToursAll.length == 0) {\n        this.lspChainToursAll.push(this.carrierTours)\n      } else {\n        this.lspChainToursAll.concat(this.carrierTours)\n      }\n\n      // computed option?\n      if (this.activeTab != 'lspTours' && this.activeTab != 'tours' && !this.allCarrierHubIds.includes(carrierId)) {\n        this.activeTab = \"shipments\"\n      }\n\n      if (this.activeTab != 'lspTours' && this.activeTab != 'tours' && this.allCarrierHubIds.includes(carrierId)) {\n        this.activeTab = \"lspShipmentChains\"\n      }\n\n      this.selectAllTours()\n    },\n\n    getAllPlans(carrier: any) {\n      // Add plan to plans[] if there is no plans-tag and only one plan\n      if (carrier.plan != undefined) {\n        this.plans.push(carrier.plan)\n        this.selectedPlan = carrier.plan\n        return\n      }\n\n      if (carrier.plans != undefined) {\n        // Add plan to plans[] if a plans-tag has only one child\n        if (carrier.plans.plan.length == undefined) {\n          this.plans.push(carrier.plans.plan)\n          this.selectedPlan = carrier.plans.plan\n\n          return\n        }\n\n        // Add plans to plans[] if a plans-tag exists and the plans-tag has multiple childs\n        this.plans = carrier.plans.plan\n        for (let i = 0; i < carrier.plans.plan.length; i++) {\n          if (carrier.plans.plan[i].selected == 'true') {\n            this.selectedPlan = carrier.plans.plan[i]\n            break\n          }\n          this.selectedPlan = carrier.plans.plan[i]\n        }\n      }\n\n    },\n\n    processTours(carrier: any) {\n      let carrierCopy = this.carriers.find(c => c.$id === carrier.$resourceId)\n      if (carrierCopy != null) {\n        this.getAllPlans(carrierCopy)\n\n        if (!Array.isArray(this.selectedPlan.tour)) {\n          this.selectedPlan.tour = [this.selectedPlan.tour]\n        }\n\n        const tours: any[] = this.selectedPlan.tour.map((tour: any, i: number) => {\n\n          // reconstitute the plan. Our XML library builds\n          // two arrays: one for acts and one for legs.\n          // We need them stitched back together in the correct order.\n          const plan = [tour.act[0]]\n          const shipmentsOnBoard = new Set()\n\n          for (let i = 1; i < tour.act.length; i++) {\n            // insert list of shipments onboard\n            tour.leg[i - 1].shipmentsOnBoard = [...shipmentsOnBoard]\n            plan.push(tour.leg[i - 1])\n            plan.push(tour.act[i])\n\n            // account for pickups/deliveries\n            // what about services instead of pickups/deliveries?\n            if (tour.act[i].$type == 'pickup' && tour.act[i].$shipmentId)\n              shipmentsOnBoard.add(tour.act[i].$shipmentId)\n            if (tour.act[i].$type == 'delivery' && tour.act[i].$shipmentId)\n              shipmentsOnBoard.delete(tour.act[i].$shipmentId)\n          }\n\n          // Parse any route strings \"123434 234143 14241\"\n          const legs = tour.leg\n            .filter((leg: any) => leg.route && leg.route.length)\n            .map((leg: any) => {\n              // store shipment object, not id\n              const shipmentsOnBoard = leg.shipmentsOnBoard.map((id: any) => this.shipmentLookup[id])\n              const totalSize = shipmentsOnBoard.reduce(\n                (prev: number, curr: any) => prev + parseFloat(curr?.$size || 0),\n                0\n              )\n              return {\n                shipmentsOnBoard,\n                totalSize,\n                links: leg.route ? leg.route.split(' ') : [],\n              }\n            })\n\n\n          const p = {\n            vehicleId: tour.$vehicleId,\n            tourId: tour.$tourId,\n            plan,\n            legs, // legs.links, legs.shipmentsOnBoard, legs.totalSize\n            tourNumber: 0,\n          }\n          return p\n        })\n\n        tours.sort((a: any, b: any) => naturalSort(a.vehicleId, b.vehicleId))\n\n        // now assign them numbers based on their sorted order\n        tours.forEach((tour, i) => (tour.tourNumber = i))\n        return tours\n\n      } else {\n        return []\n      }\n\n    },\n\n    processLogisticChains(shipments: any) {\n      this.lspShipmentHubChains = []\n      this.lspShipmentDirectChains = []\n      let lspCopy = this.lsps.find(c => c.$id === this.selectedLsp)\n      \n\n      // get correct Plan\n      for (let i = 0; i < lspCopy.LspPlans.LspPlan.length; i++) {\n        if (lspCopy.LspPlans.LspPlan[i].$selected == \"true\") {\n          this.lspPlan = lspCopy.LspPlans.LspPlan[i]\n        }\n      }\n\n      console.log(this.lspPlan)\n      // build new data object with shipment & shipment plan data\n      try {\n        for (let i = 0; i < this.lspPlan.shipmentPlans.shipmentPlan.length; i++) {\n          let shipmentCopy = shipments.find((element: any) => element.$id == this.lspPlan.shipmentPlans.shipmentPlan[i].$shipmentId)\n          if (shipmentCopy) {\n            let newShipmentChain: lspShipmentChain = {\n              isDirectChain: true,\n              hubs: [],\n              from: shipmentCopy.$from,\n              to: shipmentCopy.$to,\n              fromX: 0.5 * (this.links[shipmentCopy.$from][0] + this.links[shipmentCopy.$from][2]),\n              fromY: 0.5 * (this.links[shipmentCopy.$from][1] + this.links[shipmentCopy.$from][3]),\n              toX: 0.5 * (this.links[shipmentCopy.$to][0] + this.links[shipmentCopy.$to][2]),\n              toY: 0.5 * (this.links[shipmentCopy.$to][1] + this.links[shipmentCopy.$to][3]),\n              chainId: this.lspPlan.shipmentPlans.shipmentPlan[i].$chainId,\n              route: [],\n              color: 0,\n              shipmentId: shipmentCopy.$id\n            }\n\n            if (newShipmentChain.chainId === \"directChain\") {\n              this.lspShipmentDirectChains.push(newShipmentChain)\n            } else if (newShipmentChain.chainId === \"hubChain\") {\n              // reduce nested-ifs\n              newShipmentChain.isDirectChain = false\n              for (let j = 0; j < this.lspPlan.shipmentPlans.shipmentPlan[i].element.length; j++) {\n                let resourceHub = lspCopy.resources.hub.find((elem: any) => elem.$id == this.lspPlan.shipmentPlans.shipmentPlan[i].element[j].$resourceId)\n                if (resourceHub) {\n                  let newHub: Hub = {\n                    id: this.lspPlan.shipmentPlans.shipmentPlan[i].element[j].$resourceId,\n                    location: resourceHub.$location,\n                    locationX: 0.5 * (this.links[resourceHub.$location][0] + this.links[resourceHub.$location][2]),\n                    locationY: 0.5 * (this.links[resourceHub.$location][1] + this.links[resourceHub.$location][3])\n                  }\n                  newShipmentChain.hubs.push(newHub)\n\n                }\n              }\n              // push all stops to chain's route:\n              newShipmentChain.route.push([newShipmentChain.fromX, newShipmentChain.fromY])\n              newShipmentChain.hubs.forEach(hub => {\n                newShipmentChain.route.push([hub.locationX, hub.locationY])\n              });\n              newShipmentChain.route.push([newShipmentChain.toX, newShipmentChain.toY])\n\n              newShipmentChain.color = this.rgb[(3 + newShipmentChain.route.length) % this.rgb.length]\n              // push individual chain to array of all shipment chains\n              this.lspShipmentHubChains.push(newShipmentChain)\n            }\n          }\n        }\n\n      } catch (e) {\n        console.log(\"processing of logisitc chains failed\")\n      }\n\n      let newLspShipmentChains: lspShipmentChains = {\n        hubsChains: this.lspShipmentHubChains,\n        directChains: this.lspShipmentDirectChains\n      }\n\n      return newLspShipmentChains\n\n    },\n\n\n    processShipments(carrier: any) {\n      this.shipmentLookup = {} as any\n\n      let carrierLsp = {} as any\n      this.lsps.forEach(lsp => {\n        if (lsp.resources.carrier.find((c: any) => c.$id == carrier.$id)) {\n          carrierLsp = lsp\n        }\n      }\n      )\n\n      if (!carrierLsp.shipments?.shipment?.length) return []\n\n      let carrierInfo = {} as any\n\n      this.carriers.forEach(car => {\n        if (car.$id == carrier.$id) {\n          carrierInfo = carrier\n        }\n      })\n\n      // let carrierInfoServices = [] as any\n\n      // carrierInfo.services.service.forEach((service: any) => {\n      //   carrierInfoServices.push(service)\n      // });\n\n\n      // let newCarrierService: carrierServices = {\n      //   carrierId: carrierInfo.$id,\n      //   hubChainIndex: None,\n      //   carrierDepotId: carrierInfo.capabilities.vehicles.vehicle[0].$depotLinkId,\n      //   carrierServices: carrierInfoServices\n      // }\n\n      // this.allHubChains.forEach(element => {\n      //   if (element.chainIds.includes(newCarrierService.carrierId)) {\n      //     newCarrierService.hubChainIndex = element.chainIndex\n      //   } \n      // });\n\n      // this.addToSet(this.carrierServicesAll, newCarrierService)\n\n      const shipmentPlan = carrierLsp.LspPlans.LspPlan.find((c: any) => c.$selected == \"true\")\n      const shipmentPlanIds = [] as String[]\n\n      shipmentPlan.shipmentPlans.shipmentPlan.forEach((plan: any) => {\n        plan.element.forEach((ele: any) => {\n          if (ele.$resourceId == carrier.$id) {\n            shipmentPlanIds.push(plan.$shipmentId)\n          }\n        })\n      })\n\n      let shipments = [] as {}[]\n      let uniqueShipmentPlanIds = [...new Set(shipmentPlanIds)];\n\n      uniqueShipmentPlanIds.forEach((id: String) => {\n        carrierLsp.shipments.shipment.find((c: any) => {\n          if (c.$id == id) {\n            shipments.push(c)\n          }\n        })\n      })\n\n      shipments = shipments.sort((a: any, b: any) =>\n        naturalSort(a.$id, b.$id)\n      )\n\n\n      // shipments = carrierLsp.shipments.shipment.sort((a: any, b: any) =>\n      //   naturalSort(a.$id, b.$id)\n      // )\n\n      try {\n        shipments.forEach((shipment: any) => {\n          // shipment has link id, so we go from link.from to link.to\n          shipment.fromX = 0.5 * (this.links[shipment.$from][0] + this.links[shipment.$from][2])\n          shipment.fromY = 0.5 * (this.links[shipment.$from][1] + this.links[shipment.$from][3])\n          shipment.toX = 0.5 * (this.links[shipment.$to][0] + this.links[shipment.$to][2])\n          shipment.toY = 0.5 * (this.links[shipment.$to][1] + this.links[shipment.$to][3])\n\n          this.shipmentLookup[shipment.$id] = shipment\n        })\n\n\n      } catch (e) {\n        // if xy are missing, skip this -- just means network isn't loaded yet.\n      }\n\n      return shipments\n    },\n\n    addToSet(set: any, obj: any) {\n      const hasDuplicate = Array.from(set).some(item =>\n        JSON.stringify(item) === JSON.stringify(obj)  // Compare based on content\n      );\n\n      if (!hasDuplicate) {\n        set.add(obj); // Add the object directly if no duplicate is found\n      }\n    },\n\n    // this happens if viz is the full page, not a thumbnail on a project page\n    buildRouteFromUrl() {\n      const params = this.$route.params\n      if (!params.project || !params.pathMatch) {\n        console.log('I CANT EVEN: NO PROJECT/PARHMATCH')\n        return\n      }\n\n      // subfolder and config file\n      const sep = 1 + params.pathMatch.lastIndexOf('/')\n      const subfolder = params.pathMatch.substring(0, sep)\n      const config = params.pathMatch.substring(sep)\n\n      this.myState.subfolder = subfolder\n      this.myState.yamlConfig = config\n    },\n\n    async getVizDetails() {\n      // are we in a dashboard?\n      if (this.config) {\n        this.vizDetails = Object.assign({}, this.config)\n        return\n      }\n\n      // if a YAML file was passed in, just use it\n      if (this.yamlConfig?.endsWith('yaml') || this.yamlConfig?.endsWith('yml')) {\n        try {\n          const filename =\n            this.yamlConfig.indexOf('/') > -1\n              ? this.yamlConfig\n              : this.subfolder + '/' + this.yamlConfig\n\n          const text = await this.fileApi.getFileText(filename)\n          this.vizDetails = YAML.parse(text)\n          return\n        } catch (e) {\n          console.log('failed' + e)\n          // maybe it failed because password?\n          const err = e as any\n          if (this.fileSystem.needPassword && err.status === 401) {\n            globalStore.commit('requestLogin', this.fileSystem.slug)\n          } else {\n            this.$emit('error', '' + e)\n          }\n          return\n        }\n      }\n\n      // Fine, build the config based on folder contents -------------------------\n      const title = this.myState.yamlConfig.substring(\n        0,\n        15 + this.myState.yamlConfig.indexOf('carriers')\n      )\n\n      // Road network: first try the most obvious network filename:\n      const { files } = await this.fileApi.getDirectory(this.myState.subfolder)\n\n      let network = this.myState.yamlConfig.replaceAll('carriers', 'network')\n      // if the obvious network file doesn't exist, just grab... the first network file:\n      if (files.indexOf(network) == -1) {\n        const allNetworks = files.filter(f => f.indexOf('network') > -1)\n        if (allNetworks.length) network = allNetworks[0]\n        else {\n          this.myState.statusMessage = 'No road network found.'\n          network = ''\n        }\n      }\n\n      this.vizDetails = {\n        lsps: this.yamlConfig as any,\n        network,\n        carriers: '',\n        title,\n        description: '',\n        center: this.vizDetails.center,\n        projection: '',\n        thumbnail: '',\n      }\n\n      const t = 'Logistics Viewer'\n      this.$emit('title', t)\n    },\n\n    async setMapCenter() {\n      let samples = 0\n      let longitude = 0\n      let latitude = 0\n\n      if (this.vizDetails.center) {\n        if (typeof this.vizDetails.center == 'string') {\n          this.vizDetails.center = this.vizDetails.center.split(',').map(Number)\n        }\n        longitude = this.vizDetails.center[0]\n        latitude = this.vizDetails.center[1]\n      } else if (!this.vizDetails.center) {\n        this.data = Object.entries(this.links)\n\n        if (!this.data.length) return\n\n        const numLinks = this.data.length / 2\n\n        const gap = 4096\n        for (let i = 0; i < numLinks; i += gap) {\n          longitude += this.data[i * 2][1][0]\n          latitude += this.data[i * 2 + 1][1][1]\n          samples++\n        }\n\n        longitude = longitude / samples\n        latitude = latitude / samples\n      }\n      if (longitude && latitude) {\n        this.$store.commit('setMapCamera', {\n          longitude,\n          latitude,\n          zoom: 9,\n          bearing: 0,\n          pitch: 0,\n          jump: false,\n        })\n      }\n    },\n\n    handleClick(object: any) {\n      console.log('CLICK!', object)\n      if (!object) this.clickedEmptyMap()\n      if (object?.type == 'depot') this.clickedDepot(object)\n      if (object?.type == 'leg') this.clickedLeg(object)\n    },\n\n    clickedDepot(object: any) {\n      const vehiclesAtThisDepot = Object.values(object.vehicles).map((v: any) => v.$id)\n      // console.log({ vehiclesAtThisDepot })\n      this.selectedTours = []\n      this.shownShipments = []\n\n      for (const tour of this.lspChainToursAll) {\n        if (vehiclesAtThisDepot.includes(tour.vehicleId)) {\n          this.handleSelectTour(tour)\n          // ^^ has side-effect: shipmentsInTour now has the list of shipmentIds\n          // We can use this to filter the shipments\n          this.shipmentIdsInTour.forEach(id => {\n            this.shownShipments.push(this.shipmentLookup[id])\n          })\n        }\n      }\n    },\n\n    clickedLeg(object: any) {\n      if (object?.tour) this.handleSelectTour(object?.tour)\n    },\n\n    clickedEmptyMap() {\n      this.selectAllTours()\n    },\n\n    updateLegendColors() { },\n\n    async loadLSPS() {\n      const lspsXML = await this.loadFileOrGzippedFile(this.vizDetails.lsps)\n      if (!lspsXML) {\n        return []\n      }\n\n      const root: any = await parseXML(lspsXML, {\n        // these elements should always be arrays, even if there's just one element:\n        alwaysArray: [\n          'lsps.lsp',\n          'lsps.lsp.resources.carrier',\n          'lsps.lsp.resources.hub',\n          'lsps.lsp.shipments.shipment',\n          'lsps.lsp.LspPlans.LspPlan',\n          'lsps.lsp.LspPlans.LspPlan.logisticChains.logisticChain',\n          'lsps.lsp.LspPlans.LspPlan.logisticChains.logisticChain.logisticChainElement',\n          'lsps.lsp.LspPlans.LspPlan.shipmentPlans.shipmentPlan',\n          'lsps.lsp.LspPlans.LspPlan.shipmentPlans.shipmentPlan.element',\n        ],\n      })\n\n      // sort by '$id' attribute\n      const lspList = root.lsps.lsp.sort((a: any, b: any) => naturalSort(a.$id, b.$id))\n      return lspList\n    },\n\n    async loadLinksCsv() {\n      const linksCsv = await this.loadFileOrGzippedFile('output_links.csv.gz')\n      if (linksCsv) {\n        return []\n      }\n      return linksCsv\n    },\n\n    async loadCarriers() {\n      // this.myState.statusMessage = '' + this.$i18n.t('message.tours')\n      const carriersXML = await this.loadFileOrGzippedFile('output_carriers.xml.gz')\n      if (!carriersXML) {\n        console.log(\"can't find carriers\")\n        return []\n      }\n\n      const root: any = await parseXML(carriersXML, {\n        // these elements should always be arrays, even if there's just one element:\n        alwaysArray: [\n          'carriers.carrier',\n          'carriers.carrier.capabilities.vehicles.vehicle',\n          'carriers.carrier.plan.tour',\n          'carriers.carrier.shipments.shipment',\n          'carriers.carrier.services.service',\n        ],\n      })\n\n      // sort by '$id' attribute\n      const carrierList = root.carriers.carrier.sort((a: any, b: any) => naturalSort(a.$id, b.$id))\n\n      return carrierList\n    },\n\n    async loadNetwork() {\n      this.myState.statusMessage = 'Loading network...'\n\n      if (this.vizDetails.network.indexOf('.xml.') > -1) {\n        // load matsim xml file\n        const path = `${this.myState.subfolder}/${this.vizDetails.network}`\n        const net = await this.fetchNetwork(path, {})\n\n        this.vizDetails.projection = '' + net.projection\n\n        // build direct lookup of x/y from link-id\n        this.myState.statusMessage = 'Building network link table'\n        const links: { [id: string]: number[] } = {}\n\n        net.linkIds.forEach((linkId: string, i: number) => {\n          links[linkId] = [\n            net.source[i * 2],\n            net.source[i * 2 + 1],\n            net.dest[i * 2],\n            net.dest[i * 2 + 1],\n          ]\n        })\n        return links\n      } else {\n        // pre-converted JSON output from create_network.py\n        const jsonNetwork = await this.fileApi.getFileJson(\n          this.myState.subfolder + '/' + this.vizDetails.network\n        )\n\n        // geojson is ALWAYS in long/lat\n        this.vizDetails.projection = 'EPSG:4326'\n\n        return jsonNetwork\n      }\n    },\n\n    async fetchNetwork(path: string, vizDetails: any) {\n      return new Promise<NetworkLinks>((resolve, reject) => {\n        const thread = new RoadNetworkLoader()\n        try {\n          thread.postMessage({\n            filePath: path,\n            fileSystem: this.fileSystem,\n            vizDetails,\n          })\n\n          thread.onmessage = e => {\n            // perhaps network has no CRS and we need to ask user\n            if (e.data.promptUserForCRS) {\n              let crs =\n                prompt('Enter the coordinate reference system, e.g. EPSG:25832') || 'EPSG:31468'\n\n              if (Number.isFinite(parseInt(crs))) crs = `EPSG:${crs}`\n\n              thread.postMessage({ crs })\n              return\n            }\n\n            if (e.data.status) {\n              this.myState.statusMessage = '' + e.data.status\n              return\n            }\n\n            // normal exit\n            thread.terminate()\n\n            if (e.data.error) {\n              console.error(e.data.error)\n              globalStore.commit('error', e.data.error)\n              this.myState.statusMessage = e.data.error\n              reject(e.data.error)\n            }\n            resolve(e.data.links)\n          }\n        } catch (err) {\n          thread.terminate()\n          console.error(err)\n          reject(err)\n        }\n      })\n    },\n\n    toggleLoaded(loaded: boolean) {\n      this.isLoaded = loaded\n    },\n\n    rotateColors() {\n      localStorage.setItem(\n        'plugin/agent-animation/colorscheme',\n        this.globalState.isDarkMode ? ColorScheme.DarkMode : ColorScheme.LightMode\n      )\n    },\n\n    async loadFileOrGzippedFile(name: string) {\n      let filepath = `${this.subfolder}/${name}`\n\n      try {\n        // figure out which file to load with *? wildcards\n        if (filepath.indexOf('*') > -1 || filepath.indexOf('?') > -1) {\n          const zDataset = filepath.substring(1 + filepath.lastIndexOf('/'))\n          const zSubfolder = filepath.substring(0, filepath.lastIndexOf('/'))\n\n          // fetch list of files in this folder\n          const { files } = await this.fileApi.getDirectory(zSubfolder)\n          const matchingFiles = findMatchingGlobInFiles(files, zDataset)\n          if (matchingFiles.length == 0) throw Error(`No files matched \"${zDataset}\"`)\n          if (matchingFiles.length > 1)\n            throw Error(`More than one file matched \"${zDataset}\": ${matchingFiles}`)\n          filepath = `${zSubfolder}/${matchingFiles[0]}`\n        }\n\n        let content = ''\n\n        if (filepath.endsWith('xml') || filepath.endsWith('gz')) {\n          const blob = await this.fileApi.getFileBlob(filepath)\n          const buffer = await blob.arrayBuffer()\n          // recursively gunzip until it can gunzip no more:\n          const unzipped = gUnzip(buffer)\n          const text = new TextDecoder('utf-8').decode(unzipped)\n          return text\n        }\n      } catch (e) {\n        // oh no\n      }\n\n      const error = `Error loading ${filepath}`\n      globalStore.commit('error', error)\n      this.myState.statusMessage = error\n      return ''\n    },\n\n    selectDropdown() {\n      this.dropdownIsActive = !this.dropdownIsActive\n    },\n\n    selectPlan(plan: any) {\n      // Set all plans to unselected\n      for (let i = 0; i < this.plans.length; i++) {\n        this.plans[i].$selected = 'false'\n      }\n\n      // Select new plan\n      plan.$selected = 'true'\n\n      this.selectedPlanIndex = this.plans.indexOf(plan)\n\n      // Unselect all tours\n      this.selectedTours = []\n\n      this.selectDropdown()\n      this.selectedPlan = plan\n    },\n  },\n  async mounted() {\n    globalStore.commit('setFullScreen', !this.thumbnail)\n\n    this.myState.thumbnail = this.thumbnail\n    this.myState.subfolder = this.subfolder\n\n    if (!this.yamlConfig) this.buildRouteFromUrl()\n    await this.getVizDetails()\n\n    if (this.thumbnail) return\n\n    this.showHelp = false\n    this.updateLegendColors()\n\n    this.myState.statusMessage = 'Loading carriers...'\n\n    this.lsps = await this.loadLSPS()\n    this.carriers = await this.loadCarriers()\n    this.linksCsvData = await this.loadLinksCsv()\n\n    // TESTS //\n\n    await this.$nextTick() // update UI update before network load begins\n    this.links = await this.loadNetwork()\n    this.setMapCenter()\n    this.myState.statusMessage = ''\n\n    // Select the first carrier if the carriers are loaded\n    // if (this.carriers.length) this.handleSelectCarrier(this.carriers[0])\n    if (this.lsps.length) this.handleSelectLsp(this.lsps[0])\n    if (this.lspShipmentHubChains.length > 0) {\n      this.activeTab = \"lspShipmentChains\"\n    } else {\n      this.activeTab = \"shipments\"\n    }\n\n    this.selectedCarrier = this.lsps[0].resources.carrier[0].$id\n\n    // Select the first tour if the tours are loaded\n\n    if (this.lspChainTours.length) this.selectAllTours()\n\n  },\n\n  beforeDestroy() {\n    this.myState.isRunning = false\n\n    globalStore.commit('setFullScreen', false)\n    this.$store.commit('setFullScreen', false)\n  },\n})\n\nexport default LogisticsPlugin\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n/* SCROLLBARS\n     The emerging W3C standard is currently Firefox-only */\n* {\n  scrollbar-width: thin;\n  scrollbar-color: #454 $steelGray;\n}\n\n/* And this works on Chrome/Edge/Safari */\n*::-webkit-scrollbar {\n  width: 10px;\n}\n\n*::-webkit-scrollbar-track {\n  background: var(--bgPanel3);\n}\n\n*::-webkit-scrollbar-thumb {\n  background-color: var(--textVeryPale);\n  border-radius: 6px;\n}\n\n.carrier-viewer {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  pointer-events: none;\n  min-height: $thumbnailHeight;\n}\n\n.container-1 {\n  display: flex;\n  height: 100%;\n}\n\n.carrier-viewer.hide-thumbnail {\n  background: none;\n}\n\n.main-panel {\n  position: relative;\n  flex: 1;\n}\n\nh4 {\n  border-top: 1px solid #bbb;\n  margin: 1rem 0.25rem 0.5rem 0.25rem;\n  padding-top: 0.25rem;\n  font-weight: bold;\n  font-size: 1.1rem;\n}\n\n.right-panel {\n  color: var(--text);\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  pointer-events: auto;\n  background-color: var(--bgPanel3);\n  width: 18rem;\n  max-width: 18rem;\n  padding: 0 0.25rem;\n}\n\n.nav {\n  grid-area: title;\n  display: flex;\n  flex-direction: row;\n  margin: 0 0;\n  padding: 0 0.5rem 0 1rem;\n\n  a {\n    font-weight: bold;\n    color: white;\n    text-decoration: none;\n\n    &.router-link-exact-active {\n      color: white;\n    }\n  }\n\n  p {\n    margin: auto 0.5rem auto 0;\n    padding: 0 0;\n    color: white;\n  }\n}\n\n.speed-block {\n  margin-top: 1rem;\n}\n\n.legend-block {\n  margin-top: 2rem;\n}\n\n.speed-slider {\n  flex: 1;\n  width: 100%;\n  margin: 0rem 0.25rem 0.25rem 0rem;\n  font-weight: bold;\n}\n\n.big {\n  padding: 0rem 0;\n  // margin-top: 1rem;\n  font-size: 2rem;\n  line-height: 3.75rem;\n  font-weight: bold;\n}\n\n.anim {\n  // background-color: #181919;\n  pointer-events: auto;\n}\n\n.speed-label {\n  font-size: 0.8rem;\n  font-weight: bold;\n}\n\n.clock {\n  grid-area: clock;\n  width: 273px;\n  background-color: #000000cc;\n  border: 3px solid white;\n  margin-bottom: 1.2rem;\n  color: white;\n}\n\n.clock p {\n  text-align: center;\n  padding: 1rem 1rem;\n}\n\n.tooltip {\n  padding: 5rem 5rem;\n  background-color: #ccc;\n  z-index: -1;\n}\n\n.panel-items {\n  display: flex;\n  flex-direction: column;\n  margin: 0 0;\n  max-height: 100%;\n  height: 100%;\n  width: 100%;\n}\n\nh3 {\n  font-size: 1.2rem;\n  padding: 0;\n}\n\ninput {\n  border: none;\n  background-color: #235;\n  color: #ccc;\n}\n\n.carrier {\n  padding: 0.25rem 0.5rem;\n  margin: 0 0rem;\n  color: var(--text);\n}\n\n.carrierHub {\n  padding: 0.25rem 0.5rem;\n  margin: 0 0rem;\n  color: var(--text);\n}\n\n.carrierHub {\n  background: none;\n}\n\n.carrierHub:hover {\n  color: var(--link);\n}\n\n.carrier:nth-of-type(odd) {\n  background: var(--bgPanel2);\n}\n\n.carrier-details {\n  font-weight: normal;\n  margin-left: 0.5rem;\n  animation: slide-up 0.25s ease;\n  color: white;\n}\n\n.carrier-details .carrier:hover {\n  cursor: pointer;\n  background-color: $themeColorPale; // var(--bgBold);\n}\n\n.carrier:hover {\n  color: var(--link);\n}\n\n.carrier-title {\n  margin-top: 0.1rem;\n  display: flex;\n  flex-direction: row;\n  font-weight: normal;\n\n  i {\n    opacity: 0.3;\n    margin-top: 0.2rem;\n    margin-left: -0.2rem;\n    margin-right: 0.4rem;\n  }\n}\n\n.carrier-title:hover {\n  i {\n    opacity: 0.7;\n  }\n}\n\n.carrier.selected {\n  font-weight: bold;\n  background-color: $themeColorPale;\n  box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.3) inset;\n  color: white;\n}\n\n.carrier-list {\n  user-select: none;\n  flex: 1;\n  overflow-y: auto;\n  overflow-x: hidden;\n  cursor: pointer;\n}\n\n.carrier-tours {\n  display: flex;\n  margin-bottom: 0.25rem;\n}\n\n#tourColor {\n  width: 15px;\n  // flex: .1;\n  margin-right: 5px;\n}\n\n.lsp-tours {\n  display: flex;\n  margin-bottom: 0.25rem;\n}\n\n.lsp {\n  padding: 0.25rem 0.5rem;\n  margin: 0 0rem;\n  color: var(--text);\n}\n\n.lsp:nth-of-type(odd) {\n  background: var(--bgPanel2);\n}\n\n.lsp-details {\n  font-weight: normal;\n  margin-left: 0.5rem;\n  animation: slide-up 0.25s ease;\n  color: white;\n}\n\n.lsp-details .lsp:hover {\n  cursor: pointer;\n  background-color: $themeColorPale; // var(--bgBold);\n}\n\n.lsp:hover {\n  color: var(--link);\n}\n\n.lsp-title {\n  margin-top: 0.1rem;\n  display: flex;\n  flex-direction: row;\n\n  i {\n    opacity: 0.3;\n    margin-top: 0.2rem;\n    margin-left: -0.2rem;\n    margin-right: 0.4rem;\n  }\n}\n\n.lsp-title:hover {\n  i {\n    opacity: 0.7;\n  }\n}\n\n.lsp.selected {\n  font-weight: bold;\n  background-color: $themeColorPale;\n  box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.3) inset;\n  color: white;\n}\n\n.lsp-list {\n  user-select: none;\n  flex: 1;\n  overflow-y: auto;\n  overflow-x: hidden;\n  cursor: pointer;\n}\n\n.detail-area {\n  user-select: none;\n  flex: 1;\n  overflow-x: hidden;\n  cursor: pointer;\n  margin: 0 0.25rem 0.25rem 0.25rem;\n  // border-bottom: 1px solid #555;\n}\n\n.carrier-section {\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n}\n\n@keyframes slide-up {\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n}\n\n.playback-stuff {\n  grid-area: playback;\n  padding: 0rem 2rem 2rem 2rem;\n  pointer-events: auto;\n}\n\n.leaf {\n  padding-left: 0.5rem;\n}\n\n.leaf:hover {\n  color: yellowgreen;\n}\n\n.tour.selected {\n  background-color: var(--textFancy);\n  font-weight: bold;\n  color: var(--bgPanel3);\n}\n\n.shipment-in-tour {\n  background-color: #497c7e;\n}\n\n.detail-list {\n  width: 250px;\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n.detail-list pre {\n  font-family: 'Arial';\n  padding: 0 0;\n  line-height: 0.8rem;\n  background-color: var(--bgPanel);\n  color: var(--text);\n}\n\n.switches {\n  display: flex;\n  // margin: 0.25rem 0.25rem;\n\n  p {\n    flex: 1;\n    margin: auto 0;\n  }\n}\n\n.slider {\n  flex: 4;\n  margin-right: 0 1rem;\n}\n\n.detail-buttons {\n  margin: 0 0.25rem 0.5rem 0.25rem;\n  max-width: fit-content;\n}\n\n.switchbox {\n  margin: 0 0.25rem 0.5rem 0.25rem;\n}\n\n.xmessage {\n  position: absolute;\n  bottom: 0;\n  z-index: 10;\n  background-color: var(--bgPanel2);\n  padding: 0.5rem 1rem;\n}\n\n.dropdown {\n  margin-bottom: 0.5rem;\n}\n\n@media only screen and (max-width: 640px) {\n  .nav {\n    padding: 0.5rem 0.5rem;\n  }\n\n  .clock {\n    text-align: center;\n  }\n\n  .right-side {\n    font-size: 0.7rem;\n    margin-right: 0.25rem;\n  }\n\n  .big {\n    padding: 0 0rem;\n    margin-top: 0.5rem;\n    font-size: 1.3rem;\n    line-height: 2rem;\n  }\n\n  .side-section {\n    margin-left: 0;\n  }\n\n  .extra-buttons {\n    margin-right: 1rem;\n  }\n}\n</style>"],"names":["ActivityColor","totalShipments","Component","props","viewState","setViewState","useState","globalStore","hoverInfo","setHoverInfo","pickupsAndDeliveries","setPickupsAndDeliveries","dark","activeTab","numSelectedTours","lspShipmentChains","shipments","depots","legs","settings","stopActivities","center","onClick","projection","simplifyTours","scaleFactor","shipmentDotsOnTourMap","showEachCarrierTour","widthScale","layers","setLayers","prevHubChains","useRef","REACT_VIEW_HANDLES","useEffect","pickups","deliveries","shipment","xy","handleClick","event","handleViewState","view","renderTooltip","object","renderActivityTooltip","renderTourTooltip","renderLegTooltip","renderStopTooltip","activity","x","y","React","renderHubInfo","visits","prev","visit","services","numPickupsAndDeliveries","overview","tipHeight","yPosition","a","getLspTourColor","vehicleId","hash","i","r","g","getCarrierToursColors","leg","hue","hslToRgb","h","s","l","k","n","TextLayer","d","PathLayer","PathStyleExtension","ArcLayer","ScatterplotLayer","opacity","lspChainsCopy","newLayers","getLineWidth","chainIndex","shipmentChain","getSourceColor","getTargetColor","lspShipmentChain","showBackgroundMap","DeckGL","e","StaticMap","MAPBOX_TOKEN","i18n","naturalSort","LogisticsPlugin","defineComponent","LegendColors","ToggleButton","TourViz","ZoomButtons","colorMap","HTTPFileSystem","svnProject","lightmode","darkmode","carrier","c","lsp","lspCarrier","newLspShipmentChains","tour","shipmentIdsInTour","stopCount","locations","linkMidpoint","prevLocation","depotLink","link","ptFrom","ptTo","midpoint","actType","act","from","fromX","fromY","to","toX","toY","id","details","sCount","v","linkId","lspChainTour","count_route","z","f","tourId","tourNumber","saturation","lightness","color","b","shipmentId","linksArray","element","stop","points","lastPoint","fromXY","lspToursPlan","logisticChain","chainElement","chainElementTours","array","carrierLspPlan","plan","hubChains","hubChain","hubChainCopy","chain","carrierId","typeOf","resourceHub","_b","_a","carrierLsp","directChainId","hubChainId","directChainsIds","hubChainsIds","carrierCopy","tours","shipmentsOnBoard","totalSize","curr","lspCopy","shipmentCopy","newShipmentChain","j","elem","newHub","hub","car","shipmentPlan","shipmentPlanIds","ele","set","obj","item","params","sep","subfolder","config","filename","text","YAML","err","title","files","network","allNetworks","t","samples","longitude","latitude","numLinks","gap","vehiclesAtThisDepot","lspsXML","parseXML","linksCsv","carriersXML","path","net","links","jsonNetwork","vizDetails","resolve","reject","thread","RoadNetworkLoader","crs","loaded","ColorScheme","name","filepath","zDataset","zSubfolder","matchingFiles","findMatchingGlobInFiles","content","buffer","unzipped","gUnzip","error"],"mappings":"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"}