{"version":3,"file":"TransitDemand-ae80dd6e.js","sources":["../../src/components/LeftDataPanel.vue","../../src/plugins/transit-demand/LegendBox.vue","../../src/plugins/transit-demand/TransitDemand.vue"],"sourcesContent":["<template lang=\"pug\">\n#datapanel\n  .content-area(:class=\"{'is-hidden': isHidden, 'bye': isLeaving}\")\n    .info-header(v-if=\"title\")\n      h3(style=\"padding: 0.5rem 3rem; font-size: 1rem; font-weight: normal; color: white;\") {{ title }}\n\n    .top-area\n      slot\n\n  .restore-button(:class=\"{'add-margin': !isHidden}\")\n    button.button.is-small.hide-button(@click=\"toggleHidePanel\")\n      i.fa.fa-arrow-left(v-if=\"!isHidden\")\n      i.fa.fa-arrow-right(v-if=\"isHidden\")\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'LeftDataPanel',\n  props: {\n    title: String,\n  },\n  data: () => {\n    return {\n      isHidden: false,\n      isLeaving: false,\n    }\n  },\n  methods: {\n    toggleHidePanel() {\n      if (this.isHidden) this.isHidden = !this.isHidden\n      else {\n        this.isLeaving = true\n        setTimeout(() => {\n          this.isHidden = true\n          this.isLeaving = false\n        }, 300)\n      }\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n#datapanel {\n  display: flex;\n  flex-direction: row;\n  z-index: 7;\n  // margin: 0.5rem 0rem 0.5rem 0.5rem;\n  pointer-events: none;\n}\n\n.content-area {\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.1);\n  animation: 0.3s ease 0s 1 slideInFromLeft;\n  pointer-events: auto;\n}\n\n.is-hidden {\n  display: none;\n}\n\n.bye {\n  animation: 0.3s ease 0s 1 slideOutToLeft;\n}\n\n.top-area {\n  flex-grow: 1;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  // background-color: #eeeefff4;\n  background-color: #d9ddec;\n  border-bottom-left-radius: 0.25rem;\n  border-bottom-right-radius: 0.25rem;\n  opacity: 0.97;\n}\n\n.lower-area {\n  padding: 0.5rem 0.5rem;\n}\n\n.bottom-nav-bar {\n  padding: 0.2rem 0rem;\n  background-color: white;\n  text-align: center;\n  border-bottom-left-radius: 0.25rem;\n  border-bottom-right-radius: 0.25rem;\n}\n\n.restore-button {\n  margin: auto 0rem 0.25rem 0.25rem;\n  pointer-events: auto;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.1);\n}\n\n.info-header {\n  text-align: center;\n  background-color: #09357c;\n  padding: 0.5rem 0rem;\n  // border-top-left-radius: 0.25rem;\n  // border-top-right-radius: 0.25rem;\n  border-top: solid 1px #888;\n  border-bottom: solid 1px #888;\n}\n\n.add-margin {\n  margin-left: 0.4rem;\n}\n\n.hide-button {\n  background-color: #4e6b3d;\n  color: white;\n}\n\n@keyframes slideInFromLeft {\n  from {\n    transform: translateX(-100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n\n@keyframes slideOutToLeft {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(-100%);\n  }\n}\n\n@media only screen and (max-width: 640px) {\n  #datapanel {\n    margin: 0rem 0rem 0rem 0rem;\n  }\n\n  .content-area {\n    margin-bottom: 0rem;\n  }\n\n  .info-header {\n    border-top-left-radius: 0rem;\n    border-top-right-radius: 0rem;\n    border-top: none;\n  }\n\n  .bottom-nav-bar {\n    border-bottom-left-radius: 0rem;\n    border-bottom-right-radius: 0rem;\n  }\n}\n</style>\n","<template lang=\"pug\">\n.legend-container\n  p.control-label LEGEND\n  .legend-item(v-for=\"item in rows\" :key=\"item[0]\")\n    .legend-col-1(:style=\"{'background-color': item[0]}\")\n    span.legend-col-2 {{ item[1] }}\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'LegendBox',\n  props: {\n    rows: { type: Array, required: true },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.legend-container {\n  display: flex;\n  flex-direction: column;\n  color: var(--text);\n\n  h3 {\n    font-size: 1rem;\n    margin-bottom: 0.25rem;\n  }\n}\n\n.control-label {\n  margin: 0 0;\n  font-size: 0.9rem;\n  font-weight: bold;\n}\n\n.legend-item {\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 0.25rem;\n  font-size: 0.8rem;\n  line-height: 0.75rem;\n}\n\n.legend-col-1 {\n  width: 2rem;\n}\n\n.legend-col-2 {\n  margin-left: 0.5rem;\n}\n\np.title {\n  font-size: 0.9rem;\n  text-transform: uppercase;\n  margin-bottom: 1rem;\n  font-weight: normal;\n}\n</style>\n","<template lang=\"pug\">\n.transit-viz(:class=\"{'hide-thumbnail': !thumbnail}\")\n\n  .main-layout(v-if=\"!thumbnail\"\n    @mousemove.stop=\"dividerDragging\"\n    @mouseup=\"dividerDragEnd\"\n  )\n\n    .dragger(v-show=\"showLegend\"\n      @mousedown=\"dividerDragStart\"\n      @mouseup=\"dividerDragEnd\"\n      @mousemove.stop=\"dividerDragging\"\n    )\n\n    .new-rightside-info-panel(v-show=\"showLegend\" :style=\"{width: `${legendSectionWidth}px`}\")\n\n      p(style=\"margin-top: 0.5rem; font-size: 0.9rem\")\n        b TRANSIT ROUTES\n\n      .panel-item(v-if=\"metrics.length > 1\")\n        .metric-buttons\n          button.button.is-small.metric-button(\n            v-for=\"metric,i in metrics\" :key=\"metric.field\"\n            :style=\"{'color': activeMetric===metric.field ? 'white' : buttonColors[i], 'border': `1px solid ${buttonColors[i]}`, 'background-color': activeMetric===metric.field ? buttonColors[i] : isDarkMode ? '#333':'white'}\"\n            @click=\"handleClickedMetric(metric)\") {{ $i18n.locale === 'de' ? metric.name_de : metric.name_en }}\n\n      b-input.searchbox(\n        v-model=\"searchText\" style=\"padding: 0.5rem 0.5rem 1rem 0\" size=\"is-small\" placeholder=\"Search...\"\n      )\n\n      p(v-if=\"!routesOnLink.length\" style=\"font-size: 0.9rem\") Select a link to view its routes.\n\n      .panel-items\n        .route-list(v-if=\"routesOnLink.length > 0\")\n\n          .link-summary.flex-col(v-if=\"summaryStats.departures\")\n            p: b LINK SUMMARY\n            .indent.flex-col(style=\"margin-left: 0.5rem\")\n              p Departures: {{ summaryStats.departures }}\n              p(v-if=\"cfDemand\") Passengers: {{ summaryStats.pax }}\n              p(v-if=\"cfDemand\") Load factor: {{ summaryStats.loadfac }}\n\n          p: b ROUTES ON LINK\n          .route(v-for=\"route in routesOnLink\"\n              :key=\"route.uniqueRouteID\"\n              :class=\"{highlightedRoute: selectedRoute && route.id === selectedRoute.id}\"\n              @click=\"showRouteDetails(route.id)\"\n          )\n            .route-title {{route.id}}\n            .detailed-route-data\n              .col\n                p: b {{route.departures}} departures\n                p {{route.firstDeparture}} — {{route.lastDeparture}}\n              .col(v-if=\"route.passengersAtArrival\")\n                p: b {{ route.passengersAtArrival }} passengers\n                p {{ route.totalVehicleCapacity }} capacity\n\n      legend-box.legend(v-if=\"!thumbnail\"\n        :rows=\"legendRows\"\n      )\n\n      //-   .status-bar(v-show=\"false && statusText\") {{ statusText }}\n\n    .map-container(:class=\"{'hide-thumbnail': !thumbnail }\")\n      div.map-styles(:id=\"mapID\")\n        .stop-html(v-if=\"stopHTML.html\" v-html=\"stopHTML.html\"\n          :style=\"{left: stopHTML.x + 'px', top: stopHTML.y+'px'}\"\n        )\n        .stop-marker(v-for=\"stop,i in stopMarkers\" :key=\"`${i}${stop.name}`\"\n          @mouseenter=\"hoverOverStop(stop, $event)\"\n          :style=\"{transform: 'translate(-50%,-50%) rotate('+stop.bearing+'deg)', left: stop.xy.x + 'px', top: stop.xy.y+'px'}\"\n        )\n\n      zoom-buttons\n      //- drawing-tool(v-if=\"!thumbnail\")\n\n      .status-corner(v-if=\"loadingText\")\n        p {{ loadingText }}\n\n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: { metrics: 'Metrics', viewer: 'Transit Network' },\n    de: { metrics: 'Metrics', viewer: 'ÖV Netzwerk' },\n  },\n}\n\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport * as turf from '@turf/turf'\nimport avro from '@/js/avro'\nimport colormap from 'colormap'\nimport crossfilter from 'crossfilter2'\nimport { debounce } from 'debounce'\nimport maplibregl, { GeoJSONSource, LngLatBoundsLike, LngLatLike, Popup } from 'maplibre-gl'\nimport Papa from '@simwrapper/papaparse'\nimport yaml from 'yaml'\nimport match from 'micromatch'\n\nimport globalStore from '@/store'\nimport CollapsiblePanel from '@/components/CollapsiblePanel.vue'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\nimport LeftDataPanel from '@/components/LeftDataPanel.vue'\nimport { Network, NetworkInputs, NetworkNode, TransitLine, RouteDetails } from './Interfaces'\nimport NewXmlFetcher from '@/workers/NewXmlFetcher.worker?worker'\nimport TransitSupplyWorker from './TransitSupplyHelper.worker?worker'\nimport LegendBox from './LegendBox.vue'\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\nimport ZoomButtons from '@/components/ZoomButtons.vue'\nimport DashboardDataManager from '@/js/DashboardDataManager'\n\nimport { FileSystem, FileSystemConfig, ColorScheme, VisualizationPlugin } from '@/Globals'\n\nimport GzipWorker from '@/workers/GzipFetcher.worker?worker'\n\nconst DEFAULT_PROJECTION = 'EPSG:31468' // 31468' // 2048'\n\nconst COLOR_CATEGORIES = 10\nconst SHOW_STOPS_AT_ZOOM_LEVEL = 11\n\nconst DEFAULT_ROUTE_COLORS = [\n  {\n    match: {\n      transportMode: 'bus',\n      // gtfsRouteType: [3, 700, 701, 702, 703, 704],\n    },\n    color: '#95276E',\n    label: 'Bus',\n  },\n  {\n    match: {\n      transportMode: 'rail',\n      id: 'U*',\n      // gtfsRouteType: [1, 400, 401, 402, 403, 404, 405],\n    },\n    color: '#115D91',\n    label: 'U-Bahn',\n  },\n  {\n    match: {\n      transportMode: 'rail',\n      id: 'S*',\n      // gtfsRouteType: [109],\n    },\n    color: '#408335',\n    label: 'S-Bahn',\n  },\n  {\n    match: {\n      transportMode: 'rail',\n      // gtfsRouteType: [2, 100, 101, 102, 103, 104, 105, 106, 107, 108],\n    },\n    color: '#EC0016 ',\n    label: 'Long-distance train services',\n  },\n  {\n    match: {\n      transportMode: 'ferry',\n      // gtfsRouteType: [4, 1000, 1200],\n    },\n    color: '#0480c1',\n    label: 'Ferry',\n  },\n  {\n    match: {\n      transportMode: 'tram',\n      // gtfsRouteType: [0, 900, 901, 902, 903, 904, 905, 906]\n    },\n    color: '#BE1414',\n    label: 'Tram',\n  },\n  {\n    match: { transportMode: 'pt' },\n    color: '#00a',\n    label: 'Public Transport',\n  },\n  // {\n  //   match: { transportMode: 'train' },\n  //   color: '#0a0',\n  //   label: 'Rail',\n  // },\n  {\n    match: { id: '**' },\n    color: '#aae',\n    label: 'Other',\n  },\n] as { match: any; color: string; label: string; hide: boolean }[]\n\nclass Departure {\n  public total: number = 0\n  public routes: Set<string> = new Set()\n}\n\nconst MyComponent = defineComponent({\n  name: 'TransitViewer',\n  i18n,\n  components: { CollapsiblePanel, LeftDataPanel, LegendBox, DrawingTool, ZoomButtons },\n\n  props: {\n    root: { type: String, required: true },\n    subfolder: { type: String, required: true },\n    yamlConfig: String,\n    config: { type: Object as any },\n    thumbnail: Boolean,\n    datamanager: { type: Object as PropType<DashboardDataManager> },\n  },\n\n  data() {\n    const metrics = [{ field: 'departures', name_en: 'Departures', name_de: 'Abfahrten' }]\n\n    return {\n      searchText: '',\n      //drag\n      isDraggingDivider: 0,\n      dragStartWidth: 250,\n      legendSectionWidth: 250,\n      showLegend: true,\n      //\n      stopHTML: { html: '', x: 0, y: 0 },\n      mapPopup: new Popup({\n        closeButton: false,\n        closeOnClick: false,\n      }),\n      buttonColors: ['#5E8AAE', '#BF7230', '#269367', '#9C439C'],\n      metrics: metrics,\n      activeMetric: metrics[0].field as any,\n      vizDetails: {\n        transitSchedule: '',\n        network: '',\n        demand: '',\n        projection: '',\n        title: '',\n        description: '',\n        customRouteTypes: [] as { match: any; color: string; label: string; hide: boolean }[],\n      },\n      // DataManager might be passed in from the dashboard; or we might be\n      // in single-view mode, in which case we need to create one for ourselves\n      myDataManager: this.datamanager || new DashboardDataManager(this.root, this.subfolder),\n      debounceHandleSearchText: {} as any,\n\n      myState: {\n        subfolder: '',\n        yamlConfig: '',\n        thumbnail: true,\n      },\n      avroNetwork: null as any,\n      isDarkMode: globalStore.state.isDarkMode,\n      isMapMoving: false,\n      loadingText: 'MATSim Transit Inspector',\n      mymap: null as any,\n      mapID: `map-id-${Math.floor(1e12 * Math.random())}` as any,\n      projection: DEFAULT_PROJECTION,\n      routesOnLink: [] as any[],\n      selectedRoute: null as any,\n      summaryStats: { departures: 0, pax: 0, loadfac: 0 },\n      stopMarkers: [] as any[],\n      _attachedRouteLayers: [] as string[],\n      _departures: {} as { [linkID: string]: Departure },\n      _linkData: null as any,\n      _mapExtentXYXY: null as any,\n      _maximum: -Infinity,\n      _network: {} as Network,\n      _routeData: {} as { [index: string]: RouteDetails },\n      _stopFacilities: {} as { [index: string]: NetworkNode },\n      _transitLines: {} as { [index: string]: TransitLine },\n      _roadFetcher: {} as any,\n      _transitFetcher: {} as any,\n      _transitHelper: {} as any,\n      _transitLinks: null as any,\n      _geoTransitLinks: null as any,\n\n      resolvers: {} as { [id: number]: any },\n      resolverId: 0,\n      xmlWorker: null as null | Worker,\n      cfDemand: null as crossfilter.Crossfilter<any> | null,\n      cfDemandLink: null as crossfilter.Dimension<any, any> | null,\n      hoverWait: false,\n      routeColors: [] as { match: any; color: string; label: string; hide: boolean }[],\n      usedLabels: [] as string[],\n    }\n  },\n\n  computed: {\n    fileApi(): HTTPFileSystem {\n      return new HTTPFileSystem(this.fileSystem, globalStore)\n    },\n\n    fileSystem(): FileSystemConfig {\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\n        (a: FileSystemConfig) => a.slug === this.root\n      )\n      if (svnProject.length === 0) {\n        console.log('no such project')\n        throw Error\n      }\n      return svnProject[0]\n    },\n\n    legendRows(): string[][] {\n      return this.routeColors\n        .filter(r => this.usedLabels.includes(r.label))\n        .map(r => [r.color, r.label])\n    },\n  },\n\n  watch: {\n    searchText() {\n      this.debounceHandleSearchText()\n    },\n\n    '$store.state.resizeEvents'() {\n      if (this.mymap) this.mymap.resize()\n    },\n\n    '$store.state.viewState'({ bearing, longitude, latitude, zoom, pitch }: any) {\n      // ignore my own farts; they smell like roses\n      if (!this.mymap || this.isMapMoving) {\n        this.isMapMoving = false\n        return\n      }\n\n      // sometimes closing a view returns a null map, ignore it!\n      if (!zoom) return\n\n      this.mymap.off('move', this.handleMapMotion)\n\n      this.mymap.jumpTo({\n        bearing,\n        zoom,\n        center: [longitude, latitude],\n        pitch,\n      })\n\n      this.mymap.on('move', this.handleMapMotion)\n\n      if (this.stopMarkers.length > 0) this.showTransitStops()\n    },\n\n    '$store.state.colorScheme'() {\n      this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode\n      if (!this.mymap) return\n\n      this.removeAttachedRoutes()\n\n      this.mymap.setStyle(globalStore.getters.mapStyle)\n\n      this.mymap.on('style.load', () => {\n        if (this._geoTransitLinks) this.addTransitToMap(this._geoTransitLinks)\n        this.highlightAllAttachedRoutes()\n        if (this.selectedRoute) this.showTransitRoute(this.selectedRoute.id)\n      })\n    },\n  },\n\n  methods: {\n    handleSearchText() {\n      this.handleEmptyClick(null, true)\n      let foundRoutes = [] as any[]\n      const searchTerm = this.searchText.trim().toLocaleLowerCase()\n\n      if (searchTerm) {\n        foundRoutes = Object.keys(this._routeData).filter(\n          routeID => routeID.toLocaleLowerCase().indexOf(searchTerm) > -1\n        )\n      }\n\n      // show/hide background transit routes\n      // this.showAllTransit(!foundRoutes.length)\n\n      // show selected routes\n      this.routesOnLink = foundRoutes.map(id => this._routeData[id])\n\n      this.highlightAllAttachedRoutes()\n      if (this.routesOnLink.length) {\n        this.selectedRoute = this.routesOnLink[0].id\n        this.showTransitRoute(this.selectedRoute)\n      }\n\n      this.setTransitLayerOpacity(searchTerm ? 0.2 : 1.0)\n    },\n\n    hoverOverStop(stop: any, e: MouseEvent) {\n      this.stopHTML.html = ''\n      const lines = [] as string[]\n      if (stop.name) lines.push(`<b>${stop.name}</b>`)\n      for (const attr of ['id', 'linkRefId']) {\n        if (stop[attr]) lines.push(`${attr}: ${stop[attr]}`)\n      }\n      this.stopHTML.html = '<p>' + lines.join('<br/>') + '</p>'\n      this.stopHTML.x = stop.xy.x + 8\n      this.stopHTML.y = stop.xy.y - 36\n    },\n\n    dividerDragStart(e: MouseEvent) {\n      console.log('dragstart')\n      // console.log('dragStart', e)\n      this.isDraggingDivider = e.clientX\n      this.dragStartWidth = this.legendSectionWidth\n    },\n\n    dividerDragEnd(e: MouseEvent) {\n      this.isDraggingDivider = 0\n    },\n\n    dividerDragging(e: MouseEvent) {\n      if (!this.isDraggingDivider) return\n\n      const deltaX = this.isDraggingDivider - e.clientX\n      this.legendSectionWidth = Math.max(0, this.dragStartWidth + deltaX)\n      // localStorage.setItem('leftPanelWidth', `${this.legendSectionWidth}`)\n      this.mymap.resize()\n    },\n\n    async getVizDetails() {\n      // are we in a dashboard?\n      if (this.config) {\n        this.vizDetails = Object.assign({}, this.config)\n        return true\n      }\n\n      // if a YAML file was passed in, just use it\n      if (this.myState.yamlConfig?.endsWith('yaml') || this.myState.yamlConfig?.endsWith('yml')) {\n        return this.loadYamlConfig()\n      }\n\n      // Build the config based on folder contents\n      const title = this.myState.yamlConfig.substring(\n        0,\n        15 + this.myState.yamlConfig.indexOf('transitSchedule')\n      )\n\n      this.vizDetails = {\n        transitSchedule: this.myState.yamlConfig,\n        network: '',\n        title,\n        description: '',\n        demand: '',\n        projection: '',\n        customRouteTypes: [],\n      }\n\n      this.$emit('title', title)\n      return true\n    },\n\n    async prepareView() {\n      const { files } = await this.fileApi.getDirectory(this.myState.subfolder)\n\n      // Road network: first try the most obvious network filename:\n      let network =\n        this.vizDetails.network ?? this.myState.yamlConfig.replaceAll('transitSchedule', 'network')\n\n      // if the obvious network file doesn't exist, just grab... the first network file:\n      if (files.indexOf(network) == -1) {\n        const allNetworks = files.filter(f => f.endsWith('network.xml.gz'))\n        if (allNetworks.length) network = allNetworks[0]\n        else {\n          this.loadingText = 'No road network found.'\n          network = ''\n        }\n      }\n\n      // Departures: use them if we are in an output folder (and they exist)\n      let demandFiles = [] as string[]\n      if (this.myState.yamlConfig.indexOf('output_transitSchedule') > -1) {\n        demandFiles = files.filter(f => f.endsWith('pt_stop2stop_departures.csv.gz'))\n      }\n\n      // Save everything\n      this.vizDetails.network = network\n      if (demandFiles.length) this.vizDetails.demand = demandFiles[0]\n    },\n\n    async guessProjection(networks: any): Promise<string> {\n      // 00. If it's in config, use it\n      if (this.vizDetails.projection) return this.vizDetails.projection\n      if (this.config?.projection) return this.config.projection\n\n      // 0. If it's in the AVRO network, use it\n      if (networks?.roadXML?.attributes?.coordinateReferenceSystem) {\n        return networks?.roadXML?.attributes?.coordinateReferenceSystem\n      }\n\n      // 0. If it's in the network, use it\n      if (networks?.roadXML?.network?.attributes?.attribute?.name === 'coordinateReferenceSystem') {\n        return networks?.roadXML?.network?.attributes?.attribute['#text']\n      }\n\n      // 1. if we have it in storage already, use it\n      const storagePath = `${this.root}/${this.subfolder}`\n      let savedConfig = undefined // localStorage.getItem(storagePath) as any\n\n      const goodEPSG = /EPSG:.\\d/\n\n      if (savedConfig) {\n        try {\n          const config = JSON.parse(savedConfig)\n\n          if (goodEPSG.test(config.networkProjection)) {\n            return config.networkProjection\n          } else {\n            savedConfig = {}\n          }\n        } catch (e) {\n          console.error('bad saved config in storage', savedConfig)\n          savedConfig = {}\n          // fail! ok try something else\n        }\n      }\n\n      // 2. try to get it from config\n      const { files } = await this.fileApi.getDirectory(this.myState.subfolder)\n      const outputConfigs = files.filter(\n        f => f.indexOf('.output_config.xml') > -1 || f.indexOf('.output_config_reduced.xml') > -1\n      )\n      if (outputConfigs.length && this.fileSystem) {\n        // console.log('trying to find CRS in', outputConfigs[0])\n\n        for (const xmlConfigFileName of outputConfigs) {\n          try {\n            const configXML: any = await this.fetchXML({\n              worker: null,\n              slug: this.fileSystem.slug,\n              filePath: this.myState.subfolder + '/' + xmlConfigFileName,\n            })\n\n            const global = configXML.config.module.filter((f: any) => f.$name === 'global')[0]\n            const crs = global.param.filter((p: any) => p.$name === 'coordinateSystem')[0]\n\n            const crsValue = crs.$value\n\n            // save it\n            // savedConfig = savedConfig || {}\n            // savedConfig.networkProjection = crsValue\n            // localStorage.setItem(storagePath, JSON.stringify(savedConfig))\n            return crsValue\n          } catch (e) {\n            console.warn('Failed parsing', xmlConfigFileName)\n          }\n        }\n      }\n\n      // 3. ask the user\n      let entry = prompt('Need coordinate EPSG number:', '') || ''\n\n      // if user cancelled, give up\n      if (!entry) return ''\n      // if user gave bad answer, try again\n      if (Number.isNaN(parseInt(entry, 10)) && !goodEPSG.test(entry))\n        return this.guessProjection(networks)\n\n      // hopefully user gave a good EPSG number\n      if (!entry.startsWith('EPSG:')) entry = 'EPSG:' + entry\n\n      const networkProjection = entry\n      localStorage.setItem(storagePath, JSON.stringify({ networkProjection }))\n      return networkProjection\n    },\n\n    async loadYamlConfig() {\n      const filename =\n        this.myState.yamlConfig.indexOf('/') > -1\n          ? this.myState.yamlConfig\n          : this.myState.subfolder + '/' + this.myState.yamlConfig\n\n      try {\n        const text = await this.fileApi.getFileText(filename)\n        this.vizDetails = yaml.parse(text)\n      } catch (e) {\n        // maybe it failed because password?\n        const err = e as any\n        if (this.fileSystem && this.fileSystem.needPassword && err.status === 401) {\n          this.$store.commit('requestLogin', this.fileSystem.slug)\n        } else {\n          const msg = 'Could not load ' + filename\n          this.$emit('error', msg)\n          this.loadingText = msg\n        }\n        return false\n      }\n\n      const t = this.vizDetails.title ? this.vizDetails.title : 'Transit Ridership'\n      this.$emit('title', t)\n\n      this.projection = this.vizDetails.projection\n      return true\n    },\n\n    isMobile() {\n      const w = window\n      const d = document\n      const e = d.documentElement\n      const g = d.getElementsByTagName('body')[0]\n      const x = w.innerWidth || e.clientWidth || g.clientWidth\n      const y = w.innerHeight || e.clientHeight || g.clientHeight\n      return x < 640\n    },\n\n    setupMap() {\n      try {\n        this.mymap = new maplibregl.Map({\n          bearing: 0,\n          container: this.mapID,\n          logoPosition: 'bottom-left',\n          style: globalStore.getters.mapStyle,\n          pitch: 0,\n        })\n\n        const extent = localStorage.getItem(this.$route.fullPath + '-bounds')\n\n        if (extent) {\n          try {\n            const lnglat = JSON.parse(extent)\n            const mFac = this.isMobile() ? 0 : 1\n            const padding = { top: 50 * mFac, bottom: 50 * mFac, right: 50 * mFac, left: 50 * mFac }\n\n            this.mymap.fitBounds(lnglat, {\n              animate: false,\n              padding,\n            })\n          } catch (e) {\n            // ignore this, it's ok\n          }\n        }\n        // Start doing stuff AFTER the MapBox library has fully initialized\n        this.mymap.on('load', this.mapIsReady)\n        this.mymap.on('move', this.handleMapMotion)\n        this.mymap.on('click', this.handleEmptyClick)\n\n        this.mymap.keyboard.disable() // so arrow keys don't pan\n      } catch (e) {\n        console.error('' + e)\n\n        // no worries\n      }\n    },\n\n    drawMetric() {\n      let widthExpression: any = 3\n\n      switch (this.activeMetric) {\n        case 'departures':\n          widthExpression = ['max', 2, ['*', 0.03, ['get', 'departures']]]\n          break\n\n        case 'pax':\n          widthExpression = ['max', 2, ['*', 0.003, ['get', 'pax']]]\n          break\n\n        case 'loadfac':\n          widthExpression = ['max', 2, ['*', 200, ['get', 'loadfac']]]\n          break\n      }\n\n      this.mymap.setPaintProperty('transit-link', 'line-width', widthExpression)\n    },\n\n    handleClickedMetric(metric: { field: string }) {\n      console.log('transit metric:', metric.field)\n      this.activeMetric = metric.field\n      this.drawMetric()\n    },\n\n    handleMapMotion() {\n      const mapCamera = {\n        longitude: this.mymap.getCenter().lng,\n        latitude: this.mymap.getCenter().lat,\n        bearing: this.mymap.getBearing(),\n        zoom: this.mymap.getZoom(),\n        pitch: this.mymap.getPitch(),\n      }\n\n      if (!this.isMapMoving) this.$store.commit('setMapCamera', mapCamera)\n      this.isMapMoving = true\n\n      if (this.stopMarkers.length > 0) this.showTransitStops()\n      this.stopHTML.html = ''\n    },\n\n    handleEmptyClick(e: any, force?: boolean) {\n      this.setTransitLayerOpacity(1.0)\n\n      // clear search box if user clicked away\n      if (!force) this.searchText = ''\n\n      // don't clear map if search box has text\n      if (this.searchText && !force) return\n\n      this.removeStopMarkers()\n      this.removeSelectedRoute()\n      this.removeAttachedRoutes()\n      this.routesOnLink = []\n      this.stopHTML.html = ''\n      this.summaryStats = { departures: 0, pax: 0, loadfac: 0 }\n    },\n\n    showRouteDetails(routeID: string) {\n      if (!routeID && !this.selectedRoute) return\n\n      console.log({ routeID })\n\n      if (routeID) this.showTransitRoute(routeID)\n      else this.showTransitRoute(this.selectedRoute.id)\n\n      this.showTransitStops()\n    },\n\n    async mapIsReady() {\n      const networks = await this.loadNetworks()\n      const projection = await this.guessProjection(networks)\n      this.vizDetails.projection = projection\n      this.projection = this.vizDetails.projection\n\n      if (networks) this.processInputs(networks)\n\n      // TODO remove for now until we research whether this causes a memory leak:\n      // this.setupKeyListeners()\n    },\n\n    setupKeyListeners() {\n      window.addEventListener('keyup', event => {\n        if (event.keyCode === 27) {\n          // ESC\n          this.pressedEscape()\n        }\n      })\n      window.addEventListener('keydown', event => {\n        if (event.keyCode === 38) {\n          this.pressedArrowKey(-1) // UP\n        }\n        if (event.keyCode === 40) {\n          this.pressedArrowKey(+1) // DOWN\n        }\n      })\n    },\n\n    fetchXML(props: { worker: any; slug: string; filePath: string; options?: any }) {\n      let xmlWorker = props.worker\n\n      xmlWorker.onmessage = (message: MessageEvent) => {\n        // message.data will have .id and either .error or .xml\n        const { resolve, reject } = this.resolvers[message.data.id]\n\n        xmlWorker.terminate()\n\n        if (message.data.error) reject(message.data.error)\n        resolve(message.data.xml)\n      }\n\n      // save the promise by id so we can look it up when we get messages\n      const id = this.resolverId++\n\n      xmlWorker.postMessage({\n        id,\n        fileSystem: this.fileSystem,\n        filePath: props.filePath,\n        options: props.options,\n      })\n\n      const promise = new Promise((resolve, reject) => {\n        this.resolvers[id] = { resolve, reject }\n      })\n      return promise\n    },\n\n    async updateStatus(message: string) {\n      this.loadingText = message\n    },\n\n    async loadAvroRoadNetwork() {\n      const filename = `${this.subfolder}/${this.vizDetails.network}`\n      const blob = await this.fileApi.getFileBlob(filename)\n\n      const records: any[] = await new Promise((resolve, reject) => {\n        const rows = [] as any[]\n        avro\n          .createBlobDecoder(blob)\n          .on('metadata', (schema: any) => {\n            // console.log(schema)\n          })\n          .on('data', (row: any) => {\n            rows.push(row)\n          })\n          .on('end', () => {\n            resolve(rows)\n          })\n      })\n\n      // console.log({ records })\n      this.avroNetwork = records[0]\n      return records[0]\n    },\n\n    async loadNetworks() {\n      try {\n        if (!this.fileSystem || !this.vizDetails.network || !this.vizDetails.transitSchedule) return\n\n        this.loadingText = 'Loading networks...'\n\n        const filename = this.vizDetails.network\n\n        const roads =\n          filename.indexOf('.avro') > -1\n            ? // AVRO networks have a separate reader:\n              this.loadAvroRoadNetwork()\n            : // normal MATSim network\n              this.fetchXML({\n                worker: this._roadFetcher,\n                slug: this.fileSystem.slug,\n                filePath: this.myState.subfolder + '/' + this.vizDetails.network,\n                options: { attributeNamePrefix: '' },\n              })\n\n        const transit = this.fetchXML({\n          worker: this._transitFetcher,\n          slug: this.fileSystem.slug,\n          filePath: this.myState.subfolder + '/' + this.vizDetails.transitSchedule,\n          options: {\n            attributeNamePrefix: '',\n            alwaysArray: [\n              'transitSchedule.transitLine.transitRoute',\n              'transitSchedule.transitLine.transitRoute.departures.departure',\n            ],\n          },\n        })\n\n        // and wait for them to all complete\n        const results = await Promise.all([roads, transit])\n        return { roadXML: results[0], transitXML: results[1], ridership: [] }\n      } catch (e) {\n        console.error('TRANSIT:', e)\n        this.loadingText\n        this.$emit('error', '' + e)\n        return null\n      }\n    },\n\n    loadDemandData(filename: string): Promise<any[]> {\n      const promise: Promise<any[]> = new Promise<any[]>((resolve, reject) => {\n        if (!filename) resolve([])\n        this.loadingText = 'Loading demand...'\n        const worker = new GzipWorker() as Worker\n\n        worker.onmessage = (event: MessageEvent) => {\n          this.loadingText = 'Processing demand...'\n          worker.terminate()\n\n          if (event.data.error) {\n            this.$emit('error', event.data.error)\n            this.loadingText = ''\n            return\n          }\n\n          const csvData = new TextDecoder('utf-8').decode(event.data)\n\n          Papa.parse(csvData, {\n            // preview: 10000,\n            header: true,\n            skipEmptyLines: true,\n            dynamicTyping: true,\n            worker: true,\n            complete: (results: any) => {\n              resolve(this.processDemand(results))\n            },\n          })\n        }\n\n        worker.postMessage({\n          filePath: this.myState.subfolder + '/' + filename,\n          fileSystem: this.fileSystem,\n        })\n      })\n      return promise\n    },\n\n    processDemand(results: any) {\n      // todo: make sure meta contains fields we need!\n      this.loadingText = 'Processing demand data...'\n\n      // build crossfilter\n      console.log('BUILD crossfilter')\n      this.cfDemand = crossfilter(results.data)\n      this.cfDemandLink = this.cfDemand.dimension((d: any) => d.linkIdsSincePreviousStop)\n\n      // build link-level passenger ridership\n      console.log('COUNTING RIDERSHIP')\n\n      const linkPassengersById = {} as any\n      const group = this.cfDemandLink.group()\n      group\n        .reduceSum((d: any) => d.passengersAtArrival)\n        .all()\n        .map(link => {\n          linkPassengersById[link.key as any] = link.value\n        })\n\n      // and pax load-factors\n      const capacity = {} as any\n      group\n        .reduceSum((d: any) => d.totalVehicleCapacity)\n        .all()\n        .map(link => {\n          capacity[link.key as any] = link.value\n        })\n\n      // update passenger value in the transit-link geojson.\n      for (const transitLink of this._transitLinks.features) {\n        transitLink.properties['pax'] = linkPassengersById[transitLink.properties.id]\n        transitLink.properties['cap'] = capacity[transitLink.properties.id]\n        transitLink.properties['loadfac'] =\n          Math.round(\n            (1000 * linkPassengersById[transitLink.properties.id]) /\n              capacity[transitLink.properties.id]\n          ) / 1000\n      }\n\n      this.metrics = this.metrics.concat([\n        { field: 'pax', name_en: 'Passengers', name_de: 'Passagiere' },\n        { field: 'loadfac', name_en: 'Load Factor', name_de: 'Auslastung' },\n      ])\n\n      const source = this.mymap.getSource('transit-source') as GeoJSONSource\n      source.setData(this._transitLinks)\n\n      this.loadingText = ''\n      return []\n    },\n\n    async processInputs(networks: NetworkInputs) {\n      this.loadingText = 'Preparing...'\n      // spawn transit helper web worker\n      this._transitHelper = new TransitSupplyWorker()\n\n      this._transitHelper.onmessage = async (buffer: MessageEvent) => {\n        this.receivedProcessedTransit(buffer)\n      }\n\n      this._transitHelper.postMessage({\n        xml: networks,\n        projection: this.projection,\n      })\n    },\n\n    async receivedProcessedTransit(buffer: MessageEvent) {\n      if (buffer.data.status) {\n        this.loadingText = buffer.data.status\n        return\n      }\n\n      if (buffer.data.error) {\n        console.error(buffer.data.error)\n        this.$emit('error', '' + buffer.data.error)\n        this.loadingText = ''\n        return\n      }\n\n      const { network, routeData, stopFacilities, transitLines, mapExtent } = buffer.data\n\n      this._network = network\n      this._routeData = routeData\n      this._stopFacilities = stopFacilities\n      this._transitLines = transitLines\n      this._mapExtentXYXY = mapExtent\n\n      this._transitHelper.terminate()\n\n      this.loadingText = 'Summarizing departures...'\n\n      // Use custom colors if they exist, otherwise use defaults\n      if (this.vizDetails.customRouteTypes && this.vizDetails.customRouteTypes.length > 0) {\n        this.routeColors = this.vizDetails.customRouteTypes\n      } else {\n        this.routeColors = DEFAULT_ROUTE_COLORS\n      }\n\n      await this.processDepartures()\n\n      // Build the links layer and add it\n      this._transitLinks = await this.constructDepartureFrequencyGeoJson()\n      this.addTransitToMap(this._transitLinks)\n\n      this.handleClickedMetric({ field: 'departures' })\n\n      localStorage.setItem(this.$route.fullPath + '-bounds', JSON.stringify(this._mapExtentXYXY))\n      this.mymap.fitBounds(this._mapExtentXYXY, { animate: false })\n\n      if (this.vizDetails.demand) await this.loadDemandData(this.vizDetails.demand)\n\n      this.loadingText = ''\n    },\n\n    async processDepartures() {\n      this.loadingText = 'Processing departures...'\n\n      for (const id in this._transitLines) {\n        if (this._transitLines.hasOwnProperty(id)) {\n          const transitLine = this._transitLines[id]\n          for (const route of transitLine.transitRoutes) {\n            for (const linkID of route.route) {\n              if (!(linkID in this._departures))\n                this._departures[linkID] = { total: 0, routes: new Set() }\n\n              this._departures[linkID].total += route.departures\n              this._departures[linkID].routes.add(route.id)\n\n              this._maximum = Math.max(this._maximum, this._departures[linkID].total)\n            }\n          }\n        }\n      }\n    },\n\n    setTransitLayerOpacity(opacity: number) {\n      const layer = this.mymap.getLayer('transit-link')\n      if (!layer) return\n\n      this.mymap.setPaintProperty('transit-link', 'line-opacity', opacity)\n      this.mymap.setPaintProperty(\n        'transit-link',\n        'line-color',\n        opacity == 1 ? ['get', 'color'] : '#888888'\n      )\n    },\n\n    showAllTransit(show: boolean) {\n      if (!show) {\n        if (this.mymap.getLayer('transit-link')) this.mymap.removeLayer('transit-link')\n        return\n      }\n\n      if (!this.mymap.getLayer('transit-link')) {\n        this.mymap.addLayer({\n          id: 'transit-link',\n          source: 'transit-source',\n          type: 'line',\n          paint: {\n            'line-opacity': 1.0,\n            'line-width': 1,\n            'line-color': ['get', 'color'],\n          },\n        })\n      }\n\n      this.mymap.on('click', 'transit-link', (e: maplibregl.MapMouseEvent) => {\n        this.clickedOnTransitLink(e)\n      })\n\n      // turn \"hover cursor\" into a pointer, so user knows they can click.\n      this.mymap.on('mousemove', 'transit-link', (e: maplibregl.MapLayerMouseEvent) => {\n        this.mymap.getCanvas().style.cursor = e ? 'pointer' : 'grab'\n        this.hoveredOnElement(e)\n      })\n\n      // and back to normal when they mouse away\n      this.mymap.on('mouseleave', 'transit-link', () => {\n        this.mymap.getCanvas().style.cursor = 'grab'\n        this.mapPopup.remove()\n      })\n\n      this.drawMetric()\n    },\n\n    addTransitToMap(geodata: any) {\n      this._geoTransitLinks = geodata\n\n      this.mymap.addSource('transit-source', {\n        data: geodata,\n        type: 'geojson',\n      } as any)\n\n      this.showAllTransit(true)\n    },\n\n    hoveredOnElement(event: any) {\n      const props = event.features[0].properties\n\n      let content = '<div class=\"map-popup\">'\n\n      for (const metric of this.metrics) {\n        let label = this.$i18n.locale == 'de' ? metric.name_de : metric.name_en\n        label = label.replaceAll(' ', '&nbsp;')\n\n        if (!isNaN(props[metric.field]))\n          content += `\n          <div style=\"display: flex\">\n            <div>${label}:&nbsp;&nbsp;</div>\n            <b style=\"margin-left: auto; text-align: right\">${props[metric.field]}</b>\n          </div>`\n      }\n\n      content += '<div>'\n      this.mapPopup.setLngLat(event.lngLat).setHTML(content).addTo(this.mymap)\n    },\n\n    async constructDepartureFrequencyGeoJson() {\n      const geojson = []\n      this.usedLabels = []\n\n      for (const linkID in this._departures) {\n        if (this._departures.hasOwnProperty(linkID)) {\n          const link = this._network.links[linkID] as any\n          if (link == undefined) continue\n\n          let coordinates\n\n          try {\n            if (this.avroNetwork) {\n              // link is an INDEX to the link column arrays\n              const nodeFrom = this.avroNetwork.from[link]\n              const nodeTo = this.avroNetwork.to[link]\n\n              const coordsFrom = this.avroNetwork.__nodes[nodeFrom]\n              const coordsTo = this.avroNetwork.__nodes[nodeTo]\n              coordinates = [coordsFrom, coordsTo]\n            } else {\n              // link is an object with values\n              coordinates = [\n                [this._network.nodes[link.from].x, this._network.nodes[link.from].y],\n                [this._network.nodes[link.to].x, this._network.nodes[link.to].y],\n              ]\n            }\n          } catch (e) {\n            console.warn('' + e)\n            continue\n          }\n\n          const departures = this._departures[linkID].total\n\n          // shift scale from 0->1 to 0.25->1.0, because dark blue is hard to see on a black map\n          // const ratio = 0.25 + (0.75 * (departures - 1)) / this._maximum\n          // const colorBin = Math.floor(COLOR_CATEGORIES * ratio)\n\n          let isRail = true\n          let color = '#888'\n          let hideThisLine = false // stores if this line should be hidden\n\n          for (const route of this._departures[linkID].routes) {\n            const props = this._routeData[route] as any\n\n            // all match entries must match to select a color\n            for (const config of this.routeColors) {\n              hideThisLine = false\n              if (config.hide) hideThisLine = true\n\n              let matched = true\n              for (const [key, pattern] of Object.entries(config.match) as any[]) {\n                const valueForThisProp = props[key]\n                // quit if route doesn't include this match property\n                if (!valueForThisProp) {\n                  matched = false\n                  break\n                }\n\n                // because the gtfsRouteType is an integer or an integer array micromatch doesn't work\n                if (key === 'gtfsRouteType') {\n                  if (Array.isArray(pattern)) {\n                    // array of gtfs values\n                    if (!pattern.includes(valueForThisProp)) {\n                      matched = false\n                      break\n                    }\n                  } else {\n                    // numeric - just one value\n                    if (valueForThisProp !== pattern) {\n                      matched = false\n                      break\n                    }\n                  }\n                } else {\n                  // text-match the pattern\n                  if (!match.isMatch(valueForThisProp, pattern)) {\n                    matched = false\n                    break\n                  }\n                }\n              }\n              // Set color and quit searching after first successful match\n              // the label will only be added if the route should not be hidden\n              if (matched) {\n                color = config.color\n                if (!this.usedLabels.includes(config.label) && !hideThisLine)\n                  this.usedLabels.push(config.label)\n                break\n              }\n            }\n            // no rules matched; sad!\n            if (color == '#888') console.log('OHE NOES', route)\n          }\n\n          let line = {\n            type: 'Feature',\n            geometry: {\n              type: 'LineString',\n              coordinates: coordinates,\n            },\n            properties: {\n              color: color, // isRail ? '#a03919' : _colorScale[colorBin],\n              // colorBin: colorBin,\n              departures: departures,\n              // pax: 0,\n              // loadfac: 0,\n              // cap: 0,\n              id: linkID,\n              isRail: isRail,\n              from: link.from, // _stopFacilities[fromNode].name || fromNode,\n              to: link.to, // _stopFacilities[toNode].name || toNode,\n            },\n          }\n\n          line = this.offsetLineByMeters(line, 15)\n\n          // Add the line to the geojson array only if the line should not be hidden\n          if (!hideThisLine) geojson.push(line)\n        }\n      }\n\n      geojson.sort(function (a: any, b: any) {\n        if (a.isRail && !b.isRail) return -1\n        if (b.isRail && !a.isRail) return 1\n        return 0\n      })\n\n      return { type: 'FeatureCollection', features: geojson }\n    },\n\n    offsetLineByMeters(line: any, metersToTheRight: number) {\n      try {\n        const offsetLine = turf.lineOffset(line, metersToTheRight, { units: 'meters' })\n        return offsetLine\n      } catch (e) {\n        // offset can fail if points are exactly on top of each other; ignore.\n      }\n      return line\n    },\n\n    removeStopMarkers() {\n      this.stopMarkers = []\n      this.stopHTML.html = ''\n    },\n\n    showTransitStops() {\n      this.removeStopMarkers()\n\n      const route = this.selectedRoute\n      const stopSizeClass = 'stopmarker' // this.mymap.getZoom() > SHOW_STOPS_AT_ZOOM_LEVEL ? 'stop-marker-big' : 'stop-marker'\n      const mapBearing = this.mymap.getBearing()\n\n      let bearing\n\n      const markers = []\n\n      for (const [i, stop] of route.routeProfile.entries()) {\n        const stopFacility = this._stopFacilities[stop.refId]\n        const coord = [stopFacility.x, stopFacility.y]\n        // const coord = [this._stopFacilities[stop.refId].x, this._stopFacilities[stop.refId].y]\n\n        // recalc bearing for every node except the last\n        if (i < route.routeProfile.length - 1) {\n          const point1 = turf.point([coord[0], coord[1]])\n          const point2 = turf.point([\n            this._stopFacilities[route.routeProfile[i + 1].refId].x,\n            this._stopFacilities[route.routeProfile[i + 1].refId].y,\n          ])\n          bearing = turf.bearing(point1, point2) - mapBearing // so icons rotate along with map\n        }\n\n        const xy = this.mymap.project([coord[0], coord[1]])\n\n        // every marker has a latlng coord and a bearing\n        const marker = {\n          i,\n          bearing,\n          xy: { x: Math.floor(xy.x), y: Math.floor(xy.y) },\n          name: stopFacility.name || '',\n          id: stopFacility.id || '',\n          linkRefId: stopFacility.linkRefId || '',\n        }\n        markers.push(marker)\n      }\n      this.stopMarkers = markers\n    },\n\n    showTransitRoute(routeID: string) {\n      if (!routeID) return\n\n      this.stopHTML.html = ''\n\n      const route = this._routeData[routeID]\n      // console.log({ selectedRoute: route })\n\n      this.selectedRoute = route\n\n      const source = this.mymap.getSource('selected-route-data') as GeoJSONSource\n      if (source) {\n        source.setData(route.geojson)\n      } else {\n        this.mymap.addSource('selected-route-data', {\n          data: route.geojson,\n          type: 'geojson',\n        })\n      }\n\n      if (!this.mymap.getLayer('selected-route')) {\n        this.mymap.addLayer({\n          id: 'selected-route',\n          source: 'selected-route-data',\n          type: 'line',\n          paint: {\n            'line-opacity': 1.0,\n            'line-width': 7, // ['get', 'width'],\n            'line-color': '#fbff66', // 95f', // ['get', 'color'],\n          },\n        })\n      }\n    },\n\n    removeSelectedRoute() {\n      if (this.selectedRoute) {\n        try {\n          if (this.mymap.getLayer('selected-route')) this.mymap.removeLayer('selected-route')\n        } catch (e) {\n          // oh well\n        }\n        this.selectedRoute = null\n      }\n    },\n\n    clickedOnTransitLink(e: any) {\n      this.removeStopMarkers()\n      this.removeSelectedRoute()\n\n      // the browser delivers some details that we need, in the fn argument 'e'\n      const props = e.features[0].properties\n\n      console.log('CLICKED ON', props.id)\n\n      const routeIDs = this._departures[props.id].routes\n\n      this.calculatePassengerVolumes(props.id)\n\n      const routes = []\n      for (const id of routeIDs) {\n        routes.push(this._routeData[id])\n      }\n\n      // sort by highest departures first\n      routes.sort(function (a, b) {\n        return a.departures > b.departures ? -1 : 1\n      })\n\n      this.routesOnLink = routes\n      this.highlightAllAttachedRoutes()\n\n      // highlight the first route, if there is one\n      if (routes.length > 0) this.showRouteDetails(routes[0].id)\n\n      this.setTransitLayerOpacity(0.2)\n    },\n\n    calculatePassengerVolumes(id: string) {\n      let empty = { departures: 0, pax: 0, loadfac: 0 }\n\n      const found = this._transitLinks.features.find((link: any) => link.properties.id == id)\n\n      console.log({ found })\n\n      this.summaryStats = found ? found.properties : empty\n    },\n\n    //   if (!this.cfDemandLink || !this.cfDemand) return\n\n    //   this.cfDemandLink.filter(id)\n\n    //   const allLinks = this.cfDemand.allFiltered()\n    //   let sum = 0\n\n    //   allLinks.map(d => {\n    //     // sum = sum + d.passengersBoarding + d.passengersAtArrival - d.passengersAlighting\n    //     sum += d.passengersAtArrival\n    //   })\n\n    //   console.log({ sum, allLinks })\n    //   this.currentLinkPax = sum\n    // },\n\n    removeAttachedRoutes() {\n      for (const layerID of this._attachedRouteLayers) {\n        try {\n          this.mymap.removeLayer('route-' + layerID)\n          this.mymap.removeSource('source-route-' + layerID)\n        } catch (e) {\n          //meh\n        }\n      }\n      this._attachedRouteLayers = []\n    },\n\n    highlightAllAttachedRoutes() {\n      this.removeAttachedRoutes()\n\n      for (const route of this.routesOnLink) {\n        this.mymap.addSource('source-route-' + route.id, {\n          data: route.geojson,\n          type: 'geojson',\n        })\n        this.mymap.addLayer({\n          id: 'route-' + route.id,\n          source: 'source-route-' + route.id,\n          type: 'line',\n          paint: {\n            'line-opacity': 0.9,\n            'line-width': 10, // ['get', 'width'],\n            'line-color': '#44c378', // '#ccff33', // ['get', 'color'],\n          },\n        })\n        this._attachedRouteLayers.push(route.id)\n        this.mymap.on('click', 'route-' + route.id, (e: maplibregl.MapMouseEvent) => {\n          console.log('click!', e)\n          this.clickedOnTransitLink(e)\n        })\n      }\n    },\n\n    pressedEscape() {\n      this.removeSelectedRoute()\n      this.removeStopMarkers()\n      this.removeAttachedRoutes()\n\n      this.selectedRoute = null\n      this.routesOnLink = []\n    },\n\n    pressedArrowKey(delta: number) {\n      if (!this.selectedRoute) return\n\n      let i = this.routesOnLink.indexOf(this.selectedRoute)\n      i = i + delta\n\n      if (i < 0 || i >= this.routesOnLink.length) return\n\n      this.showRouteDetails(this.routesOnLink[i].id)\n    },\n\n    clearData() {\n      this._attachedRouteLayers = []\n      this._departures = {}\n      this._mapExtentXYXY = [180, 90, -180, -90]\n      this._maximum = 0\n      this._network = { nodes: {}, links: {} }\n      this._routeData = {}\n      this._stopFacilities = {}\n      this._transitLinks = null\n      this._transitLines = {}\n      this.selectedRoute = null\n      this.cfDemand = null\n      this.cfDemandLink?.dispose()\n      this.resolvers = {}\n      this.routesOnLink = []\n      this.selectedRoute = {}\n      this.stopMarkers = []\n      this._linkData = null\n      this._geoTransitLinks = null\n    },\n  },\n\n  async mounted() {\n    this.$store.commit('setFullScreen', !this.thumbnail)\n\n    this.debounceHandleSearchText = debounce(this.handleSearchText, 350)\n    this.clearData()\n\n    this._roadFetcher = new NewXmlFetcher()\n    this._transitFetcher = new NewXmlFetcher()\n    this._transitHelper = new TransitSupplyWorker()\n\n    // populate props after we attach, not before!\n    this.myState.subfolder = this.subfolder\n    this.myState.yamlConfig = this.yamlConfig ?? ''\n    this.myState.thumbnail = this.thumbnail\n\n    const status = await this.getVizDetails()\n    if (!status) return\n\n    if (this.thumbnail) return\n\n    await this.prepareView()\n    this.setupMap()\n  },\n\n  beforeDestroy() {\n    if (this.mymap) this.mymap.remove()\n\n    this.clearData()\n\n    if (this.xmlWorker) this.xmlWorker.terminate()\n    if (this._roadFetcher) this._roadFetcher.terminate()\n    if (this._transitFetcher) this._transitFetcher.terminate()\n    if (this._transitHelper) this._transitHelper.terminate()\n\n    this.$store.commit('setFullScreen', false)\n  },\n})\n\nconst _colorScale = colormap({ colormap: 'viridis', nshades: COLOR_CATEGORIES })\n\nexport default MyComponent\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.mapboxgl-popup-content {\n  padding: 0px 20px 0px 0px;\n  opacity: 0.95;\n  box-shadow: 0 0 3px #00000080;\n}\n\nh4,\np {\n  margin: 0px 0px;\n}\n\n.transit-popup {\n  padding: 0px 0px;\n  margin: 0px 0px;\n  border-style: solid;\n  border-width: 0px 0px 0px 20px;\n}\n\n.transit-viz {\n  position: relative;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  min-height: $thumbnailHeight;\n  // background: url('assets/thumbnail.jpg') no-repeat;\n  background-size: cover;\n  // pointer-events: none;\n}\n\n.map-container {\n  position: relative;\n  flex: 1;\n  pointer-events: auto;\n  background: url('assets/thumbnail.jpg') no-repeat;\n  background-color: #eee;\n  background-size: cover;\n  min-height: $thumbnailHeight;\n}\n\n.hide-thumbnail {\n  background: none;\n  z-index: 0;\n}\n\n.control-panel {\n  position: absolute;\n  bottom: 0;\n  display: flex;\n  flex-direction: row;\n  font-size: 0.8rem;\n  margin: 0 0 0.5rem 0.5rem;\n  pointer-events: auto;\n  background-color: var(--bgPanel);\n  padding: 0.5rem 0.5rem;\n  filter: drop-shadow(0px 2px 4px #22222233);\n}\n\n.is-dashboard {\n  position: static;\n  margin: 0 0;\n  padding: 0.25rem 0 0 0;\n  filter: unset;\n  background-color: unset;\n}\n\n.legend {\n  background-color: var(--bgPanel);\n  padding: 0.25rem 0.5rem;\n}\n\n.control-label {\n  margin: 0 0;\n  font-size: 0.8rem;\n  font-weight: bold;\n}\n\n.route {\n  padding: 5px 0px;\n  text-align: left;\n  color: var(--text);\n}\n\n.route:hover {\n  background-color: var(--bgCream3);\n  cursor: pointer;\n}\n\nh3 {\n  margin: 0px 0px;\n  font-size: 1.5rem;\n  line-height: 1.7rem;\n}\n\n.route-title {\n  font-weight: bold;\n  line-height: 1.2rem;\n  margin: 0 0.25rem;\n  color: var(--link);\n}\n\n.stopmarker {\n  width: 12px;\n  height: 12px;\n  cursor: pointer;\n}\n\n.stop-marker-big {\n  background: url('assets/icon-stop-triangle.png') no-repeat;\n  background-size: 100%;\n  width: 16px;\n  height: 16px;\n}\n\n.highlightedRoute {\n  background-color: #faffae;\n  color: black;\n}\n\n.highlightedRoute:hover {\n  background-color: #faffae;\n}\n\n.bigtitle {\n  font-weight: bold;\n  font-style: italic;\n  font-size: 20px;\n  margin: 20px 0px;\n}\n\n.info-header {\n  text-align: center;\n  background-color: #097c43;\n  padding: 0.5rem 0rem;\n  border-top: solid 1px #888;\n  border-bottom: solid 1px #888;\n}\n\n.project-summary-block {\n  width: 16rem;\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  margin: 0px auto auto 0px;\n  z-index: 10;\n}\n\n@keyframes slideInFromLeft {\n  from {\n    transform: translateX(-100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n\n.stop-html {\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: var(--bgPanel);\n  padding: 0.25rem;\n  line-height: 1.1rem;\n  z-index: 2;\n}\n\n.stop-marker {\n  position: absolute;\n  width: 12px;\n  height: 12px;\n  background: url('assets/icon-stop-triangle.png') no-repeat;\n  transform: translate(-50%, -50%);\n  background-size: 100%;\n  // pointer-events: none;\n  z-index: 1;\n  cursor: pointer;\n}\n\n.help-text {\n  color: #ccc;\n}\n\n.panel-items {\n  flex: 1;\n  color: var(--text);\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  position: relative;\n  margin: 0;\n  font-size: 0.9rem;\n}\n\n.panel-item {\n  display: flex;\n  flex-direction: column;\n\n  h3 {\n    padding: 0.5rem 1rem 1.5rem 0.5rem;\n  }\n}\n\n.route-list {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  user-select: none;\n  overflow-x: hidden;\n  cursor: pointer;\n  scrollbar-color: #888 var(--bgCream);\n  -webkit-scrollbar-color: #888 var(--bgCream);\n  width: 100%;\n\n  h3 {\n    font-size: 1.2rem;\n  }\n}\n\n.dashboard-panel {\n  display: flex;\n  flex-direction: column;\n}\n\n.metric-buttons {\n  display: flex;\n  flex-direction: row;\n  gap: 0px;\n  margin: 0.25rem 0.5rem 0.25rem 0;\n}\n\n.metric-button {\n  border-radius: 0;\n  flex: 1;\n}\n\n.detailed-route-data {\n  display: flex;\n  flex-direction: row;\n  padding: 0 0.25rem;\n}\n\n.col {\n  display: flex;\n  flex-direction: column;\n  line-height: 1.1rem;\n}\n\n.map-styles {\n  height: 100%;\n}\n\n.status-corner {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 15;\n  display: flex;\n  flex-direction: row;\n  background-color: var(--bgPanel);\n  padding: 0rem 3rem;\n  margin: auto auto;\n  width: 25rem;\n  height: 4rem;\n  border: 3px solid #cccccc80;\n  // filter: $filterShadow;\n\n  a {\n    color: white;\n    text-decoration: none;\n\n    &.router-link-exact-active {\n      color: white;\n    }\n  }\n\n  p {\n    color: var(--textFancy);\n    font-weight: normal;\n    font-size: 1.3rem;\n    line-height: 2.6rem;\n    margin: auto auto auto auto;\n    padding: 0 0;\n    text-align: center;\n  }\n}\n\n.main-layout {\n  display: grid;\n  // one unit, full height/width. Layers will go on top:\n  grid-template-rows: 1fr;\n  grid-template-columns: 1fr auto auto;\n  min-height: $thumbnailHeight;\n  height: 100%;\n  background-color: var(--bg);\n}\n\n.map-layout.hide-thumbnail {\n  background: unset;\n  z-index: 0;\n}\n\n.area-map {\n  grid-row: 1 / 2;\n  grid-column: 1 / 2;\n  background-color: var(--bgBold);\n  position: relative;\n}\n\n.map-layers {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.dragger {\n  grid-row: 1 / 2;\n  grid-column: 2 / 3;\n  width: 0.5rem;\n  background-color: var(--bgBold);\n  user-select: none;\n  z-index: 20;\n}\n\n.dragger:hover,\n.dragger:active {\n  background-color: var(--sliderThumb);\n  transition: background-color 0.3s ease;\n  transition-delay: 0.1s;\n  cursor: ew-resize;\n}\n\n.link-summary {\n  margin-bottom: 1rem;\n  margin-right: 0.5rem;\n  // border: 1px solid #80808066;\n  // padding: 0.25rem;\n}\n\n.searchbox {\n  margin-top: 0.25rem;\n}\n\n.new-rightside-info-panel {\n  grid-row: 1 / 2;\n  grid-column: 3 / 4;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--bgCardFrame);\n\n  .legend {\n    margin: 0.5rem 0.25rem 0.25rem 0rem;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--bgCardFrame);\n    border: 1px solid #88888844;\n    .description {\n      margin-top: 0.5rem;\n    }\n  }\n\n  .tooltip-html {\n    font-size: 0.8rem;\n    padding: 0.25rem;\n    text-align: left;\n    background-color: var(--bgCardFrame);\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    border-top: 1px solid #88888880;\n  }\n}\n</style>\n"],"names":["_sfc_main$1","defineComponent","_sfc_main","i18n","DEFAULT_PROJECTION","COLOR_CATEGORIES","DEFAULT_ROUTE_COLORS","MyComponent","CollapsiblePanel","LeftDataPanel","LegendBox","DrawingTool","ZoomButtons","metrics","Popup","DashboardDataManager","globalStore","HTTPFileSystem","svnProject","a","r","bearing","longitude","latitude","zoom","pitch","ColorScheme","foundRoutes","searchTerm","routeID","id","stop","e","lines","attr","deltaX","_a","_b","title","files","network","allNetworks","f","demandFiles","networks","_c","_e","_d","_i","_h","_g","_f","_l","_k","_j","storagePath","goodEPSG","outputConfigs","xmlConfigFileName","p","entry","networkProjection","filename","text","yaml","err","msg","w","d","g","x","maplibregl","extent","lnglat","mFac","padding","widthExpression","metric","mapCamera","force","projection","event","props","xmlWorker","message","resolve","reject","blob","records","rows","avro","schema","row","roads","transit","results","worker","GzipWorker","csvData","Papa","crossfilter","linkPassengersById","group","link","capacity","transitLink","TransitSupplyWorker","buffer","routeData","stopFacilities","transitLines","mapExtent","transitLine","route","linkID","opacity","show","geodata","content","label","geojson","coordinates","nodeFrom","nodeTo","coordsFrom","coordsTo","departures","isRail","color","hideThisLine","config","matched","key","pattern","valueForThisProp","match","line","b","metersToTheRight","turf.lineOffset","mapBearing","markers","i","stopFacility","coord","point1","turf.point","point2","turf.bearing","xy","marker","source","routeIDs","routes","empty","found","layerID","delta","debounce","NewXmlFetcher","colormap"],"mappings":"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"}