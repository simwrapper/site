{"version":3,"file":"ModalIdColumnPicker-cf633da6.js","sources":["../../node_modules/reproject/index.js","../../node_modules/@deck.gl/layers/src/geojson-layer/sub-layer-map.ts","../../src/layers/GeojsonOffsetLayer.ts","../../src/components/ModalIdColumnPicker.vue"],"sourcesContent":["'use strict';\n\nvar proj4 = require('proj4').hasOwnProperty('default') ? require('proj4').default : require('proj4');\n// Checks if `list` looks like a `[x, y]`.\nfunction isXY(list) {\n  return list.length >= 2 &&\n    typeof list[0] === 'number' &&\n    typeof list[1] === 'number';\n}\n\nfunction traverseCoords(coordinates, callback) {\n  if (isXY(coordinates)) return callback(coordinates);\n  return coordinates.map(function(coord){return traverseCoords(coord, callback);});\n}\n\n// Simplistic shallow clone that will work for a normal GeoJSON object.\nfunction clone(obj) {\n  if (null == obj || 'object' !== typeof obj) return obj;\n  var copy = obj.constructor();\n  for (var attr in obj) {\n    if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n  }\n  return copy;\n}\n\nfunction traverseGeoJson(geometryCb, nodeCb, geojson) {\n  if (geojson == null) return geojson;\n\n  var r = clone(geojson);\n  var self = traverseGeoJson.bind(this, geometryCb, nodeCb);\n\n  switch (geojson.type) {\n  case 'Feature':\n    r.geometry = self(geojson.geometry);\n    break;\n  case 'FeatureCollection':\n    r.features = r.features.map(self);\n    break;\n  case 'GeometryCollection':\n    r.geometries = r.geometries.map(self);\n    break;\n  default:\n    geometryCb(r);\n    break;\n  }\n\n  if (nodeCb) nodeCb(r);\n\n  return r;\n}\n\nfunction detectCrs(geojson, projs) {\n  var crsInfo = geojson.crs,\n      crs;\n\n  if (crsInfo === undefined) {\n    throw new Error('Unable to detect CRS, GeoJSON has no \"crs\" property.');\n  }\n\n  if (crsInfo.type === 'name') {\n    crs = projs[crsInfo.properties.name];\n  } else if (crsInfo.type === 'EPSG') {\n    crs = projs['EPSG:' + crsInfo.properties.code];\n  }\n\n  if (!crs) {\n    throw new Error('CRS defined in crs section could not be identified: ' + JSON.stringify(crsInfo));\n  }\n\n  return crs;\n}\n\nfunction determineCrs(crs, projs) {\n  if (typeof crs === 'string' || crs instanceof String) {\n    return projs[crs] || proj4.Proj(crs);\n  }\n\n  return crs;\n}\n\nfunction calcBbox(geojson) {\n  var min = [Number.MAX_VALUE, Number.MAX_VALUE],\n      max = [-Number.MAX_VALUE, -Number.MAX_VALUE];\n  traverseGeoJson(function(_gj) {\n    traverseCoords(_gj.coordinates, function(xy) {\n      min[0] = Math.min(min[0], xy[0]);\n      min[1] = Math.min(min[1], xy[1]);\n      max[0] = Math.max(max[0], xy[0]);\n      max[1] = Math.max(max[1], xy[1]);\n    });\n  }, null, geojson);\n  return [min[0], min[1], max[0], max[1]];\n}\n\nfunction reproject(geojson, from, to, projs) {\n  projs = projs || {};\n  if (!from) {\n    from = detectCrs(geojson, projs);\n  } else {\n    from = determineCrs(from, projs);\n  }\n\n  to = determineCrs(to, projs);\n  \n  var transformFunc = proj4(from, to).forward.bind(transformFunc);\n\n  function transform(coords) {\n    var transformed = transformFunc(coords);\n    if (coords.length === 3 && coords[2] !== undefined && transformed[2] === undefined) {\n      // If the projection doesn't explicitly handle Z coordinate, retain the old one.\n      transformed[2] = coords[2];\n    }\n    return transformed;\n  }\n\n  var transformGeometryCoords = function(gj) {\n    // No easy way to put correct CRS info into the GeoJSON,\n    // and definitely wrong to keep the old, so delete it.\n    if (gj.crs) {\n      delete gj.crs;\n    }\n    gj.coordinates = traverseCoords(gj.coordinates, transform);\n  }\n\n  var transformBbox = function(gj) {\n    if (gj.bbox) {\n      gj.bbox = calcBbox(gj);\n    }\n  }\n\n  return traverseGeoJson(transformGeometryCoords, transformBbox, geojson);\n}\n\nmodule.exports = {\n  detectCrs: detectCrs,\n\n  reproject: reproject,\n\n  reverse: function(geojson) {\n    return traverseGeoJson(function(gj) {\n      gj.coordinates = traverseCoords(gj.coordinates, function(xy) {\n        return [ xy[1], xy[0] ];\n      });\n    }, null, geojson);\n  },\n\n  toWgs84: function(geojson, from, projs) {\n    return reproject(geojson, from, proj4.WGS84, projs);\n  }\n};\n","import {CompositeLayer, Layer} from '@deck.gl/core';\n\nimport IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n      pointAntialiasing: 'antialiasing',\n      pointBillboard: 'billboard',\n\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n      iconAlphaCutoff: 'alphaCutoff',\n      iconBillboard: 'billboard',\n\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n      textBillboard: 'billboard',\n      textFontSettings: 'fontSettings',\n\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\n\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\n\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\n\nexport function getDefaultProps({\n  type,\n  props\n}: {\n  type: typeof Layer;\n  props: Record<string, string>;\n}): Record<string, any> {\n  const result = {};\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n  return result;\n}\n\nexport function forwardProps(\n  layer: CompositeLayer,\n  mapping: Record<string, string>\n): Record<string, any> {\n  const {transitions, updateTriggers} = layer.props;\n  const result: Record<string, any> = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n    if (sourceKey.startsWith('get')) {\n      // isAccessor\n      value = (layer as any).getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n    result[targetKey] = value;\n  }\n  return result;\n}\n","import { GeoJsonLayer } from '@deck.gl/layers'\nimport PathOffsetLayer from '@/layers/PathOffsetLayer'\nimport { forwardProps } from '@deck.gl/layers/src/geojson-layer/sub-layer-map'\n\nconst OFFSET_TYPE = {\n  NONE: 0,\n  LEFT: 1,\n  RIGHT: 2,\n}\n\nexport const LINE_LAYER = {\n  type: PathOffsetLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth',\n  },\n}\n\nexport default class GeojsonOffsetLayer extends GeoJsonLayer {\n  constructor(props: any) {\n    super(props)\n  }\n\n  // this is copied directly from @deck.gl/layers/geojson-layer\n  _renderLineLayers() {\n    const { extruded, stroked } = this.props\n    const { layerProps } = this.state\n    const polygonStrokeLayerId = 'polygons-stroke'\n    const lineStringsLayerId = 'linestrings'\n\n    const PolygonStrokeLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) &&\n      this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type)\n    const LineStringsLayer =\n      this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) &&\n      this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type)\n\n    if (PolygonStrokeLayer || LineStringsLayer) {\n      const forwardedProps = forwardProps(this, LINE_LAYER.props)\n\n      return [\n        PolygonStrokeLayer &&\n          new PolygonStrokeLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: polygonStrokeLayerId,\n              updateTriggers: forwardedProps.updateTriggers,\n            }),\n            layerProps.polygonsOutline\n          ),\n\n        LineStringsLayer &&\n          new LineStringsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: lineStringsLayerId,\n              updateTriggers: forwardedProps.updateTriggers,\n            }),\n            layerProps.lines\n          ),\n      ]\n    }\n    return null\n  }\n\n  getShaders() {\n    return {\n      ...super.getShaders(),\n      inject: {\n        'vs:#decl': `\n            attribute float instanceOffset;\n            varying float offset;\n            `,\n        'vs:#main-start': `\n            offset = instanceOffset;\n            `,\n        'fs:#decl': `\n            varying float offset;\n            `,\n        'fs:#main-start': `\n            if (offset == 1.0 && vPathPosition.x < 0.0) {\n                discard;\n            }\n            if (offset == 2.0 && vPathPosition.x > 0.0) {\n                discard;\n            }\n            if (offset == 0.0 && abs(vPathPosition.x) > 0.5) {\n                discard;\n            }\n        `,\n      },\n    }\n  }\n}\n\nGeojsonOffsetLayer.layerName = 'GeojsonOffsetLayer'\nGeojsonOffsetLayer.defaultProps = {\n  getOffset: { type: 'accessor', value: OFFSET_TYPE.RIGHT },\n}\n\n// /** DeckGL **/\n// new deck.DeckGL({\n//   container: 'container',\n//   mapboxApiAccessToken: '',\n//   longitude: -122.408,\n//   latitude: 37.785,\n//   zoom: 16,\n//   pitch: 0,\n//   layers: [\n//     new deck.PathLayer({\n//       data:\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/website/bart-lines.json',\n//       getPath: d => d.path,\n//       getColor: [0, 0, 0],\n//       getWidth: 50,\n//     }),\n//     new MyPathLayer({\n//       data:\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/website/bart-lines.json',\n//       getPath: d => d.path,\n//       getColor: [255, 0, 0],\n//       getOffset: (d, { index }) => index % 3,\n//       getWidth: 50,\n//       pickable: true,\n//       autoHighlight: true,\n//     }),\n//   ],\n// })\n","<template lang=\"pug\">\n.join-picker\n  .picker-panel\n    p.header: b Select ID Column\n    p.subheader Which property contains the unique ID for each feature?\n    .split-panel\n      .column\n          p: b {{ data1.title }}\n          .options-box\n            p(v-for=\"(row,i) in columns\" :key=\"'@'+i\"\n              :class=\"{'selected': i===selected1}\"\n              @click=\"selected1=i\"\n            ) {{ row }}\n\n    .buttons\n      .button-holder\n        button.button(@click=\"clickedCancel\") Cancel\n        button.button.is-primary(@click=\"clickedJoin\") Select\n\n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: {},\n    de: {},\n  },\n}\n\ninterface DataSet {\n  title: string\n  columns: string[]\n}\n\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\n// Reasonable guesses as to the ID column in the shapefile\nconst ID_GUESSES = ['id', 'ID', 'TAZ', 'AB']\n\nexport default defineComponent({\n  name: 'ModalJoinColumnPicker',\n  i18n,\n  props: {\n    data1: { type: Object as PropType<DataSet>, required: true },\n  },\n\n  data() {\n    return {\n      selected1: 0,\n    }\n  },\n\n  computed: {\n    columns(): string[] {\n      return [...this.data1.columns].sort()\n    },\n  },\n\n  methods: {\n    clickedJoin() {\n      this.$emit('join', this.columns[this.selected1])\n    },\n\n    clickedCancel() {\n      this.$emit('join', '')\n    },\n  },\n  mounted() {\n    // pick a plausible default for the ID column\n    for (const guess of ID_GUESSES) {\n      const found = this.columns.indexOf(guess)\n      if (found > -1) {\n        this.selected1 = found\n        break\n      }\n    }\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.join-picker {\n  background-color: #000022aa;\n  z-index: 10000;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100vw;\n  height: 100vh;\n  user-select: none;\n  color: #333;\n}\n\n.picker-panel {\n  position: relative;\n  top: 25%;\n  background-color: #dcdce9;\n  max-width: 30rem;\n  margin: 0 auto;\n  box-shadow: 0 2px 24px 5px #00000066;\n  border-radius: 4px;\n}\n\n.split-panel {\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n}\n\n.column {\n  padding: 0 0;\n  margin: 0.5rem 0.75rem;\n}\n\n.options-box {\n  border: 1px solid #bbb;\n  background-color: white;\n  max-height: 20rem;\n  overflow-y: auto;\n}\n\n.options-box p {\n  padding: 0 0.25rem;\n}\n\n.linky {\n  margin-top: 3rem;\n}\n\n.header {\n  background-color: white;\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-size: 1.2rem;\n}\n\np.selected {\n  background-color: #e8ee67;\n}\n\n.subheader {\n  padding: 0.25rem 0.75rem;\n}\n\n.button-holder {\n  margin: 0.25rem 0.75rem 0.25rem auto;\n}\n</style>\n"],"names":["proj4","require$$0","isXY","list","traverseCoords","coordinates","callback","coord","clone","obj","copy","attr","traverseGeoJson","geometryCb","nodeCb","geojson","r","self","detectCrs","projs","crsInfo","crs","determineCrs","calcBbox","min","max","_gj","xy","reproject","from","to","transformFunc","transform","coords","transformed","transformGeometryCoords","gj","transformBbox","reproject_1","forwardProps","layer","mapping","transitions","updateTriggers","result","sourceKey","targetKey","value","OFFSET_TYPE","LINE_LAYER","PathOffsetLayer","GeojsonOffsetLayer","GeoJsonLayer","props","extruded","stroked","layerProps","polygonStrokeLayerId","lineStringsLayerId","PolygonStrokeLayer","LineStringsLayer","forwardedProps","i18n","ID_GUESSES","_sfc_main","defineComponent","guess","found"],"mappings":"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","x_google_ignoreList":[0,1]}