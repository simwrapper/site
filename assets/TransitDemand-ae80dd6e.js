import{d as v,n as k,t as M,g,C,m as R}from"./index-24c2379b.js";import{l as P,p as w,b as O}from"./turf.es-8ac32224.js";import{D as E,a as A}from"./DashboardDataManager-9bea9fc4.js";import{c as $}from"./index-48a773a4.js";import{c as H}from"./index-4018348e.js";import{d as F}from"./index-83bc819c.js";import{P as j}from"./papaparse.min-e0a05c20.js";import{y as z}from"./index-719eff74.js";import{H as N,m as I}from"./HTTPFileSystem-017e7593.js";import{C as W}from"./CollapsiblePanel-4fe937e3.js";import{W as x}from"./NewXmlFetcher.worker-4728f524.js";import{D as X}from"./DrawingTool-6c6ed265.js";import{Z as B}from"./ZoomButtons-85071e8e.js";import{W as Y}from"./GzipFetcher.worker-baaf0850.js";import"./util-8430d78c.js";import"./fxp-b80b6d05.js";import"./RoadNetworkLoader.worker-ba4f3b4d.js";import"./Coords-23d23a7c.js";import"./group-f6e6d4c5.js";import"./index-f6506551.js";import"./layer-7bd8a07e.js";import"./geojson-layer-4489d197.js";import"./text-layer-98e63af8.js";import"./path-layer-7a20967b.js";const G=v({name:"LeftDataPanel",props:{title:String},data:()=>({isHidden:!1,isLeaving:!1}),methods:{toggleHidePanel(){this.isHidden?this.isHidden=!this.isHidden:(this.isLeaving=!0,setTimeout(()=>{this.isHidden=!0,this.isLeaving=!1},300))}}});var V=function(){var t=this,s=t._self._c;return t._self._setupProxy,s("div",{attrs:{id:"datapanel"}},[s("div",{staticClass:"content-area",class:{"is-hidden":t.isHidden,bye:t.isLeaving}},[t.title?s("div",{staticClass:"info-header"},[s("h3",{staticStyle:{padding:"0.5rem 3rem","font-size":"1rem","font-weight":"normal",color:"white"}},[t._v(t._s(t.title))])]):t._e(),s("div",{staticClass:"top-area"},[t._t("default")],2)]),s("div",{staticClass:"restore-button",class:{"add-margin":!t.isHidden}},[s("button",{staticClass:"button is-small hide-button",on:{click:t.toggleHidePanel}},[t.isHidden?t._e():s("i",{staticClass:"fa fa-arrow-left"}),t.isHidden?s("i",{staticClass:"fa fa-arrow-right"}):t._e()])])])},U=[];var q=k(G,V,U,!1,null,"51117d95",null,null);const K=q.exports;function D(){return new Worker("/site/assets/TransitSupplyHelper.worker-7d8a4c8e.js")}const J=v({name:"LegendBox",props:{rows:{type:Array,required:!0}}});var Z=function(){var t=this,s=t._self._c;return t._self._setupProxy,s("div",{staticClass:"legend-container"},[s("p",{staticClass:"control-label"},[t._v("LEGEND")]),t._l(t.rows,function(i){return s("div",{key:i[0],staticClass:"legend-item"},[s("div",{staticClass:"legend-col-1",style:{"background-color":i[0]}}),s("span",{staticClass:"legend-col-2"},[t._v(t._s(i[1]))])])})],2)},Q=[];var tt=k(J,Z,Q,!1,null,"e4039f06",null,null);const et=tt.exports,st={messages:{en:{metrics:"Metrics",viewer:"Transit Network"},de:{metrics:"Metrics",viewer:"Ã–V Netzwerk"}}},it="EPSG:31468",at=10,rt=[{match:{transportMode:"bus"},color:"#95276E",label:"Bus"},{match:{transportMode:"rail",id:"U*"},color:"#115D91",label:"U-Bahn"},{match:{transportMode:"rail",id:"S*"},color:"#408335",label:"S-Bahn"},{match:{transportMode:"rail"},color:"#EC0016 ",label:"Long-distance train services"},{match:{transportMode:"ferry"},color:"#0480c1",label:"Ferry"},{match:{transportMode:"tram"},color:"#BE1414",label:"Tram"},{match:{transportMode:"pt"},color:"#00a",label:"Public Transport"},{match:{id:"**"},color:"#aae",label:"Other"}],ot=v({name:"TransitViewer",i18n:st,components:{CollapsiblePanel:W,LeftDataPanel:K,LegendBox:et,DrawingTool:X,ZoomButtons:B},props:{root:{type:String,required:!0},subfolder:{type:String,required:!0},yamlConfig:String,config:{type:Object},thumbnail:Boolean,datamanager:{type:Object}},data(){const e=[{field:"departures",name_en:"Departures",name_de:"Abfahrten"}];return{searchText:"",isDraggingDivider:0,dragStartWidth:250,legendSectionWidth:250,showLegend:!0,stopHTML:{html:"",x:0,y:0},mapPopup:new M.Popup({closeButton:!1,closeOnClick:!1}),buttonColors:["#5E8AAE","#BF7230","#269367","#9C439C"],metrics:e,activeMetric:e[0].field,vizDetails:{transitSchedule:"",network:"",demand:"",projection:"",title:"",description:"",customRouteTypes:[]},myDataManager:this.datamanager||new E(this.root,this.subfolder),debounceHandleSearchText:{},myState:{subfolder:"",yamlConfig:"",thumbnail:!0},avroNetwork:null,isDarkMode:g.state.isDarkMode,isMapMoving:!1,loadingText:"MATSim Transit Inspector",mymap:null,mapID:`map-id-${Math.floor(1e12*Math.random())}`,projection:it,routesOnLink:[],selectedRoute:null,summaryStats:{departures:0,pax:0,loadfac:0},stopMarkers:[],_attachedRouteLayers:[],_departures:{},_linkData:null,_mapExtentXYXY:null,_maximum:-1/0,_network:{},_routeData:{},_stopFacilities:{},_transitLines:{},_roadFetcher:{},_transitFetcher:{},_transitHelper:{},_transitLinks:null,_geoTransitLinks:null,resolvers:{},resolverId:0,xmlWorker:null,cfDemand:null,cfDemandLink:null,hoverWait:!1,routeColors:[],usedLabels:[]}},computed:{fileApi(){return new N(this.fileSystem,g)},fileSystem(){const e=this.$store.state.svnProjects.filter(t=>t.slug===this.root);if(e.length===0)throw console.log("no such project"),Error;return e[0]},legendRows(){return this.routeColors.filter(e=>this.usedLabels.includes(e.label)).map(e=>[e.color,e.label])}},watch:{searchText(){this.debounceHandleSearchText()},"$store.state.resizeEvents"(){this.mymap&&this.mymap.resize()},"$store.state.viewState"({bearing:e,longitude:t,latitude:s,zoom:i,pitch:r}){if(!this.mymap||this.isMapMoving){this.isMapMoving=!1;return}i&&(this.mymap.off("move",this.handleMapMotion),this.mymap.jumpTo({bearing:e,zoom:i,center:[t,s],pitch:r}),this.mymap.on("move",this.handleMapMotion),this.stopMarkers.length>0&&this.showTransitStops())},"$store.state.colorScheme"(){this.isDarkMode=this.$store.state.colorScheme===C.DarkMode,this.mymap&&(this.removeAttachedRoutes(),this.mymap.setStyle(g.getters.mapStyle),this.mymap.on("style.load",()=>{this._geoTransitLinks&&this.addTransitToMap(this._geoTransitLinks),this.highlightAllAttachedRoutes(),this.selectedRoute&&this.showTransitRoute(this.selectedRoute.id)}))}},methods:{handleSearchText(){this.handleEmptyClick(null,!0);let e=[];const t=this.searchText.trim().toLocaleLowerCase();t&&(e=Object.keys(this._routeData).filter(s=>s.toLocaleLowerCase().indexOf(t)>-1)),this.routesOnLink=e.map(s=>this._routeData[s]),this.highlightAllAttachedRoutes(),this.routesOnLink.length&&(this.selectedRoute=this.routesOnLink[0].id,this.showTransitRoute(this.selectedRoute)),this.setTransitLayerOpacity(t?.2:1)},hoverOverStop(e,t){this.stopHTML.html="";const s=[];e.name&&s.push(`<b>${e.name}</b>`);for(const i of["id","linkRefId"])e[i]&&s.push(`${i}: ${e[i]}`);this.stopHTML.html="<p>"+s.join("<br/>")+"</p>",this.stopHTML.x=e.xy.x+8,this.stopHTML.y=e.xy.y-36},dividerDragStart(e){console.log("dragstart"),this.isDraggingDivider=e.clientX,this.dragStartWidth=this.legendSectionWidth},dividerDragEnd(e){this.isDraggingDivider=0},dividerDragging(e){if(!this.isDraggingDivider)return;const t=this.isDraggingDivider-e.clientX;this.legendSectionWidth=Math.max(0,this.dragStartWidth+t),this.mymap.resize()},async getVizDetails(){var t,s;if(this.config)return this.vizDetails=Object.assign({},this.config),!0;if((t=this.myState.yamlConfig)!=null&&t.endsWith("yaml")||(s=this.myState.yamlConfig)!=null&&s.endsWith("yml"))return this.loadYamlConfig();const e=this.myState.yamlConfig.substring(0,15+this.myState.yamlConfig.indexOf("transitSchedule"));return this.vizDetails={transitSchedule:this.myState.yamlConfig,network:"",title:e,description:"",demand:"",projection:"",customRouteTypes:[]},this.$emit("title",e),!0},async prepareView(){const{files:e}=await this.fileApi.getDirectory(this.myState.subfolder);let t=this.vizDetails.network??this.myState.yamlConfig.replaceAll("transitSchedule","network");if(e.indexOf(t)==-1){const i=e.filter(r=>r.endsWith("network.xml.gz"));i.length?t=i[0]:(this.loadingText="No road network found.",t="")}let s=[];this.myState.yamlConfig.indexOf("output_transitSchedule")>-1&&(s=e.filter(i=>i.endsWith("pt_stop2stop_departures.csv.gz"))),this.vizDetails.network=t,s.length&&(this.vizDetails.demand=s[0])},async guessProjection(e){var n,d,c,m,l,h,f,u,p,S,L,b;if(this.vizDetails.projection)return this.vizDetails.projection;if((n=this.config)!=null&&n.projection)return this.config.projection;if((c=(d=e==null?void 0:e.roadXML)==null?void 0:d.attributes)!=null&&c.coordinateReferenceSystem)return(l=(m=e==null?void 0:e.roadXML)==null?void 0:m.attributes)==null?void 0:l.coordinateReferenceSystem;if(((p=(u=(f=(h=e==null?void 0:e.roadXML)==null?void 0:h.network)==null?void 0:f.attributes)==null?void 0:u.attribute)==null?void 0:p.name)==="coordinateReferenceSystem")return(b=(L=(S=e==null?void 0:e.roadXML)==null?void 0:S.network)==null?void 0:L.attributes)==null?void 0:b.attribute["#text"];const t=`${this.root}/${this.subfolder}`,s=/EPSG:.\d/,{files:i}=await this.fileApi.getDirectory(this.myState.subfolder),r=i.filter(y=>y.indexOf(".output_config.xml")>-1||y.indexOf(".output_config_reduced.xml")>-1);if(r.length&&this.fileSystem)for(const y of r)try{return(await this.fetchXML({worker:null,slug:this.fileSystem.slug,filePath:this.myState.subfolder+"/"+y})).config.module.filter(_=>_.$name==="global")[0].param.filter(_=>_.$name==="coordinateSystem")[0].$value}catch{console.warn("Failed parsing",y)}let a=prompt("Need coordinate EPSG number:","")||"";if(!a)return"";if(Number.isNaN(parseInt(a,10))&&!s.test(a))return this.guessProjection(e);a.startsWith("EPSG:")||(a="EPSG:"+a);const o=a;return localStorage.setItem(t,JSON.stringify({networkProjection:o})),o},async loadYamlConfig(){const e=this.myState.yamlConfig.indexOf("/")>-1?this.myState.yamlConfig:this.myState.subfolder+"/"+this.myState.yamlConfig;try{const s=await this.fileApi.getFileText(e);this.vizDetails=z.parse(s)}catch(s){const i=s;if(this.fileSystem&&this.fileSystem.needPassword&&i.status===401)this.$store.commit("requestLogin",this.fileSystem.slug);else{const r="Could not load "+e;this.$emit("error",r),this.loadingText=r}return!1}const t=this.vizDetails.title?this.vizDetails.title:"Transit Ridership";return this.$emit("title",t),this.projection=this.vizDetails.projection,!0},isMobile(){const e=window,t=document,s=t.documentElement,i=t.getElementsByTagName("body")[0],r=e.innerWidth||s.clientWidth||i.clientWidth;return e.innerHeight||s.clientHeight||i.clientHeight,r<640},setupMap(){try{this.mymap=new R.Map({bearing:0,container:this.mapID,logoPosition:"bottom-left",style:g.getters.mapStyle,pitch:0});const e=localStorage.getItem(this.$route.fullPath+"-bounds");if(e)try{const t=JSON.parse(e),s=this.isMobile()?0:1,i={top:50*s,bottom:50*s,right:50*s,left:50*s};this.mymap.fitBounds(t,{animate:!1,padding:i})}catch{}this.mymap.on("load",this.mapIsReady),this.mymap.on("move",this.handleMapMotion),this.mymap.on("click",this.handleEmptyClick),this.mymap.keyboard.disable()}catch(e){console.error(""+e)}},drawMetric(){let e=3;switch(this.activeMetric){case"departures":e=["max",2,["*",.03,["get","departures"]]];break;case"pax":e=["max",2,["*",.003,["get","pax"]]];break;case"loadfac":e=["max",2,["*",200,["get","loadfac"]]];break}this.mymap.setPaintProperty("transit-link","line-width",e)},handleClickedMetric(e){console.log("transit metric:",e.field),this.activeMetric=e.field,this.drawMetric()},handleMapMotion(){const e={longitude:this.mymap.getCenter().lng,latitude:this.mymap.getCenter().lat,bearing:this.mymap.getBearing(),zoom:this.mymap.getZoom(),pitch:this.mymap.getPitch()};this.isMapMoving||this.$store.commit("setMapCamera",e),this.isMapMoving=!0,this.stopMarkers.length>0&&this.showTransitStops(),this.stopHTML.html=""},handleEmptyClick(e,t){this.setTransitLayerOpacity(1),t||(this.searchText=""),!(this.searchText&&!t)&&(this.removeStopMarkers(),this.removeSelectedRoute(),this.removeAttachedRoutes(),this.routesOnLink=[],this.stopHTML.html="",this.summaryStats={departures:0,pax:0,loadfac:0})},showRouteDetails(e){!e&&!this.selectedRoute||(console.log({routeID:e}),e?this.showTransitRoute(e):this.showTransitRoute(this.selectedRoute.id),this.showTransitStops())},async mapIsReady(){const e=await this.loadNetworks(),t=await this.guessProjection(e);this.vizDetails.projection=t,this.projection=this.vizDetails.projection,e&&this.processInputs(e)},setupKeyListeners(){window.addEventListener("keyup",e=>{e.keyCode===27&&this.pressedEscape()}),window.addEventListener("keydown",e=>{e.keyCode===38&&this.pressedArrowKey(-1),e.keyCode===40&&this.pressedArrowKey(1)})},fetchXML(e){let t=e.worker;t.onmessage=r=>{const{resolve:a,reject:o}=this.resolvers[r.data.id];t.terminate(),r.data.error&&o(r.data.error),a(r.data.xml)};const s=this.resolverId++;return t.postMessage({id:s,fileSystem:this.fileSystem,filePath:e.filePath,options:e.options}),new Promise((r,a)=>{this.resolvers[s]={resolve:r,reject:a}})},async updateStatus(e){this.loadingText=e},async loadAvroRoadNetwork(){const e=`${this.subfolder}/${this.vizDetails.network}`,t=await this.fileApi.getFileBlob(e),s=await new Promise((i,r)=>{const a=[];A.createBlobDecoder(t).on("metadata",o=>{}).on("data",o=>{a.push(o)}).on("end",()=>{i(a)})});return this.avroNetwork=s[0],s[0]},async loadNetworks(){try{if(!this.fileSystem||!this.vizDetails.network||!this.vizDetails.transitSchedule)return;this.loadingText="Loading networks...";const t=this.vizDetails.network.indexOf(".avro")>-1?this.loadAvroRoadNetwork():this.fetchXML({worker:this._roadFetcher,slug:this.fileSystem.slug,filePath:this.myState.subfolder+"/"+this.vizDetails.network,options:{attributeNamePrefix:""}}),s=this.fetchXML({worker:this._transitFetcher,slug:this.fileSystem.slug,filePath:this.myState.subfolder+"/"+this.vizDetails.transitSchedule,options:{attributeNamePrefix:"",alwaysArray:["transitSchedule.transitLine.transitRoute","transitSchedule.transitLine.transitRoute.departures.departure"]}}),i=await Promise.all([t,s]);return{roadXML:i[0],transitXML:i[1],ridership:[]}}catch(e){return console.error("TRANSIT:",e),this.loadingText,this.$emit("error",""+e),null}},loadDemandData(e){return new Promise((s,i)=>{e||s([]),this.loadingText="Loading demand...";const r=new Y;r.onmessage=a=>{if(this.loadingText="Processing demand...",r.terminate(),a.data.error){this.$emit("error",a.data.error),this.loadingText="";return}const o=new TextDecoder("utf-8").decode(a.data);j.parse(o,{header:!0,skipEmptyLines:!0,dynamicTyping:!0,worker:!0,complete:n=>{s(this.processDemand(n))}})},r.postMessage({filePath:this.myState.subfolder+"/"+e,fileSystem:this.fileSystem})})},processDemand(e){this.loadingText="Processing demand data...",console.log("BUILD crossfilter"),this.cfDemand=H(e.data),this.cfDemandLink=this.cfDemand.dimension(a=>a.linkIdsSincePreviousStop),console.log("COUNTING RIDERSHIP");const t={},s=this.cfDemandLink.group();s.reduceSum(a=>a.passengersAtArrival).all().map(a=>{t[a.key]=a.value});const i={};s.reduceSum(a=>a.totalVehicleCapacity).all().map(a=>{i[a.key]=a.value});for(const a of this._transitLinks.features)a.properties.pax=t[a.properties.id],a.properties.cap=i[a.properties.id],a.properties.loadfac=Math.round(1e3*t[a.properties.id]/i[a.properties.id])/1e3;return this.metrics=this.metrics.concat([{field:"pax",name_en:"Passengers",name_de:"Passagiere"},{field:"loadfac",name_en:"Load Factor",name_de:"Auslastung"}]),this.mymap.getSource("transit-source").setData(this._transitLinks),this.loadingText="",[]},async processInputs(e){this.loadingText="Preparing...",this._transitHelper=new D,this._transitHelper.onmessage=async t=>{this.receivedProcessedTransit(t)},this._transitHelper.postMessage({xml:e,projection:this.projection})},async receivedProcessedTransit(e){if(e.data.status){this.loadingText=e.data.status;return}if(e.data.error){console.error(e.data.error),this.$emit("error",""+e.data.error),this.loadingText="";return}const{network:t,routeData:s,stopFacilities:i,transitLines:r,mapExtent:a}=e.data;this._network=t,this._routeData=s,this._stopFacilities=i,this._transitLines=r,this._mapExtentXYXY=a,this._transitHelper.terminate(),this.loadingText="Summarizing departures...",this.vizDetails.customRouteTypes&&this.vizDetails.customRouteTypes.length>0?this.routeColors=this.vizDetails.customRouteTypes:this.routeColors=rt,await this.processDepartures(),this._transitLinks=await this.constructDepartureFrequencyGeoJson(),this.addTransitToMap(this._transitLinks),this.handleClickedMetric({field:"departures"}),localStorage.setItem(this.$route.fullPath+"-bounds",JSON.stringify(this._mapExtentXYXY)),this.mymap.fitBounds(this._mapExtentXYXY,{animate:!1}),this.vizDetails.demand&&await this.loadDemandData(this.vizDetails.demand),this.loadingText=""},async processDepartures(){this.loadingText="Processing departures...";for(const e in this._transitLines)if(this._transitLines.hasOwnProperty(e)){const t=this._transitLines[e];for(const s of t.transitRoutes)for(const i of s.route)i in this._departures||(this._departures[i]={total:0,routes:new Set}),this._departures[i].total+=s.departures,this._departures[i].routes.add(s.id),this._maximum=Math.max(this._maximum,this._departures[i].total)}},setTransitLayerOpacity(e){this.mymap.getLayer("transit-link")&&(this.mymap.setPaintProperty("transit-link","line-opacity",e),this.mymap.setPaintProperty("transit-link","line-color",e==1?["get","color"]:"#888888"))},showAllTransit(e){if(!e){this.mymap.getLayer("transit-link")&&this.mymap.removeLayer("transit-link");return}this.mymap.getLayer("transit-link")||this.mymap.addLayer({id:"transit-link",source:"transit-source",type:"line",paint:{"line-opacity":1,"line-width":1,"line-color":["get","color"]}}),this.mymap.on("click","transit-link",t=>{this.clickedOnTransitLink(t)}),this.mymap.on("mousemove","transit-link",t=>{this.mymap.getCanvas().style.cursor=t?"pointer":"grab",this.hoveredOnElement(t)}),this.mymap.on("mouseleave","transit-link",()=>{this.mymap.getCanvas().style.cursor="grab",this.mapPopup.remove()}),this.drawMetric()},addTransitToMap(e){this._geoTransitLinks=e,this.mymap.addSource("transit-source",{data:e,type:"geojson"}),this.showAllTransit(!0)},hoveredOnElement(e){const t=e.features[0].properties;let s='<div class="map-popup">';for(const i of this.metrics){let r=this.$i18n.locale=="de"?i.name_de:i.name_en;r=r.replaceAll(" ","&nbsp;"),isNaN(t[i.field])||(s+=`
          <div style="display: flex">
            <div>${r}:&nbsp;&nbsp;</div>
            <b style="margin-left: auto; text-align: right">${t[i.field]}</b>
          </div>`)}s+="<div>",this.mapPopup.setLngLat(e.lngLat).setHTML(s).addTo(this.mymap)},async constructDepartureFrequencyGeoJson(){const e=[];this.usedLabels=[];for(const t in this._departures)if(this._departures.hasOwnProperty(t)){const s=this._network.links[t];if(s==null)continue;let i;try{if(this.avroNetwork){const c=this.avroNetwork.from[s],m=this.avroNetwork.to[s],l=this.avroNetwork.__nodes[c],h=this.avroNetwork.__nodes[m];i=[l,h]}else i=[[this._network.nodes[s.from].x,this._network.nodes[s.from].y],[this._network.nodes[s.to].x,this._network.nodes[s.to].y]]}catch(c){console.warn(""+c);continue}const r=this._departures[t].total;let a=!0,o="#888",n=!1;for(const c of this._departures[t].routes){const m=this._routeData[c];for(const l of this.routeColors){n=!1,l.hide&&(n=!0);let h=!0;for(const[f,u]of Object.entries(l.match)){const p=m[f];if(!p){h=!1;break}if(f==="gtfsRouteType"){if(Array.isArray(u)){if(!u.includes(p)){h=!1;break}}else if(p!==u){h=!1;break}}else if(!I.isMatch(p,u)){h=!1;break}}if(h){o=l.color,!this.usedLabels.includes(l.label)&&!n&&this.usedLabels.push(l.label);break}}o=="#888"&&console.log("OHE NOES",c)}let d={type:"Feature",geometry:{type:"LineString",coordinates:i},properties:{color:o,departures:r,id:t,isRail:a,from:s.from,to:s.to}};d=this.offsetLineByMeters(d,15),n||e.push(d)}return e.sort(function(t,s){return t.isRail&&!s.isRail?-1:s.isRail&&!t.isRail?1:0}),{type:"FeatureCollection",features:e}},offsetLineByMeters(e,t){try{return P(e,t,{units:"meters"})}catch{}return e},removeStopMarkers(){this.stopMarkers=[],this.stopHTML.html=""},showTransitStops(){this.removeStopMarkers();const e=this.selectedRoute,t=this.mymap.getBearing();let s;const i=[];for(const[r,a]of e.routeProfile.entries()){const o=this._stopFacilities[a.refId],n=[o.x,o.y];if(r<e.routeProfile.length-1){const m=w([n[0],n[1]]),l=w([this._stopFacilities[e.routeProfile[r+1].refId].x,this._stopFacilities[e.routeProfile[r+1].refId].y]);s=O(m,l)-t}const d=this.mymap.project([n[0],n[1]]),c={i:r,bearing:s,xy:{x:Math.floor(d.x),y:Math.floor(d.y)},name:o.name||"",id:o.id||"",linkRefId:o.linkRefId||""};i.push(c)}this.stopMarkers=i},showTransitRoute(e){if(!e)return;this.stopHTML.html="";const t=this._routeData[e];this.selectedRoute=t;const s=this.mymap.getSource("selected-route-data");s?s.setData(t.geojson):this.mymap.addSource("selected-route-data",{data:t.geojson,type:"geojson"}),this.mymap.getLayer("selected-route")||this.mymap.addLayer({id:"selected-route",source:"selected-route-data",type:"line",paint:{"line-opacity":1,"line-width":7,"line-color":"#fbff66"}})},removeSelectedRoute(){if(this.selectedRoute){try{this.mymap.getLayer("selected-route")&&this.mymap.removeLayer("selected-route")}catch{}this.selectedRoute=null}},clickedOnTransitLink(e){this.removeStopMarkers(),this.removeSelectedRoute();const t=e.features[0].properties;console.log("CLICKED ON",t.id);const s=this._departures[t.id].routes;this.calculatePassengerVolumes(t.id);const i=[];for(const r of s)i.push(this._routeData[r]);i.sort(function(r,a){return r.departures>a.departures?-1:1}),this.routesOnLink=i,this.highlightAllAttachedRoutes(),i.length>0&&this.showRouteDetails(i[0].id),this.setTransitLayerOpacity(.2)},calculatePassengerVolumes(e){let t={departures:0,pax:0,loadfac:0};const s=this._transitLinks.features.find(i=>i.properties.id==e);console.log({found:s}),this.summaryStats=s?s.properties:t},removeAttachedRoutes(){for(const e of this._attachedRouteLayers)try{this.mymap.removeLayer("route-"+e),this.mymap.removeSource("source-route-"+e)}catch{}this._attachedRouteLayers=[]},highlightAllAttachedRoutes(){this.removeAttachedRoutes();for(const e of this.routesOnLink)this.mymap.addSource("source-route-"+e.id,{data:e.geojson,type:"geojson"}),this.mymap.addLayer({id:"route-"+e.id,source:"source-route-"+e.id,type:"line",paint:{"line-opacity":.9,"line-width":10,"line-color":"#44c378"}}),this._attachedRouteLayers.push(e.id),this.mymap.on("click","route-"+e.id,t=>{console.log("click!",t),this.clickedOnTransitLink(t)})},pressedEscape(){this.removeSelectedRoute(),this.removeStopMarkers(),this.removeAttachedRoutes(),this.selectedRoute=null,this.routesOnLink=[]},pressedArrowKey(e){if(!this.selectedRoute)return;let t=this.routesOnLink.indexOf(this.selectedRoute);t=t+e,!(t<0||t>=this.routesOnLink.length)&&this.showRouteDetails(this.routesOnLink[t].id)},clearData(){var e;this._attachedRouteLayers=[],this._departures={},this._mapExtentXYXY=[180,90,-180,-90],this._maximum=0,this._network={nodes:{},links:{}},this._routeData={},this._stopFacilities={},this._transitLinks=null,this._transitLines={},this.selectedRoute=null,this.cfDemand=null,(e=this.cfDemandLink)==null||e.dispose(),this.resolvers={},this.routesOnLink=[],this.selectedRoute={},this.stopMarkers=[],this._linkData=null,this._geoTransitLinks=null}},async mounted(){this.$store.commit("setFullScreen",!this.thumbnail),this.debounceHandleSearchText=F.debounce(this.handleSearchText,350),this.clearData(),this._roadFetcher=new x,this._transitFetcher=new x,this._transitHelper=new D,this.myState.subfolder=this.subfolder,this.myState.yamlConfig=this.yamlConfig??"",this.myState.thumbnail=this.thumbnail,await this.getVizDetails()&&(this.thumbnail||(await this.prepareView(),this.setupMap()))},beforeDestroy(){this.mymap&&this.mymap.remove(),this.clearData(),this.xmlWorker&&this.xmlWorker.terminate(),this._roadFetcher&&this._roadFetcher.terminate(),this._transitFetcher&&this._transitFetcher.terminate(),this._transitHelper&&this._transitHelper.terminate(),this.$store.commit("setFullScreen",!1)}});$({colormap:"viridis",nshades:at});var nt=function(){var t=this,s=t._self._c;return t._self._setupProxy,s("div",{staticClass:"transit-viz",class:{"hide-thumbnail":!t.thumbnail}},[t.thumbnail?t._e():s("div",{staticClass:"main-layout",on:{mousemove:function(i){return i.stopPropagation(),t.dividerDragging.apply(null,arguments)},mouseup:t.dividerDragEnd}},[s("div",{directives:[{name:"show",rawName:"v-show",value:t.showLegend,expression:"showLegend"}],staticClass:"dragger",on:{mousedown:t.dividerDragStart,mouseup:t.dividerDragEnd,mousemove:function(i){return i.stopPropagation(),t.dividerDragging.apply(null,arguments)}}}),s("div",{directives:[{name:"show",rawName:"v-show",value:t.showLegend,expression:"showLegend"}],staticClass:"new-rightside-info-panel",style:{width:`${t.legendSectionWidth}px`}},[t._m(0),t.metrics.length>1?s("div",{staticClass:"panel-item"},[s("div",{staticClass:"metric-buttons"},t._l(t.metrics,function(i,r){return s("button",{key:i.field,staticClass:"button is-small metric-button",style:{color:t.activeMetric===i.field?"white":t.buttonColors[r],border:`1px solid ${t.buttonColors[r]}`,"background-color":t.activeMetric===i.field?t.buttonColors[r]:t.isDarkMode?"#333":"white"},on:{click:function(a){return t.handleClickedMetric(i)}}},[t._v(t._s(t.$i18n.locale==="de"?i.name_de:i.name_en))])}),0)]):t._e(),s("b-input",{staticClass:"searchbox",staticStyle:{padding:"0.5rem 0.5rem 1rem 0"},attrs:{size:"is-small",placeholder:"Search..."},model:{value:t.searchText,callback:function(i){t.searchText=i},expression:"searchText"}}),t.routesOnLink.length?t._e():s("p",{staticStyle:{"font-size":"0.9rem"}},[t._v("Select a link to view its routes.")]),s("div",{staticClass:"panel-items"},[t.routesOnLink.length>0?s("div",{staticClass:"route-list"},[t.summaryStats.departures?s("div",{staticClass:"link-summary flex-col"},[t._m(1),s("div",{staticClass:"indent flex-col",staticStyle:{"margin-left":"0.5rem"}},[s("p",[t._v("Departures: "+t._s(t.summaryStats.departures))]),t.cfDemand?s("p",[t._v("Passengers: "+t._s(t.summaryStats.pax))]):t._e(),t.cfDemand?s("p",[t._v("Load factor: "+t._s(t.summaryStats.loadfac))]):t._e()])]):t._e(),t._m(2),t._l(t.routesOnLink,function(i){return s("div",{key:i.uniqueRouteID,staticClass:"route",class:{highlightedRoute:t.selectedRoute&&i.id===t.selectedRoute.id},on:{click:function(r){return t.showRouteDetails(i.id)}}},[s("div",{staticClass:"route-title"},[t._v(t._s(i.id))]),s("div",{staticClass:"detailed-route-data"},[s("div",{staticClass:"col"},[s("p",[s("b",[t._v(t._s(i.departures)+" departures")])]),s("p",[t._v(t._s(i.firstDeparture)+" â€” "+t._s(i.lastDeparture))])]),i.passengersAtArrival?s("div",{staticClass:"col"},[s("p",[s("b",[t._v(t._s(i.passengersAtArrival)+" passengers")])]),s("p",[t._v(t._s(i.totalVehicleCapacity)+" capacity")])]):t._e()])])})],2):t._e()]),t.thumbnail?t._e():s("legend-box",{staticClass:"legend",attrs:{rows:t.legendRows}})],1),s("div",{staticClass:"map-container",class:{"hide-thumbnail":!t.thumbnail}},[s("div",{staticClass:"map-styles",attrs:{id:t.mapID}},[t.stopHTML.html?s("div",{staticClass:"stop-html",style:{left:t.stopHTML.x+"px",top:t.stopHTML.y+"px"},domProps:{innerHTML:t._s(t.stopHTML.html)}}):t._e(),t._l(t.stopMarkers,function(i,r){return s("div",{key:`${r}${i.name}`,staticClass:"stop-marker",style:{transform:"translate(-50%,-50%) rotate("+i.bearing+"deg)",left:i.xy.x+"px",top:i.xy.y+"px"},on:{mouseenter:function(a){return t.hoverOverStop(i,a)}}})})],2),s("zoom-buttons"),t.loadingText?s("div",{staticClass:"status-corner"},[s("p",[t._v(t._s(t.loadingText))])]):t._e()],1)])])},lt=[function(){var e=this,t=e._self._c;return e._self._setupProxy,t("p",{staticStyle:{"margin-top":"0.5rem","font-size":"0.9rem"}},[t("b",[e._v("TRANSIT ROUTES")])])},function(){var e=this,t=e._self._c;return e._self._setupProxy,t("p",[t("b",[e._v("LINK SUMMARY")])])},function(){var e=this,t=e._self._c;return e._self._setupProxy,t("p",[t("b",[e._v("ROUTES ON LINK")])])}];var ct=k(ot,nt,lt,!1,null,"95ce5299",null,null);const Ft=ct.exports;export{Ft as default};
//# sourceMappingURL=TransitDemand-ae80dd6e.js.map
