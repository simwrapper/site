{"version":3,"file":"FileSelector-7d478347.js","sources":["../../src/components/viz-configurator/FileSelector.vue"],"sourcesContent":["<template>\n  <div class=\"fs-file-selector\" :class=\"{ 'fs-drag-enter': isDragEnter }\">\n    <div class=\"fs-loader\" v-show=\"isLoading\">\n      <slot name=\"loader\"> Loading... </slot>\n    </div>\n\n    <div\n      class=\"fs-droppable\"\n      ref=\"fsDroppable\"\n      :style=\"{ height: height + 'px' }\"\n      :class=\"{ isDragEnter: 'is-dragging' }\"\n      @dragenter.stop.prevent=\"startDrag()\"\n      @dragover.stop.prevent=\"startDrag()\"\n      @dragleave=\"isDragEnter = false\"\n      @drop.stop.prevent=\"handleDrop\"\n    >\n      <input\n        ref=\"fsFileInput\"\n        type=\"file\"\n        tabindex=\"-1\"\n        :multiple=\"multiple\"\n        :accept=\"acceptExtensions\"\n        @change=\"handleFilesChange\"\n      />\n      <slot name=\"top\"></slot>\n\n      <div href=\"#\" class=\"fs-btn-select\" @click=\"$refs.fsFileInput.click()\">\n        <slot>Select</slot>\n      </div>\n\n      <slot name=\"bottom\"></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'FileSelector',\n\n  props: {\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n\n    isLoading: {\n      type: Boolean,\n      default: false,\n    },\n\n    acceptExtensions: {\n      type: String,\n      default: '',\n    },\n\n    maxFileSize: {\n      // in bytes\n      type: Number,\n      default: NaN,\n    },\n\n    height: {\n      type: Number,\n      default: NaN,\n    },\n\n    validateFn: {\n      type: Function,\n      default: () => true,\n    },\n  },\n\n  data() {\n    return {\n      isDragEnter: false,\n    }\n  },\n\n  methods: {\n    startDrag() {\n      this.isDragEnter = true\n    },\n\n    handleFilesChange($event) {\n      this.preprocessFiles($event.target.files)\n    },\n\n    handleDrop($event) {\n      this.isDragEnter = false\n      this.preprocessFiles($event.dataTransfer.files)\n    },\n\n    checkFileExtensions(files) {\n      // get non-empty, unique extension items\n      const extList = [...new Set(this.acceptExtensions.toLowerCase().split(',').filter(Boolean))]\n      const list = Array.from(files)\n\n      // check if the selected files are in supported extensions\n      const invalidFileIndex = list.findIndex(file => {\n        const ext = `.${file.name.toLowerCase().split('.').pop()}`\n\n        return !extList.includes(ext)\n      })\n\n      // all exts are valid\n      return invalidFileIndex === -1\n    },\n\n    checkFileSize(files) {\n      if (Number.isNaN(this.maxFileSize)) {\n        return true\n      }\n\n      const list = Array.from(files)\n\n      // find invalid file size\n      const invalidFileIndex = list.findIndex(file => file.size > this.maxFileSize)\n\n      // all file size are valid\n      return invalidFileIndex === -1\n    },\n\n    validate(files) {\n      // file selection\n      if (!this.multiple && files.length > 1) {\n        return 'MULTIFILES_ERROR'\n      }\n\n      // extension\n      if (!this.checkFileExtensions(files)) {\n        return 'EXTENSION_ERROR'\n      }\n\n      // file size\n      if (!this.checkFileSize(files)) {\n        return 'FILE_SIZE_ERROR'\n      }\n\n      // custom validation\n      return this.validateFn(files)\n    },\n\n    preprocessFiles(files) {\n      const result = this.validate(files)\n      this.$emit('validated', result, files)\n\n      // validation\n      if (result === true) {\n        this.$emit('changed', files)\n      }\n\n      // clear selected files\n      this.$refs.fsFileInput.value = ''\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.fs-file-selector {\n  position: relative;\n\n  .fs-loader {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 1;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .fs-droppable {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    padding-bottom: 1rem;\n\n    input[type='file'] {\n      visibility: hidden;\n      position: absolute;\n      width: 1px;\n      height: 1px;\n    }\n  }\n\n  &.fs-drag-enter {\n    // to prevent dragleave event triggered while user dragging over child items\n    .fs-droppable::before {\n      content: '';\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 9999999;\n      border: 5px dashed #2a5af8;\n      border-radius: 10px;\n    }\n  }\n}\n</style>\n"],"names":["_sfc_main","$event","files","extList","file","ext","result"],"mappings":"wCAoCA,MAAAA,EAAA,CACA,KAAA,eAEA,MAAA,CACA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAEA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EAEA,iBAAA,CACA,KAAA,OACA,QAAA,EACA,EAEA,YAAA,CAEA,KAAA,OACA,QAAA,GACA,EAEA,OAAA,CACA,KAAA,OACA,QAAA,GACA,EAEA,WAAA,CACA,KAAA,SACA,QAAA,IAAA,EACA,CACA,EAEA,MAAA,CACA,MAAA,CACA,YAAA,EACA,CACA,EAEA,QAAA,CACA,WAAA,CACA,KAAA,YAAA,EACA,EAEA,kBAAAC,EAAA,CACA,KAAA,gBAAAA,EAAA,OAAA,KAAA,CACA,EAEA,WAAAA,EAAA,CACA,KAAA,YAAA,GACA,KAAA,gBAAAA,EAAA,aAAA,KAAA,CACA,EAEA,oBAAAC,EAAA,CAEA,MAAAC,EAAA,CAAA,GAAA,IAAA,IAAA,KAAA,iBAAA,YAAA,EAAA,MAAA,GAAA,EAAA,OAAA,OAAA,CAAA,CAAA,EAWA,OAVA,MAAA,KAAAD,CAAA,EAGA,UAAAE,GAAA,CACA,MAAAC,EAAA,IAAAD,EAAA,KAAA,YAAA,EAAA,MAAA,GAAA,EAAA,IAAA,CAAA,GAEA,MAAA,CAAAD,EAAA,SAAAE,CAAA,CACA,CAAA,IAGA,EACA,EAEA,cAAAH,EAAA,CACA,OAAA,OAAA,MAAA,KAAA,WAAA,EACA,GAGA,MAAA,KAAAA,CAAA,EAGA,UAAAE,GAAAA,EAAA,KAAA,KAAA,WAAA,IAGA,EACA,EAEA,SAAAF,EAAA,CAEA,MAAA,CAAA,KAAA,UAAAA,EAAA,OAAA,EACA,mBAIA,KAAA,oBAAAA,CAAA,EAKA,KAAA,cAAAA,CAAA,EAKA,KAAA,WAAAA,CAAA,EAJA,kBALA,iBAUA,EAEA,gBAAAA,EAAA,CACA,MAAAI,EAAA,KAAA,SAAAJ,CAAA,EACA,KAAA,MAAA,YAAAI,EAAAJ,CAAA,EAGAI,IAAA,IACA,KAAA,MAAA,UAAAJ,CAAA,EAIA,KAAA,MAAA,YAAA,MAAA,EACA,CACA,CACA"}