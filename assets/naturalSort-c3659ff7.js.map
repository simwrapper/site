{"version":3,"file":"naturalSort-c3659ff7.js","sources":["../../node_modules/javascript-natural-sort/naturalSort.js"],"sourcesContent":["/*\r\n * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license\r\n * Author: Jim Palmer (based on chunking idea from Dave Koelle)\r\n */\r\n/*jshint unused:false */\r\nmodule.exports = function naturalSort (a, b) {\r\n\t\"use strict\";\r\n\tvar re = /(^([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\r\n\t\tsre = /(^[ ]*|[ ]*$)/g,\r\n\t\tdre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\r\n\t\thre = /^0x[0-9a-f]+$/i,\r\n\t\tore = /^0/,\r\n\t\ti = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },\r\n\t\t// convert all to strings strip whitespace\r\n\t\tx = i(a).replace(sre, '') || '',\r\n\t\ty = i(b).replace(sre, '') || '',\r\n\t\t// chunk/tokenize\r\n\t\txN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\tyN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\t// numeric, hex or date detection\r\n\t\txD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\r\n\t\tyD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,\r\n\t\toFxNcL, oFyNcL;\r\n\t// first try and sort Hex codes or Dates\r\n\tif (yD) {\r\n\t\tif ( xD < yD ) { return -1; }\r\n\t\telse if ( xD > yD ) { return 1; }\r\n\t}\r\n\t// natural sorting through split numeric strings and default strings\r\n\tfor(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\r\n\t\t// find floats not starting with '0', string or 0 if not defined (Clint Priest)\r\n\t\toFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\r\n\t\toFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\r\n\t\t// handle numeric vs string comparison - number < string - (Kyle Adams)\r\n\t\tif (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }\r\n\t\t// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\r\n\t\telse if (typeof oFxNcL !== typeof oFyNcL) {\r\n\t\t\toFxNcL += '';\r\n\t\t\toFyNcL += '';\r\n\t\t}\r\n\t\tif (oFxNcL < oFyNcL) { return -1; }\r\n\t\tif (oFxNcL > oFyNcL) { return 1; }\r\n\t}\r\n\treturn 0;\r\n};\r\n"],"names":["naturalSort","a","b","re","sre","dre","hre","ore","i","s","x","y","xN","yN","xD","yD","oFxNcL","oFyNcL","cLoc","numS"],"mappings":"wCAKA,IAAAA,EAAiB,SAASA,EAAaC,EAAGC,EAAG,CAE5C,IAAIC,EAAK,8EACRC,EAAM,iBACNC,EAAM,iHACNC,EAAM,iBACNC,EAAM,KACNC,EAAI,SAASC,EAAG,CAAE,OAAOT,EAAY,cAAgB,GAAKS,GAAG,YAAW,GAAM,GAAKA,CAAI,EAEvFC,EAAIF,EAAEP,CAAC,EAAE,QAAQG,EAAK,EAAE,GAAK,GAC7BO,EAAIH,EAAEN,CAAC,EAAE,QAAQE,EAAK,EAAE,GAAK,GAE7BQ,EAAKF,EAAE,QAAQP,EAAI,QAAQ,EAAE,QAAQ,MAAM,EAAE,EAAE,QAAQ,MAAM,EAAE,EAAE,MAAM,IAAI,EAC3EU,EAAKF,EAAE,QAAQR,EAAI,QAAQ,EAAE,QAAQ,MAAM,EAAE,EAAE,QAAQ,MAAM,EAAE,EAAE,MAAM,IAAI,EAE3EW,EAAK,SAASJ,EAAE,MAAMJ,CAAG,EAAG,EAAE,GAAMM,EAAG,SAAW,GAAKF,EAAE,MAAML,CAAG,GAAK,KAAK,MAAMK,CAAC,EACnFK,EAAK,SAASJ,EAAE,MAAML,CAAG,EAAG,EAAE,GAAKQ,GAAMH,EAAE,MAAMN,CAAG,GAAK,KAAK,MAAMM,CAAC,GAAK,KAC1EK,EAAQC,EAET,GAAIF,EAAI,CACP,GAAKD,EAAKC,EAAO,MAAO,GACnB,GAAKD,EAAKC,EAAO,MAAO,EAC7B,CAED,QAAQG,EAAK,EAAGC,EAAK,KAAK,IAAIP,EAAG,OAAQC,EAAG,MAAM,EAAGK,EAAOC,EAAMD,IAAQ,CAKzE,GAHAF,EAAS,EAAEJ,EAAGM,CAAI,GAAK,IAAI,MAAMX,CAAG,GAAK,WAAWK,EAAGM,CAAI,CAAC,GAAKN,EAAGM,CAAI,GAAK,EAC7ED,EAAS,EAAEJ,EAAGK,CAAI,GAAK,IAAI,MAAMX,CAAG,GAAK,WAAWM,EAAGK,CAAI,CAAC,GAAKL,EAAGK,CAAI,GAAK,EAEzE,MAAMF,CAAM,IAAM,MAAMC,CAAM,EAAK,OAAQ,MAAMD,CAAM,EAAK,EAAI,GAMpE,GAJS,OAAOA,GAAW,OAAOC,IACjCD,GAAU,GACVC,GAAU,IAEPD,EAASC,EAAU,MAAO,GAC9B,GAAID,EAASC,EAAU,MAAO,EAC9B,CACD,MAAO,EACR","x_google_ignoreList":[0]}